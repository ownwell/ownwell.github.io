<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cyning</title>
  <subtitle>Follow your Heart</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ownwell.github.io/"/>
  <updated>2017-07-17T16:33:22.340Z</updated>
  <id>http://ownwell.github.io/</id>
  
  <author>
    <name>一起分享技术</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android动态加载so文件</title>
    <link href="http://ownwell.github.io/2017/07/18/dynamic-load-so/"/>
    <id>http://ownwell.github.io/2017/07/18/dynamic-load-so/</id>
    <published>2017-07-17T16:29:19.000Z</published>
    <updated>2017-07-17T16:33:22.340Z</updated>
    
    <content type="html"><![CDATA[<p>随着业务的增大，我们的业务代码也随之增多，包的大小是有增无减，所以适当的时候思考下怎么怎么做减法–减小包的提及。</p>
<p>结合最近在做的公司的项目，觉得动态加载so文件是一个很好精简apk包的方法。举个例子，视频播放器的SDK（如IJKplayer，VLC player），他们的各种视频的解码器一般都是通过C/C++编译的so文件，这些so文件其实都不小，这样导致我们从市场上下载的apk包很大，所以能不能让so文件不随apk一起发布呢，而是按需下载(只有当需要播放视频时才去服务器下载，然后再在本地load)。<br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/so-fix.png" alt=""></p>
<h1 id="为什么要动态加载"><a href="#为什么要动态加载" class="headerlink" title="为什么要动态加载"></a>为什么要动态加载</h1><p>其实刚才已经解释了，可以有效避免apk安装包过大，因为这些so文件是依赖server的下发，本地只是load的过程。<br>其次，动态加载可以动态升级so文件，也是动态化的一部分。可以在不发版的情况下，升级so文件。</p>
<blockquote>
<p>动态加载so文件，必须进行安全性校验，避免不必要的安全事故。</p>
</blockquote>
<h1 id="动态加载so文件"><a href="#动态加载so文件" class="headerlink" title="动态加载so文件"></a>动态加载so文件</h1><h2 id="1-System-load-String-filePath"><a href="#1-System-load-String-filePath" class="headerlink" title="1. System.load(String filePath)"></a>1. System.load(String filePath)</h2><p>加载so文件分为动态加载和静态加载。</p>
<ol>
<li><p>静态加载就是通过<code>System.loadLibrary(Sting libname);</code>来直接加载，对于一个app它只能加载system的和我们自己添加到jniLibs下的so文件。<br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/so_fix_libs_path.png" alt="图2-1"></p>
<p>这个是我的demo项目的路径，静态加载回去这些路径下找到对应的库，否则抛出异常。</p>
</li>
<li><p>动态加载这是通过<code>System.load(String filePath)</code>来加载filePath对应路径下的so文件，这个路径不可以是外置SDcard等拓展路径，必须是/data/**{package}下。</p>
</li>
</ol>
<p>所以下发的so没有权限放到图2-1下，只能通过加载的so文件路径的方式来动态加载so文件。</p>
<p>方案1： 将so文件copy到/data/**{package}下，system.load(filePath).</p>
<h2 id="2-支持静态加载"><a href="#2-支持静态加载" class="headerlink" title="2. 支持静态加载"></a>2. 支持静态加载</h2><p>但是我们这样做还是解决不了问题，因为有些so文件加载的过程是放到sdkxia的，如百度地图sdk，已经封装了加载so文件（静态加载），即使你已经实现了方案1仍然扔出<code>UnsatisfiedLinkError</code>的异常。<br>要弄清这个过程，就必须了解so的加载过程，以我的本地的android skd（Android）为例。<br>System源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadLibrary</span><span class="params">(String libname)</span> </span>&#123;</div><div class="line">              Runtime.getRuntime().loadLibrary0(VMStack.getCallingClassLoader(), libname);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>RunningTime<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">loadLibrary0</span><span class="params">(ClassLoader loader, String libname)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (libname.indexOf((<span class="keyword">int</span>)File.separatorChar) != -<span class="number">1</span>) &#123;</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> UnsatisfiedLinkError(</div><div class="line">  <span class="string">"Directory separator should not appear in library name: "</span> + libname);</div><div class="line">      &#125;</div><div class="line">      String libraryName = libname;</div><div class="line">      <span class="keyword">if</span> (loader != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="comment">// 去loade中查找libraryName命令的library</span></div><div class="line">          String filename = loader.findLibrary(libraryName);</div><div class="line">          <span class="keyword">if</span> (filename == <span class="keyword">null</span>) &#123;</div><div class="line">              <span class="comment">// It's not necessarily true that the ClassLoader used</span></div><div class="line">              <span class="comment">// System.mapLibraryName, but the default setup does, and it's</span></div><div class="line">              <span class="comment">// misleading to say we didn't find "libMyLibrary.so" when we</span></div><div class="line">              <span class="comment">// actually searched for "liblibMyLibrary.so.so".</span></div><div class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> UnsatisfiedLinkError(loader + <span class="string">" couldn't find \""</span> +</div><div class="line">                                             System.mapLibraryName(libraryName) + <span class="string">"\""</span>);</div><div class="line">          &#125;</div><div class="line">          String error = doLoad(filename, loader);</div><div class="line">          <span class="keyword">if</span> (error != <span class="keyword">null</span>) &#123;</div><div class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> UnsatisfiedLinkError(error);</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      String filename = System.mapLibraryName(libraryName);</div><div class="line">      List&lt;String&gt; candidates = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">      String lastError = <span class="keyword">null</span>;</div><div class="line">      <span class="keyword">for</span> (String directory : getLibPaths()) &#123;</div><div class="line">          String candidate = directory + filename;</div><div class="line">          candidates.add(candidate);</div><div class="line"></div><div class="line">          <span class="keyword">if</span> (IoUtils.canOpenReadOnly(candidate)) &#123;</div><div class="line">              String error = doLoad(candidate, loader);</div><div class="line">              <span class="keyword">if</span> (error == <span class="keyword">null</span>) &#123;</div><div class="line">                  <span class="keyword">return</span>; <span class="comment">// We successfully loaded the library. Job done.</span></div><div class="line">              &#125;</div><div class="line">              lastError = error;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (lastError != <span class="keyword">null</span>) &#123;</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> UnsatisfiedLinkError(lastError);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> UnsatisfiedLinkError(<span class="string">"Library "</span> + libraryName + <span class="string">" not found; tried "</span> + candidates);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>代码中的loader是<code>ClassLoader</code>的对象，对于Android实际上是<code>PathClassLoader</code>,这个意思就是当有classLoader时就通过<code>PathClassLoader</code>的<code>findLibrary(libraryName)</code>来加载（这个好像加载class），若无classLoader就通过<code>mapLibraryName1（）</code></p>
<blockquote>
<p>建议大家看下native层怎么实现的：<a href="https://www.v2ex.com/t/364978" target="_blank" rel="external">深入理解 System.loadLibrary</a></p>
</blockquote>
<p>我们加载so看classLoader是怎么实现的，Android 5.0的源码源码：<br><a href="https://android.googlesource.com/platform/libcore/+/android-5.0.0_r6/dalvik/src/main/java/dalvik/system/BaseDexClassLoader.java" target="_blank" rel="external">BaseDexClassLoader.java的源码</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">findLibrary</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> pathList.findLibrary(name);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>pathList就是我们的DexPathList对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DexPathList</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEX_SUFFIX = <span class="string">".dex"</span>;</div><div class="line">    <span class="comment">/** class definition context */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader definingContext;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * List of dex/resource (class path) elements.</div><div class="line">     * Should be called pathElements, but the Facebook app uses reflection</div><div class="line">     * to modify 'dexElements' (http://b/7726934).</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Element[] dexElements;</div><div class="line">    <span class="comment">/** List of native library directories. */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> File[] nativeLibraryDirectories;</div><div class="line">     …………</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findLibrary</span><span class="params">(String libraryName)</span> </span>&#123;</div><div class="line">        String fileName = System.mapLibraryName(libraryName);</div><div class="line">        <span class="keyword">for</span> (File directory : nativeLibraryDirectories) &#123;</div><div class="line">            String path = <span class="keyword">new</span> File(directory, fileName).getPath();</div><div class="line">            <span class="keyword">if</span> (IoUtils.canOpenReadOnly(path)) &#123;</div><div class="line">                <span class="keyword">return</span> path;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    …………</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到了吧，会先找system下的so文件，再找<code>nativeLibraryDirectories</code>下的，而这个<code>nativeLibraryDirectories</code>就是我们的自己项目中jniLibs下对应的so文件的路径。<br>当以当我们静态加载时，其实找的so文件就是<code>nativeLibraryDirectories</code>，所以我们可以以此作为突破口，利用反射，将这个nativeLibraryDirectories的开始处加上我们自己放so的文件夹下（感觉像QQ空间对class做patch的方式哦，其实替换旧的so文件这种可以可行的）。<br>开始hook啦。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">PathClassLoader pathClassLoader = (PathClassLoader) context.getApplicationContext().getClassLoader();</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           Object pathList = getPathList(pathClassLoader);</div><div class="line">                </div><div class="line">           <span class="comment">// 拿到nativeLibraryDirectories的Field</span></div><div class="line">           Field nativeLibraryDirectoriesField = pathList.getClass().getDeclaredField(<span class="string">"nativeLibraryDirectories"</span>);</div><div class="line">           nativeLibraryDirectoriesField.setAccessible(<span class="keyword">true</span>);</div><div class="line">           File[] libPaths = (File[]) nativeLibraryDirectoriesField.get(pathList);</div><div class="line">           File[] envilLibPaths = <span class="keyword">new</span> File[libPaths.length + <span class="number">1</span>];</div><div class="line">           <span class="comment">// 将存放我们自己so的文件夹加到第一位</span></div><div class="line">           envilLibPaths[<span class="number">0</span>] = dir;</div><div class="line">           <span class="comment">// 将原来的路径追加到后面</span></div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; libPaths.length; i++) &#123;</div><div class="line">               envilLibPaths[i + <span class="number">1</span>] = libPaths[i];</div><div class="line">           &#125;</div><div class="line">           <span class="comment">// 将新的nativeLibraryDirectories设置给pathList</span></div><div class="line">           nativeLibraryDirectoriesField.set(pathList, envilLibPaths);</div><div class="line">       &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div></pre></td></tr></table></figure></p>
<p>这个代码是在14-22都是ok的，但是23源码不是这样滴，看源码吧：<br><a href="https://android.googlesource.com/platform/libcore/+/android-6.0.1_r48/dalvik/src/main/java/dalvik/system/DexPathList.java" target="_blank" rel="external">23的源码</a>先放这,hook起来也不难。</p>
<blockquote>
<p>Android 23源码建议hook <code>nativeLibraryPathElements</code>这个而不是<code>nativeLibraryDirectories;</code><br>方案2：Hook DexPathList的nativeLibraryPathElements或者nativeLibraryDirectories，将我们自定义存so文件的文件夹作为他们的第一个元素。</p>
</blockquote>
<h1 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h1><p>刚开始我把所有视频相关的so文件扔到本地的一个文件下，再copy到/data/**{package}下，居然报<code>32-bit instead of 64-bit</code> 这个错误，我把so再放到jniLibs/armeabi下再跑可以啊，后来google了下发现有人在<a href="https://github.com/singwhatiwanna/dynamic-load-apk/issues/113" target="_blank" rel="external">动态化</a>时也遇到了，其中Anjon-github提到了一个方案：只要找任意一个32位的so文件（当然越小越好了）放到主程序中即可,于是我找了个1k的so文件放到了项目的jniLibs/armeabi下居然真的可以，这个原因不知为何，这个涉及到native代码，本人技术有限暂时没找到答案，不知道大家是否更好的解答或者解决方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着业务的增大，我们的业务代码也随之增多，包的大小是有增无减，所以适当的时候思考下怎么怎么做减法–减小包的提及。&lt;/p&gt;
&lt;p&gt;结合最近在做的公司的项目，觉得动态加载so文件是一个很好精简apk包的方法。举个例子，视频播放器的SDK（如IJKplayer，VLC playe
    
    </summary>
    
      <category term="Android" scheme="http://ownwell.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://ownwell.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Robust热修复-使用和项目介绍</title>
    <link href="http://ownwell.github.io/2017/05/24/Robust%E7%83%AD%E4%BF%AE%E5%A4%8D-%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/"/>
    <id>http://ownwell.github.io/2017/05/24/Robust热修复-入门使用/</id>
    <published>2017-05-24T11:11:44.000Z</published>
    <updated>2017-05-24T13:00:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Meituan-Dianping/Robust" target="_blank" rel="external">Robust</a>是美团推出的一款热修复框架，我记的之前我们分享过一篇<a href="http://ownwell.github.io/2016/09/30/%E7%83%AD%E4%BF%AE%E5%A4%8D%E4%B9%8B%E7%BE%8E%E5%9B%A2%E6%96%B9%E6%A1%88/">热修复之美团方案</a>,看完这篇文章就动手写了个Demo版项目。果然等了不久，今年三月份美团将已经趋向于稳定的<a href="https://github.com/Meituan-Dianping/Robust" target="_blank" rel="external">Robust</a>开源，在Andoid开发界也是一致好评。</p>
<p>后面会陆续放出Robust热修复的代码分析。<br>作为开篇第一篇，这篇文章会介绍怎么使用，使用中需要注意的问题和以及Robust项目介绍。<br><a id="more"></a></p>
<h1 id="热修复使用"><a href="#热修复使用" class="headerlink" title="热修复使用"></a>热修复使用</h1><h2 id="热修复的步骤"><a href="#热修复的步骤" class="headerlink" title="热修复的步骤"></a>热修复的步骤</h2><p>按照它的步骤：</p>
<ol>
<li>导入Robust插件</li>
<li>打出基础包，将生成的Robust相关文件放到指定目录下</li>
<li>修改代码</li>
<li>添加自动打补丁包插件</li>
<li>打出补丁包，并将包放到指定路径</li>
<li>基础包加载补丁包实现热修复</li>
</ol>
<h2 id="Robust使用注意事项"><a href="#Robust使用注意事项" class="headerlink" title="Robust使用注意事项"></a>Robust使用注意事项</h2><p>不过在实际操作中，发现了如下问题：<br><strong>1.</strong><br><code>auto-patch-plugin</code>只能在打补丁包时打开，也就是上面的第5步，打基础包时，不要打开。</p>
<p><strong>2.</strong> 打出基础包后，需要将生成的mapping文件以及build/outputs/robust/methodsMap.robust文件。<br>为了更好使用写了个Gradel脚本.  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function">task <span class="title">deleteFiles</span><span class="params">(type: Delete)</span> </span>&#123;</div><div class="line">    <span class="function">delete <span class="title">fileTree</span><span class="params">(<span class="string">'output'</span>)</span> </span>&#123;</div><div class="line">        include <span class="string">'**'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">copyFiles &#123;</div><div class="line">    description = <span class="string">'copy methodsMap to output file'</span></div><div class="line">    from <span class="string">'build/outputs/robust/methodsMap.robust'</span></div><div class="line">    into <span class="string">'robust/'</span></div><div class="line"></div><div class="line">    from <span class="string">'build/outputs/mapping/release/mapping.txt'</span></div><div class="line">    into <span class="string">'robust/'</span></div><div class="line"></div><div class="line">    from <span class="string">'build/outputs/apk/app-release.apk'</span></div><div class="line">    into <span class="string">'robust/'</span></div><div class="line">&#125;</div><div class="line"><span class="function">task <span class="title">copyFiles</span><span class="params">(type: Copy)</span> dependsOn deleteFiles</span></div></pre></td></tr></table></figure>
<p>所以在打基础包后，可以直接运行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">./gradlew copyFiles（Windows：./gradlew.bat copyFiles）</div></pre></td></tr></table></figure></p>
<p>这样在app下就有<br><code>methodsMap.robust</code><br> <code>mapping.txt</code><br> <code>app-release.apk</code>这三个文件。     </p>
<p><strong>3.</strong> 配置主项目下一定要配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">```java</div><div class="line">&lt;!--需要热补的包名或者类名，这些包名下的所有类都被会插入代码--&gt;</div><div class="line">&lt;packname name=&quot;hotfixPackage&quot;&gt;</div><div class="line">       &lt;name&gt;com.meituan&lt;/name&gt;</div><div class="line">       &lt;name&gt;com.sankuai&lt;/name&gt;</div><div class="line">       &lt;name&gt;com.dianping&lt;/name&gt;</div><div class="line">&lt;/packname&gt;</div><div class="line"></div><div class="line">   &lt;!--不需要热补的包名或者类名，可以在需要热补的包中剔除指定的类或者包--&gt;</div><div class="line">   &lt;exceptPackname name=&quot;exceptPackage&quot;&gt;</div><div class="line">       &lt;name&gt;com.meituan.robust&lt;/name&gt;</div><div class="line">   &lt;/exceptPackname&gt;</div><div class="line"></div><div class="line">   &lt;!--补丁的包名--&gt;</div><div class="line">   &lt;patchPackname name=&quot;patchPackname&quot;&gt;</div><div class="line">       &lt;name&gt;com.meituan.robust.patch&lt;/name&gt;</div><div class="line">   &lt;/patchPackname&gt;</div></pre></td></tr></table></figure></p>
<p>这个需要根据我们的实际情况来配置。<code>hotfixPackage</code>下所有类都会有一桩，也就是说每个类里面都会有一个静态的接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> ChangeQuickRedirect     changeQuickRedirect;</div></pre></td></tr></table></figure></p>
<h1 id="Robust项目介绍"><a href="#Robust项目介绍" class="headerlink" title="Robust项目介绍"></a>Robust项目介绍</h1><p>在Robust项目下有四个模板：<br>Robust<br> – auto-patch-plugin<br> – gradle-plugin<br> – patch<br> – autopatchbase   </p>
<p>auto-patch-plugin 这个是自动打包的插件<br>gradle-plugin 是为类中插桩的插件<br>patch 辅助管理和加载补丁的基础类<br>autopatchbase  是Robust最最基础的类，这个里面有我们的<code>ChangeQuickRedirect</code>这个桩接口。其他三个模块都需要依赖这个模块。<br>其基本流程如下：</p>
<ol>
<li><p>第一次打基础包，我们使用的<code>gradle-plugin</code>,会在打包过程中将我们需要的类插入一个<code>ChangeQuickRedirect</code>桩接口的静态实例，每个函数前插入如下代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(changeQuickRedirect != <span class="keyword">null</span>) &#123;    </div><div class="line">            <span class="comment">//PatchProxy中封装了获取当前className和methodName的逻辑，并在其内部最终调用了changeQuickRedirect的对应函数</span></div><div class="line">            <span class="keyword">if</span>(PatchProxy.isSupport(<span class="keyword">new</span> Object[<span class="number">0</span>], <span class="keyword">this</span>, changeQuickRedirect, <span class="keyword">false</span>)) &#123;     </div><div class="line">                <span class="keyword">return</span> ((Long)PatchProxy.accessDispatch(<span class="keyword">new</span> Object[<span class="number">0</span>], <span class="keyword">this</span>, changeQuickRedirect, <span class="keyword">false</span>)).longValue();    </div><div class="line">            &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>修改代码，在改动的代码前添加@Add或者@Modify的注释</p>
</li>
<li>使用<code>auto-patch-plugin</code>插件，来生成相对应的补丁。</li>
<li>加载补丁，通过补丁中的<code>com.meituan.robust.patch.PatchesInfoImpl</code>获取哪个类需要插桩和插入的桩接口对应的实现类。</li>
</ol>
<p>现在留下几个疑问：</p>
<ol>
<li>如何通过<code>gradle-plugin</code>为需要的类插桩？</li>
<li>打包过程中会有代码混淆，怎么解决代码混淆和对应的补丁问题</li>
<li>改变代码后，这个注解有什么用，<code>auto-patch-plugin</code>如何通过和之前的文件比较，怎么生成补丁。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/Meituan-Dianping/Robust&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Robust&lt;/a&gt;是美团推出的一款热修复框架，我记的之前我们分享过一篇&lt;a href=&quot;http://ownwell.github.io/2016/09/30/%E7%83%AD%E4%BF%AE%E5%A4%8D%E4%B9%8B%E7%BE%8E%E5%9B%A2%E6%96%B9%E6%A1%88/&quot;&gt;热修复之美团方案&lt;/a&gt;,看完这篇文章就动手写了个Demo版项目。果然等了不久，今年三月份美团将已经趋向于稳定的&lt;a href=&quot;https://github.com/Meituan-Dianping/Robust&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Robust&lt;/a&gt;开源，在Andoid开发界也是一致好评。&lt;/p&gt;
&lt;p&gt;后面会陆续放出Robust热修复的代码分析。&lt;br&gt;作为开篇第一篇，这篇文章会介绍怎么使用，使用中需要注意的问题和以及Robust项目介绍。&lt;br&gt;
    
    </summary>
    
      <category term="Android热修复" scheme="http://ownwell.github.io/categories/Android%E7%83%AD%E4%BF%AE%E5%A4%8D/"/>
    
    
      <category term="Android" scheme="http://ownwell.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>【Android】状态栏颜色的适配</title>
    <link href="http://ownwell.github.io/2017/04/13/Android-%E7%8A%B6%E6%80%81%E6%A0%8F%E9%A2%9C%E8%89%B2%E7%9A%84%E9%80%82%E9%85%8D/"/>
    <id>http://ownwell.github.io/2017/04/13/Android-状态栏颜色的适配/</id>
    <published>2017-04-12T16:03:25.000Z</published>
    <updated>2017-04-19T05:57:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直忙着写业务，一直没精力更新博客，趁着最近有点空闲事件，觉得很有必要写一篇博客捡回以前的那个状态。就写一个自己当时总结的一个适配功能吧：关于状态栏的字体/图标颜色适配。</p>
<p>随着Android6.0 Android7.0系统的系统升级，开发者来说适配的容易程度越来越低，我们需要将精力放到适配4.4+以上，而Android4.4相对来说是一个比较稳定的版本，尤其是在UI上它又和Android 6.0、Android7.0接近。<br><a id="more"></a><br>对于状态栏的，我记得之前我写过文章来实现着色的、透明的等各种样式的适配的文章，今天不再赘述。</p>
<p>我们要说的是今天的关于状态栏的字体/图标颜色。</p>
<h1 id="状态字体颜色有区分"><a href="#状态字体颜色有区分" class="headerlink" title="状态字体颜色有区分"></a>状态字体颜色有区分</h1><p>可能对于我这个被人成为”MI Body”的伪米粉来说，手里握着MI 5，听音乐用的小米耳机，还戴着小米手环，可能觉得小米最经典之作是小米定制的系统—MI UI。</p>
<p>当然除了Mi UI其他厂商也有定制，Flyme，EMUI，Color OS以及一加的氢OS，Smartisan OS等等，每款定制ROM都有其独特之处，不过个人已经习惯了Mi UI。<br>MI UI一个很好的体验就是状态的字体能够变色，黑色变白色，白色变黑色。<br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/14920106163118.jpg" alt=""></p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/14920106348516.jpg" alt=""></p>
<p>是不是很有意思，其他Android 6.0也就是我们说的Android N也是支持的。</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/14920119504831.jpg" alt=""></p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/14920118899908.jpg" alt=""></p>
<blockquote>
<p>猜想：Google下一步会不会把状态栏的字体和图标颜色也开放能设置成彩色呢？</p>
</blockquote>
<p>那么如何来实现呢，这种适配呢？</p>
<h1 id="适配状态栏的字体-图标颜色"><a href="#适配状态栏的字体-图标颜色" class="headerlink" title="适配状态栏的字体/图标颜色"></a>适配状态栏的字体/图标颜色</h1><p>由于国内的ROM如MI UI和Flyme已经修改过Android的源码，他们在Android 4.4 做了适配，而原生的系统则是在Android M上才能设置状态栏字体颜色。</p>
<p>我们需要自己去一个个判断适配：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applay</span><span class="params">(Activity activity, <span class="keyword">boolean</span> isDarkFont)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">            IStatusBar statusBar = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span> (OSUtils.isFlyme()) &#123;</div><div class="line">                statusBar = mStatusBars.get(StatusBarAdapter.FLYME);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (OSUtils.isMIUI()) &#123;</div><div class="line">                statusBar = mStatusBars.get(StatusBarAdapter.MIUI);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (OSUtils.isOSM()) &#123;</div><div class="line">                statusBar = mStatusBars.get(StatusBarAdapter.OS_M);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (statusBar != <span class="keyword">null</span>) &#123;</div><div class="line">                statusBar.setStatusBarLightMode(activity, isDarkFont);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="小米的MIUI："><a href="#小米的MIUI：" class="headerlink" title="小米的MIUI："></a>小米的MIUI：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"><span class="keyword">import</span> android.view.Window;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Field;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * // 小米</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Cyning</div><div class="line"> * <span class="doctag">@since</span> 2017-04-05</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiuiStatusbar</span> <span class="keyword">implements</span> <span class="title">IStatusBar</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置状态栏字体图标为深色，需要MIUI6以上</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> isFontColorDark 是否把状态栏字体及图标颜色设置为深色</div><div class="line">     * <span class="doctag">@return</span> boolean 成功执行返回true</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setStatusBarLightMode</span><span class="params">(Activity activity, <span class="keyword">boolean</span> isFontColorDark)</span> </span>&#123;</div><div class="line">        Window window = activity.getWindow();</div><div class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (window != <span class="keyword">null</span>) &#123;</div><div class="line">                Class clazz = window.getClass();</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">int</span> darkModeFlag = <span class="number">0</span>;</div><div class="line">                    Class layoutParams = Class.forName(<span class="string">"android.view.MiuiWindowManager$LayoutParams"</span>);</div><div class="line">                    Field field = layoutParams.getField(<span class="string">"EXTRA_FLAG_STATUS_BAR_DARK_MODE"</span>);</div><div class="line">                    darkModeFlag = field.getInt(layoutParams);</div><div class="line">                    Method extraFlagField = clazz.getMethod(<span class="string">"setExtraFlags"</span>, <span class="keyword">int</span>.class, <span class="keyword">int</span>.class);</div><div class="line">                    <span class="keyword">if</span> (isFontColorDark) &#123;</div><div class="line">                        extraFlagField.invoke(window, darkModeFlag, darkModeFlag);<span class="comment">//状态栏透明且黑色字体</span></div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        extraFlagField.invoke(window, <span class="number">0</span>, darkModeFlag);<span class="comment">//清除黑色字体</span></div><div class="line">                    &#125;</div><div class="line">                    result = <span class="keyword">true</span>;</div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTypeName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> StatusBarAdapter.MIUI;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="魅族的Flyme"><a href="#魅族的Flyme" class="headerlink" title="魅族的Flyme"></a>魅族的Flyme</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * // Flyme</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Cyning</div><div class="line"> * <span class="doctag">@since</span> 2017-04-05</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MeizuStatusBar</span> <span class="keyword">implements</span> <span class="title">IStatusBar</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置状态栏图标为深色和魅族特定的文字风格</div><div class="line">     * 可以用来判断是否为Flyme用户</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> isFontColorDark 是否把状态栏字体及图标颜色设置为深色</div><div class="line">     * <span class="doctag">@return</span> boolean 成功执行返回true</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setStatusBarLightMode</span><span class="params">(Activity activity, <span class="keyword">boolean</span> isFontColorDark)</span> </span>&#123;</div><div class="line">        Window window = activity.getWindow();</div><div class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (window != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    WindowManager.LayoutParams lp = window.getAttributes();</div><div class="line">                    Field darkFlag = WindowManager.LayoutParams.class</div><div class="line">                            .getDeclaredField(<span class="string">"MEIZU_FLAG_DARK_STATUS_BAR_ICON"</span>);</div><div class="line">                    Field meizuFlags = WindowManager.LayoutParams.class</div><div class="line">                            .getDeclaredField(<span class="string">"meizuFlags"</span>);</div><div class="line">                    darkFlag.setAccessible(<span class="keyword">true</span>);</div><div class="line">                    meizuFlags.setAccessible(<span class="keyword">true</span>);</div><div class="line">                    <span class="keyword">int</span> bit = darkFlag.getInt(<span class="keyword">null</span>);</div><div class="line">                    <span class="keyword">int</span> value = meizuFlags.getInt(lp);</div><div class="line">                    <span class="keyword">if</span> (isFontColorDark) &#123;</div><div class="line">                        value |= bit;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        value &amp;= ~bit;</div><div class="line">                    &#125;</div><div class="line">                    meizuFlags.setInt(lp, value);</div><div class="line">                    window.setAttributes(lp);</div><div class="line">                    result = <span class="keyword">true</span>;</div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTypeName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> StatusBarAdapter.FLYME;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Android-M"><a href="#Android-M" class="headerlink" title="Android M"></a>Android M</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"><span class="keyword">import</span> android.os.Build;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * // Android M</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Cyning</div><div class="line"> * <span class="doctag">@since</span> 2017-04-05</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OSM</span> <span class="keyword">implements</span> <span class="title">IStatusBar</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@return</span> if version is lager than M</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setStatusBarLightMode</span><span class="params">(Activity activity, <span class="keyword">boolean</span> isFontColorDark)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</div><div class="line">            <span class="keyword">if</span> (isFontColorDark) &#123;</div><div class="line">                activity.getWindow().getDecorView().setSystemUiVisibility( View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN|View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);</div><div class="line"></div><div class="line"><span class="comment">//                int uiVisibility = activity.getWindow().getDecorView().getSystemUiVisibility();</span></div><div class="line"><span class="comment">//                activity.getWindow().getDecorView().setSystemUiVisibility(uiVisibility | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">int</span> uiVisibility = activity.getWindow().getDecorView().getSystemUiVisibility();</div><div class="line">                activity.getWindow().getDecorView().setSystemUiVisibility(uiVisibility| View.SYSTEM_UI_FLAG_VISIBLE);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTypeName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> StatusBarAdapter.OS_M;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>源代码放到github上了<a href="https://github.com/ownwell/StatusBarUtils" target="_blank" rel="external">github项目地址</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直忙着写业务，一直没精力更新博客，趁着最近有点空闲事件，觉得很有必要写一篇博客捡回以前的那个状态。就写一个自己当时总结的一个适配功能吧：关于状态栏的字体/图标颜色适配。&lt;/p&gt;
&lt;p&gt;随着Android6.0 Android7.0系统的系统升级，开发者来说适配的容易程度越来越低，我们需要将精力放到适配4.4+以上，而Android4.4相对来说是一个比较稳定的版本，尤其是在UI上它又和Android 6.0、Android7.0接近。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ownwell.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://ownwell.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Classloader源码探究</title>
    <link href="http://ownwell.github.io/2016/12/04/classloader/"/>
    <id>http://ownwell.github.io/2016/12/04/classloader/</id>
    <published>2016-12-03T16:00:00.000Z</published>
    <updated>2017-05-24T07:19:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>Java中的所有的java都需要先编译成class文件，再通过类加载器来加载class，在前几篇的热修复的文章都提到了ClassLoader，趁着周末就写了这篇关于Java ClassLoader的文章，希望能对热修复的相关的知识进行补充。为了更好查看源码，本文是基于Java 7的源码来分析的，如有不正取请扔砖告知。</p>
<a id="more"></a>
<h1 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h1><h2 id="什么是ClassLoader"><a href="#什么是ClassLoader" class="headerlink" title="什么是ClassLoader"></a>什么是ClassLoader</h2><p>在java的源码中，官方是这么给出定义的:</p>
<blockquote>
<p>A class loader is an object that is responsible for loading classes. Theclass ClassLoader is an abstract class.Given the binary name of a class,a class loader should attempt to locate or generate data that constitutes a definition for the class. A  typical strategy is to transform the name intoa file name and then read a  “class file” of that name from a file system.</p>
</blockquote>
<p>意思就是：</p>
<blockquote>
<p>class loader 是一个负责加载class的对象，ClassLoader 类是一个抽象类。</p>
<p>若是给出一个类的二进制文件，class loader就会尝试定位到相关的位置或者生成这个类的数据。</p>
<p>一个典型的策略是把二进制名字转换成文件名，然后从文件系统中读取这个文件名的class file。</p>
</blockquote>
<h2 id="ClassLoader分类"><a href="#ClassLoader分类" class="headerlink" title="ClassLoader分类"></a>ClassLoader分类</h2><p>Java应用环境中不同的class分别由不同的ClassLoader负责加载。从一个JVM启动到加载咱们的主程序入口，以下ClassLoader是必须要加载的。</p>
<ol>
<li><p>Bootstrap ClassLoader 负责加载java基础类，主要是 %JRE_HOME/lib/ 目录下的rt.jar、resources.jar、charsets.jar和class等</p>
</li>
<li><p>Extension ClassLoader 负责加载java扩展类，主要是 %JRE_HOME/lib/ext 目录下的jar和class</p>
</li>
<li><p>App ClassLoader 负责加载当前java应用的classpath中的所有类。</p>
</li>
<li><p>Custom ClassLoader 当然由于类加载器也是可以自己定义，因为ClassLoader是一个抽象类。</p>
</li>
</ol>
<p>当我们去load一个class时，会经历这么曲折的路程：</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1480842334056.png" width="789" id="#ddd"></p>
<p>为什么加载一个class需要这么麻烦，直接加载不就行了么？<br>这就是我们下面将要提到的<strong>ClassLoader的双亲委托模型</strong>。</p>
<h2 id="ClassLoader的双亲委托模型"><a href="#ClassLoader的双亲委托模型" class="headerlink" title="ClassLoader的双亲委托模型"></a>ClassLoader的双亲委托模型</h2><p>在介绍之前我们还是先来看下ClassLoader中一个很重要的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve) &#123;</div><div class="line">        ……</div><div class="line"></div><div class="line">         <span class="keyword">try</span> &#123;</div><div class="line">               <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</div><div class="line">                        c = parent.loadClass(name, <span class="keyword">false</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        c = findBootstrapClassOrNull(name);</div><div class="line">                &#125;</div><div class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">                    <span class="comment">// ClassNotFoundException thrown if class not found</span></div><div class="line">                    <span class="comment">// from the non-null parent class loader</span></div><div class="line">                &#125;</div><div class="line"></div><div class="line">          ……</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>好了，上代码尝试打印下看看parent是何方神圣吧:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ClassLoader mClassLoader = Main.class.getClassLoader();</div><div class="line">        <span class="keyword">while</span> (mClassLoader != <span class="keyword">null</span>) &#123;</div><div class="line">            System.out.println(mClassLoader);</div><div class="line">            mClassLoader = mClassLoader.getParent();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>输出结果:</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1480844019934.png" width="362"></p>
<p>Launcher$AppClassLoader 就是加载项目文件的ClassLoader，ExtClassLoader是AppClassLoader的parent。</p>
<p>在加载一个class时，他会先去他的parent的ClassLoader有没有，实在没有才调用<code>&#39;findBootstrapClassOrNull</code>.<br>这就是我们要说的<strong>ClassLoader的双亲委托模型</strong><br>在<a href="#ddd">上图</a>介绍中, 先委托父类装载器寻找目标类，只有在找不到的情况下才从自己的类路径中查找并装载目标类。<br>可是为什么需要这种双亲委托模型呢，我们不是说好的import呢？</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1480847246096.png" width="400"></p>
<h1 id="关于自定义ClassLoader"><a href="#关于自定义ClassLoader" class="headerlink" title="关于自定义ClassLoader"></a>关于自定义ClassLoader</h1><p>说了这么多ClassLoader,就是为了更好的使用，由于一些特殊的需求，我们可能需要定制ClassLoader，这时候就需要自定义ClassLoader了.</p>
<p>还记得不，ClassLoader是一个抽象类，当继承ClassLoader时，我们可以重写一些方法。主要可以扩展的方法有：</p>
<ul>
<li>findClass          定义查找Class的方式<br></li>
<li>defineClass        将类文件字节码加载为jvm中的class<br></li>
<li>findResource       定义查找资源的方式<br></li>
</ul>
<p>好了，翠花上代码，自己用了20分钟写了一个自定义的ClassLoader，里面有注释就不再一一解释了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.net.URL;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@Author</span>: cyning</div><div class="line"> * <span class="doctag">@Desc</span> : 加载本地的文件</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String rootUrl;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomClassLoader</span><span class="params">(String rootUrl)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.rootUrl = rootUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</div><div class="line">        Class clazz = <span class="keyword">null</span>;<span class="comment">//this.findLoadedClass(name); // 父类已加载</span></div><div class="line">        <span class="keyword">byte</span>[] classData = getClassData(name);  <span class="comment">//根据类的二进制名称,获得该class文件的字节码数组</span></div><div class="line">        <span class="keyword">if</span> (classData == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException();</div><div class="line">        &#125;</div><div class="line">        clazz = defineClass(name, classData, <span class="number">0</span>, classData.length);  <span class="comment">//将class的字节码数组转换成Class类的实例</span></div><div class="line">        <span class="comment">//&#125;</span></div><div class="line">        <span class="keyword">return</span> clazz;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span>  <span class="keyword">byte</span>[]  getClassData(String name) &#123;</div><div class="line">        InputStream is = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String path = classNameToPath(name);</div><div class="line">            URL url = <span class="keyword">new</span> URL(path);</div><div class="line">            <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">4</span>];</div><div class="line">            <span class="keyword">int</span> len = -<span class="number">1</span>;</div><div class="line">            is = url.openStream();</div><div class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">            <span class="keyword">while</span>((len = is.read(buff)) != -<span class="number">1</span>) &#123;</div><div class="line">                baos.write(buff,<span class="number">0</span>,len);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> baos.toByteArray();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (is != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    is.close();</div><div class="line">                &#125; <span class="keyword">catch</span>(IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span>   String <span class="title">classNameToPath</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> rootUrl + <span class="string">"/"</span> + name.replace(<span class="string">"."</span>, <span class="string">"/"</span>) + <span class="string">".class"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>怎么使用呢：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 文件路径</span></div><div class="line">            String rootUrl = <span class="string">"/Users/cyning/Downloads"</span>;</div><div class="line">            CustomClassLoader mCustomClassLoader = <span class="keyword">new</span> CustomClassLoader(rootUrl);</div><div class="line">            String classname = <span class="string">"com.ownwell.Test"</span>;</div><div class="line">            Class clazz = mCustomClassLoader.loadClass(classname);</div><div class="line">            Object object = clazz.newInstance();</div><div class="line">            Method mMethod  = clazz.getMethod(<span class="string">"add"</span>, <span class="keyword">int</span>.class, <span class="keyword">int</span>.class);<span class="comment">//然后我们就可以用反射做些事情了</span></div><div class="line">            mMethod.invoke(object,<span class="number">1</span>,<span class="number">1</span>);</div><div class="line"></div><div class="line">            <span class="comment">//反射调用Test中的add方法</span></div><div class="line">            System.out.println(clazz.getClassLoader());</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>ClassLoader是一个抽象类，对外允许继承。</li>
<li>ClassLoader有自己的双亲委托模型，从下到上层层检查。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java中的所有的java都需要先编译成class文件，再通过类加载器来加载class，在前几篇的热修复的文章都提到了ClassLoader，趁着周末就写了这篇关于Java ClassLoader的文章，希望能对热修复的相关的知识进行补充。为了更好查看源码，本文是基于Java 7的源码来分析的，如有不正取请扔砖告知。&lt;/p&gt;
    
    </summary>
    
      <category term="Java源码" scheme="http://ownwell.github.io/categories/Java%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="Java" scheme="http://ownwell.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>热修复之美团方案</title>
    <link href="http://ownwell.github.io/2016/09/30/%E7%83%AD%E4%BF%AE%E5%A4%8D%E4%B9%8B%E7%BE%8E%E5%9B%A2%E6%96%B9%E6%A1%88/"/>
    <id>http://ownwell.github.io/2016/09/30/热修复之美团方案/</id>
    <published>2016-09-30T11:49:24.000Z</published>
    <updated>2017-04-19T05:57:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在研究热修复的一些框架，发现目前市面上有很多的热修复的一些思想和框架，有腾讯、阿里、美团等大型APP一些实践过的，有为我们大家扩展思路的Demo，但是这些热修复技术的活跃而蓬勃发展，让我们有更多的选择。<br><a id="more"></a><br>但是按照实现方式上，Android热补丁技术应该分为以下两个流派：</p>
<ul>
<li><p>Native，代表有阿里的Dexposed、<a href="https://github.com/alibaba/AndFix" target="_blank" rel="external">AndFix</a>与腾讯的内部方案KKFix；     </p>
</li>
<li><p>Java, 代表有Qzone的超级补丁Dex插桩的方式、<a href="https://github.com/jasonross/Nuwa" target="_blank" rel="external">大众点评的nuwa</a>、<a href="https://github.com/dodola/RocooFix" target="_blank" rel="external">百度金融的rocooFix</a>, 饿了么的<a href="https://github.com/eleme/Amigo/" target="_blank" rel="external">amigo</a>以及美团的robust。</p>
</li>
</ul>
<p>这里我们不做拓展，Qzone的超级补丁Dex插桩的方式之前讲过啦，就不在啰嗦，今天我们要分析的是美团的<code>robust</code>.美团的<code>robust</code>暂时还没开源，不过美团公布了他们的实践思路 —-<a href="http://tech.meituan.com/android_robust.html" target="_blank" rel="external">Android热更新方案Robust</a>。</p>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><code>Robust插件</code>对每个产品代码的每个函数都在编译打包阶段自动的插入了一段代码,这段代码实际上相当于多了个分支，当满足这些分支时执行这段新加入的代码。</p>
<p>在开始之前还是给大家讲一个谍战片：<br>剧情是这样滴，那是一个战争年代，某红色特务机构在敌方的各个连队都有一个间谍的坑，当有大活动发生时”上头”都会下发一个替换命令到敌方各个连队里。当间谍收到信息后，看到满足”上头”给出的信息（连队名称、对应的代码）和自己的一模一样时时，就意味着自己需要完成上级给的任务，同时接应同志来伪装完成”上头”下发的任务。对于那些不满足上头给予的信息的间谍，仍原地待命.</p>
<p><code>Robust插件</code>热修复其实和这个谍战的剧情一样一样滴，上头下发的信息，会告诉我们下发的连队名称和接应我们去实施的人，这些位置信息其实就是出问题的那个类，需要打补丁，我们称之为<strong>补丁类</strong>，有人来替卧底实施，我们称之为<strong>锲子类</strong>。</p>
<p>好了回归代码，来看下美团技术团队的大概思路。</p>
<p>旧代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">100L</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p><span id="qw">被处理成如下的实现</span><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> ChangeQuickRedirect     changeQuickRedirect;    </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getIndex</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="keyword">if</span>(changeQuickRedirect != <span class="keyword">null</span>) &#123;    </div><div class="line">            <span class="comment">//PatchProxy中封装了获取当前className和methodName的逻辑，并在其内部最终调用了changeQuickRedirect的对应函数</span></div><div class="line">            <span class="keyword">if</span>(PatchProxy.isSupport(<span class="keyword">new</span> Object[<span class="number">0</span>], <span class="keyword">this</span>, changeQuickRedirect, <span class="keyword">false</span>)) &#123;     </div><div class="line">                <span class="keyword">return</span> ((Long)PatchProxy.accessDispatch(<span class="keyword">new</span> Object[<span class="number">0</span>], <span class="keyword">this</span>, changeQuickRedirect, <span class="keyword">false</span>)).longValue();    </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">100L</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p><code>ChangeQuickRedirect</code>是一个接口，每个类中都有这个静态变量，这就相当于那个卧底，不过他是个接口.</p>
<p>下发补丁类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PatchesInfoImpl</span> <span class="keyword">implements</span> <span class="title">PatchesInfo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;PatchedClassInfo&gt; <span class="title">getPatchedClassesInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;PatchedClassInfo&gt; patchedClassesInfos = <span class="keyword">new</span> ArrayList&lt;PatchedClassInfo&gt;();</div><div class="line">        PatchedClassInfo patchedClass = <span class="keyword">new</span> PatchedClassInfo(<span class="string">"com.meituan.sample.d"</span>, StatePatch.class.getCanonicalName());</div><div class="line">        patchedClassesInfos.add(patchedClass);</div><div class="line">        <span class="keyword">return</span> patchedClassesInfos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>上述代码就是解释 com.meituan.sample.d（混淆后的）需要需要修复，并且插入的锲子类StatePatch.class.getCanonicalName()</p>
</blockquote>
<p>当app加载时通过<code>PatchesInfoImpl</code>这个类中的getPatchedClassesInfo的信息，来获取那些需要打补丁（而不是每个类都打补丁，这就相当于下发补丁类），以及将补丁锲子替换之前类的锲子（实际上就是用我们下发的ChangeQuickRedirect来替换补丁类的ChangeQuickRedirect的静态变量。）</p>
<p>State类的锲子类 StatePatch.java  这就是我们说的需要赋值给patch类的锲子。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StatePatch</span> <span class="keyword">implements</span> <span class="title">ChangeQuickRedirect</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">accessDispatch</span><span class="params">(String methodSignature, Object[] paramArrayOfObject)</span> </span>&#123;</div><div class="line">        String[] signature = methodSignature.split(<span class="string">":"</span>);</div><div class="line">        <span class="keyword">if</span> (TextUtils.equals(signature[<span class="number">1</span>], <span class="string">"a"</span>)) &#123;<span class="comment">//long getIndex() -&gt; a</span></div><div class="line">            <span class="keyword">return</span> <span class="number">106</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSupport</span><span class="params">(String methodSignature, Object[] paramArrayOfObject)</span> </span>&#123;</div><div class="line">        String[] signature = methodSignature.split(<span class="string">":"</span>);</div><div class="line">        <span class="keyword">if</span> (TextUtils.equals(signature[<span class="number">1</span>], <span class="string">"a"</span>)) &#123;<span class="comment">//long getIndex() -&gt; a</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个大概就是判断当前方法是不是a（long getIndex() 混淆后的），要是就执行<code>accessDispatch()</code>,这个是吧返回值给改成了106。<br>大概流程图:<br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/meituan_patch.png" alt=""></p>
<h1 id="初步实现"><a href="#初步实现" class="headerlink" title="初步实现"></a>初步实现</h1><p>由于只是原理性调研，加上现在美团提出这个热修后一直未放出源码，我按捺不住自己模仿实现了一个demo，可以分享给大家。</p>
<h1 id="关键代码实现"><a href="#关键代码实现" class="headerlink" title="关键代码实现"></a>关键代码实现</h1><ul>
<li><a href="#PatchedClassInfo">PatchedClassInfo</a> 存放下发patch类和锲子类</li>
<li><a href="#PatchProxy">PatchProxy 工具类</a><br>通过上下文获取方法的名称和参数，以及执行ChangeQuickRedirect中的方法，<a href="#qw">参看之前的实现getIndex()</a>的第5行、第6行。</li>
<li><a href="">loadDex()</a></li>
</ul>
<p><span id="PatchedClassInfo">PatchedClassInfo.java</span><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PatchedClassInfo</span> </span>&#123;</div><div class="line"></div><div class="line">    String clazz;<span class="comment">//patch类</span></div><div class="line">    String pathRedicIMpl;<span class="comment">//锲子类</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PatchedClassInfo</span><span class="params">(String clazz, String pathRedicIMpl)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.clazz = clazz;</div><div class="line">        <span class="keyword">this</span>.pathRedicIMpl = pathRedicIMpl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getClazz</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> clazz;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPathRedicIMpl</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> pathRedicIMpl;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><span id="PatchProxy">PatchProxy.java</span><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PatchProxy</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> param</div><div class="line">     * <span class="doctag">@param</span> object class的实例对象</div><div class="line">     * <span class="doctag">@param</span> changeQuickRedirect</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSupport</span><span class="params">( Object object, ChangeQuickRedirect changeQuickRedirect, Object... param)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (changeQuickRedirect != <span class="keyword">null</span>)&#123;</div><div class="line">            String  methodSignature  = <span class="keyword">new</span> Throwable().getStackTrace()[<span class="number">1</span>].getMethodName();</div><div class="line">            Object[] paramArrayOfObject = param;</div><div class="line">            <span class="keyword">return</span> changeQuickRedirect.isSupport(methodSignature,paramArrayOfObject);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> Object <span class="title">accessDispatch</span><span class="params">(Object object, ChangeQuickRedirect changeQuickRedirect, Object... param)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (changeQuickRedirect != <span class="keyword">null</span>)&#123;</div><div class="line">            String  methodSignature = <span class="keyword">new</span> Throwable().getStackTrace()[<span class="number">1</span>].getMethodName();</div><div class="line">            Object[] paramArrayOfObject = param;</div><div class="line">            <span class="keyword">return</span> changeQuickRedirect.accessDispatch(methodSignature,paramArrayOfObject);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><span id="loaddex">loadDex()</span><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadDex</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//加载patch.jar</span></div><div class="line">        File dexPath = <span class="keyword">new</span> File(getDir(<span class="string">"dex"</span>, Context.MODE_PRIVATE), <span class="string">"patch.jar"</span>);</div><div class="line"><span class="comment">//        新建一个classloader</span></div><div class="line">        DexClassLoader cl = <span class="keyword">new</span> DexClassLoader(dexPath.getAbsolutePath(),</div><div class="line">                dexPath.getAbsolutePath(), <span class="keyword">null</span>, getClassLoader());</div><div class="line">        Class libProviderClazz = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 从patch.java 加载下发类</span></div><div class="line">            libProviderClazz = cl.loadClass(<span class="string">"com.baidu.meituanhotfix.dex.PatchesInfoImpl"</span>);</div><div class="line"></div><div class="line">            PatchesInfo patchesInfo = (PatchesInfo) libProviderClazz.newInstance();</div><div class="line"></div><div class="line">            <span class="comment">// 获取下发信息 ，这是一个list 每一条存放patch类和每个patch的楔子类</span></div><div class="line">            patchs = patchesInfo.getPatchedClassesInfo();</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (PatchedClassInfo cls : patchs) &#123;</div><div class="line"></div><div class="line"><span class="comment">//                patch类</span></div><div class="line">                Class hostClazz = getClassLoader().loadClass(cls.getClazz());</div><div class="line"><span class="comment">//                patch类对应的楔子类</span></div><div class="line">                Class implClazz = cl.loadClass(cls.getPathRedicIMpl());</div><div class="line"><span class="comment">//                实例化楔子类</span></div><div class="line">                ChangeQuickRedirect impl = (ChangeQuickRedirect) implClazz.newInstance();</div><div class="line"></div><div class="line"><span class="comment">//                将刚才实例化之后的赋值给patch</span></div><div class="line">                Field[] fields = hostClazz.getFields();</div><div class="line">                <span class="keyword">if</span> (fields != <span class="keyword">null</span> &amp;&amp; fields.length &gt; <span class="number">0</span>) &#123;</div><div class="line">                    Field field = hostClazz.getField(<span class="string">"changeQuickRedirect"</span>);</div><div class="line">                    field.set(hostClazz, impl);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>项目已经开源到github <a href="https://github.com/ownwell/MeituanHotFix" target="_blank" rel="external">MeituanHotFix</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在研究热修复的一些框架，发现目前市面上有很多的热修复的一些思想和框架，有腾讯、阿里、美团等大型APP一些实践过的，有为我们大家扩展思路的Demo，但是这些热修复技术的活跃而蓬勃发展，让我们有更多的选择。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ownwell.github.io/categories/Android/"/>
    
    
      <category term="Android热修复" scheme="http://ownwell.github.io/tags/Android%E7%83%AD%E4%BF%AE%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>Android热修复--实现原理</title>
    <link href="http://ownwell.github.io/2016/08/30/android-hot-fix-introduce/"/>
    <id>http://ownwell.github.io/2016/08/30/android-hot-fix-introduce/</id>
    <published>2016-08-30T09:18:11.000Z</published>
    <updated>2017-05-24T07:19:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于热修复其实很早都想动手写，不过由于没研究过具体的实践，不敢乱谈。<br>那么何为热修复呢？所谓热修复，无非是线上出了bug，开发人员可以发补丁，应用程序默默下载好对应问题的补丁，修复这个bug。这种热修复其实很适合client-server的模式，当然了客户端肯定也是适用的。</p>
<a id="more"></a>
<p>热修复/热部署 最早使用在web后端的，至于客户端热修复，最早听到热修复是2014年，当时在阿里技术嘉年华分享会上，阿里分享的插件化部署专题中讲到其中的热修复。反而在去年（2015年），出了很多热修复和插件化的框架，可以说是插件化/热部署元年。</p>
<p>虽然我们落后了半年，所以赶快补上热修复这一章。</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1472549584377.png" width="350"></p>
<h1 id="为什么需要热修复"><a href="#为什么需要热修复" class="headerlink" title="为什么需要热修复"></a>为什么需要热修复</h1><p>上周去百度，和<a href="http://blog.csdn.net/lmj623565791/" target="_blank" rel="external">鸿洋</a>有过交流，当时，鸿洋大神说：热修复只能在国内玩，国外都是Google play。<br>的确，目前热修复尽管有很多坑，做了好多工作，可能吃力不讨好，各种适配可能还是没修复线上的有些Bug。不过呢，对于一个产品有热修复毕竟是件好事。尤其是对于一个有众多用户的app（如支付宝、微信、手淘等），一个bug不只是影响到几个几十个用户，一些创业公司的APP，崩溃或者bug可能直接导致用户卸载和永不使用，所以，就冲它有不用发版也可以解决我们线上的bug，我们的app也要适当考虑加入热修复。</p>
<blockquote>
<p>在IOS上，有JsPatch、有waxPatch，有些游戏公司自己搞了一个lua引擎放到应用里，搞一些类似动态部署的东西。<br>也可以采用其他方案，如RN，阿里的Weex等方案。</p>
</blockquote>
<h1 id="热修复"><a href="#热修复" class="headerlink" title="热修复"></a>热修复</h1><p>热修复，这个词是在去年QQ空间开发团队，发表的一篇文章<a href="https://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=400118620&amp;idx=1&amp;sn=b4fdd5055731290eef12ad0d17f39d4a&amp;scene=1&amp;srcid=1106Imu9ZgwybID13e7y2nEi#wechat_redirect" target="_blank" rel="external">安卓App热补丁动态修复技术介绍</a>出现后，在”江湖”上引起了”动荡。Android程序员奔走相告–“我们终于找到梦寐以求的实现热修复的理论支持”。</p>
<blockquote>
<p>可能还有其他方案如阿里的And-Fix,ClassLoader的替代方案。<a href="#参考文章">参考文章</a>下有and-fix和ClassLoader的文章，记得点开阅读 。其中 <a href="http://blog.zhaiyifan.cn/" target="_blank" rel="external">markzhai</a>也提到了现在classLoader替换方案已经成这一年多来新的变化。</p>
</blockquote>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=400118620&amp;idx=1&amp;sn=b4fdd5055731290eef12ad0d17f39d4a&amp;scene=1&amp;srcid=1106Imu9ZgwybID13e7y2nEi#wechat_redirect" target="_blank" rel="external">安卓App热补丁动态修复技术介绍</a>建议大家多看几遍，一遍远远不够的。</p>
<p>这个链接你一定要<a href="https://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=400118620&amp;idx=1&amp;sn=b4fdd5055731290eef12ad0d17f39d4a&amp;scene=1&amp;srcid=1106Imu9ZgwybID13e7y2nEi#wechat_redirect" target="_blank" rel="external">点开</a>。<br>这个链接你一定要<a href="https://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=400118620&amp;idx=1&amp;sn=b4fdd5055731290eef12ad0d17f39d4a&amp;scene=1&amp;srcid=1106Imu9ZgwybID13e7y2nEi#wechat_redirect" target="_blank" rel="external">点开</a>。<br>这个链接你一定要<a href="https://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=400118620&amp;idx=1&amp;sn=b4fdd5055731290eef12ad0d17f39d4a&amp;scene=1&amp;srcid=1106Imu9ZgwybID13e7y2nEi#wechat_redirect" target="_blank" rel="external">点开</a>。<br>重要的事情说三遍！！！！！！</p>
<p>记得看下， 他是热修复的始祖级的文章，也是本文重点抄袭对象。</p>
<p>我们知道Android系统也是仿照java搞了一个虚拟机，不过它不叫JVM，它叫Dalvik/ART VM<a href="http://geyubin.iteye.com/blog/1513918" target="_blank" rel="external">他们还是有很大区别</a>的（这是不是我们的重点, 点开是个拓展阅读)。我们只需要知道，Dalvik/ART VM 虚拟机加载类和资源也是要用到<code>ClassLoader</code>，不过Jvm通过<code>ClassLoader</code>加载的class字节码，而Dalvik/ART VM通过<code>ClassLoader</code>加载则是dex。</p>
<h2 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h2><p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1472552007400.png" width="300"></p>
<p>在Android中，我们常用的ClassLoader关系如上图，其中<a href="https://android.googlesource.com/platform/libcore/+/android-5.0.0_r6/dalvik/src/main/java/dalvik/system/BaseDexClassLoader.java" target="_blank" rel="external">BaseDexClassLoader</a>。</p>
<p>其中DexClass可以加载apk,jar,及dex文件，但PathClassLoader只能加载已安装到系统中（即/data/app目录下）的apk文件。</p>
<h2 id="Dex加载方式"><a href="#Dex加载方式" class="headerlink" title="Dex加载方式"></a>Dex加载方式</h2><p>就让我们来稍微寻找下热修复的突破口。</p>
<p>先来瞅瞅<code>BaseDexClassLoader</code>的源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">**</div><div class="line"> * Base <span class="class"><span class="keyword">class</span> <span class="title">for</span> <span class="title">common</span> <span class="title">functionality</span> <span class="title">between</span> <span class="title">various</span> <span class="title">dex</span>-<span class="title">based</span></span></div><div class="line"> * &#123;<span class="meta">@link</span> ClassLoader&#125; implementations.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDexClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DexPathList pathList;</div><div class="line"></div><div class="line">   ……</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</div><div class="line">        List&lt;Throwable&gt; suppressedExceptions = <span class="keyword">new</span> ArrayList&lt;Throwable&gt;();</div><div class="line">        Class c = pathList.findClass(name, suppressedExceptions);</div><div class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</div><div class="line">            ClassNotFoundException cnfe = <span class="keyword">new</span> ClassNotFoundException(<span class="string">"Didn't find class \""</span> + name + <span class="string">"\" on path: "</span> + pathList);</div><div class="line">            <span class="keyword">for</span> (Throwable t : suppressedExceptions) &#123;</div><div class="line">                cnfe.addSuppressed(t);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">throw</span> cnfe;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> c;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<hr>
<p><a href="https://android.googlesource.com/platform/libcore/+/android-5.0.0_r6/dalvik/src/main/java/dalvik/system/DexPathList.java" target="_blank" rel="external">5.0的DexPathList</a>部分代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DexPathList</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEX_SUFFIX = <span class="string">".dex"</span>;  </div><div class="line"></div><div class="line">     <span class="keyword">private</span> <span class="keyword">final</span> Element[] dexElements;</div><div class="line"></div><div class="line">    <span class="comment">/** List of native library directories. */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> File[] nativeLibraryDirectories;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Constructs an instance.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> definingContext the context in which any as-yet unresolved</div><div class="line">     * classes should be defined</div><div class="line">     * <span class="doctag">@param</span> dexPath list of dex/resource path elements, separated by</div><div class="line">     * &#123;<span class="doctag">@code</span> File.pathSeparator&#125;</div><div class="line">     * <span class="doctag">@param</span> libraryPath list of native library directory path elements,</div><div class="line">     * separated by &#123;<span class="doctag">@code</span> File.pathSeparator&#125;</div><div class="line">     * <span class="doctag">@param</span> optimizedDirectory directory where optimized &#123;<span class="doctag">@code</span> .dex&#125; files</div><div class="line">     * should be found and written to, or &#123;<span class="doctag">@code</span> null&#125; to use the default</div><div class="line">     * system directory for same</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DexPathList</span><span class="params">(ClassLoader definingContext, String dexPath,</span></span></div><div class="line">            String libraryPath, File optimizedDirectory) &#123;</div><div class="line">        <span class="keyword">if</span> (definingContext == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"definingContext == null"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (dexPath == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"dexPath == null"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (optimizedDirectory != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (!optimizedDirectory.exists())  &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">                        <span class="string">"optimizedDirectory doesn't exist: "</span></div><div class="line">                        + optimizedDirectory);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!(optimizedDirectory.canRead()</div><div class="line">                            &amp;&amp; optimizedDirectory.canWrite())) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">                        <span class="string">"optimizedDirectory not readable/writable: "</span></div><div class="line">                        + optimizedDirectory);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.definingContext = definingContext;</div><div class="line">        ArrayList&lt;IOException&gt; suppressedExceptions = <span class="keyword">new</span> ArrayList&lt;IOException&gt;();</div><div class="line">        <span class="keyword">this</span>.dexElements = makeDexElements(splitDexPath(dexPath), optimizedDirectory,</div><div class="line">                                           suppressedExceptions);</div><div class="line">        <span class="keyword">if</span> (suppressedExceptions.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.dexElementsSuppressedExceptions =</div><div class="line">                suppressedExceptions.toArray(<span class="keyword">new</span> IOException[suppressedExceptions.size()]);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            dexElementsSuppressedExceptions = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.nativeLibraryDirectories = splitLibraryPath(libraryPath);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">public</span> Class <span class="title">findClass</span><span class="params">(String name, List&lt;Throwable&gt; suppressed)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (Element element : dexElements) &#123;</div><div class="line">            DexFile dex = element.dexFile;</div><div class="line">            <span class="keyword">if</span> (dex != <span class="keyword">null</span>) &#123;</div><div class="line">                Class clazz = dex.loadClassBinaryName(name, definingContext, suppressed);</div><div class="line">                <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> clazz;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (dexElementsSuppressedExceptions != <span class="keyword">null</span>) &#123;</div><div class="line">            suppressed.addAll(Arrays.asList(dexElementsSuppressedExceptions));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<hr>
<p>DexFile部分源码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DexFile</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> mCookie;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String mFileName;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CloseGuard guard = CloseGuard.get();</div><div class="line"></div><div class="line">    ……</div><div class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">loadClass</span><span class="params">(String name, ClassLoader loader)</span> </span>&#123;</div><div class="line">        String slashName = name.replace(<span class="string">'.'</span>, <span class="string">'/'</span>);</div><div class="line">        <span class="keyword">return</span> loadClassBinaryName(slashName, loader, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">loadClassBinaryName</span><span class="params">(String name, ClassLoader loader, List&lt;Throwable&gt; suppressed)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> defineClass(name, loader, mCookie, suppressed);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Class <span class="title">defineClass</span><span class="params">(String name, ClassLoader loader, <span class="keyword">long</span> cookie,</span></span></div><div class="line">                                     List&lt;Throwable&gt; suppressed) &#123;</div><div class="line">        Class result = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            result = defineClassNative(name, loader, cookie);</div><div class="line">        &#125; <span class="keyword">catch</span> (NoClassDefFoundError e) &#123;</div><div class="line">            <span class="keyword">if</span> (suppressed != <span class="keyword">null</span>) &#123;</div><div class="line">                suppressed.add(e);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">            <span class="keyword">if</span> (suppressed != <span class="keyword">null</span>) &#123;</div><div class="line">                suppressed.add(e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ……</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> Class <span class="title">defineClassNative</span><span class="params">(String name, ClassLoader loader, <span class="keyword">long</span> cookie)</span></span></div><div class="line">            <span class="keyword">throws</span> ClassNotFoundException, NoClassDefFoundError;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中5.0的DexPathList源码中的<code>dexElements</code>（Line 4）就是我们Element（保存有dex信息）的数组。当需要寻找一个class时，<code>BaseDexClassLoader</code>会先调用<code>BaseDexClassLoader</code>中的pathList的findClass方法，而pathList实际上是一个<code>DexPathList</code>对象，查看<code>DexPathList</code>的源码发现，findClass方式其实是去遍历dexElements中的element元素，通过DexFile的对象去loadClass。</p>
<p>热修复就是利用<code>dexElements</code>的顺序来做文章，当一个补丁的patch.dex放到了<code>dexElements</code>的第一位，那么当加载一个bug类时，发现在patch.dex中，则直接加载这个类，原来的bug类可能就被覆盖了。</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1472568213083.png" width="500"></p>
<p>发版后发现class1.dex中的Bug.class有一个bug,修复后有一个修复好的patch.dex.</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1472568240996.png" width="500"></p>
<h2 id="CLASS-ISPREVERIFIED问题"><a href="#CLASS-ISPREVERIFIED问题" class="headerlink" title="CLASS_ISPREVERIFIED问题"></a>CLASS_ISPREVERIFIED问题</h2><p>根据QQ空间谈到的在虚拟机启动的时候，在verify选项被打开的时候，如果static方法、private方法、构造函数等，其中的直接引用（第一层关系）到的类都在同一个dex文件中，那么该类就会被打上CLASS_ISPREVERIFIED标志，且一旦类被打上CLASS_ISPREVERIFIED标志其他dex就不能再去替换这个类。所以一定要想办法去阻止类被打上CLASS_ISPREVERIFIED标志。</p>
<p>为了阻止类被打上CLASS_ISPREVERIFIED标志，QQ空间开发团队提出了一个方法是先将一个预备好的hack.dex加入到<code>dexElements</code>的第一项，让后面的dex的所有类都引用hack.dex其中的一个类，这样原来的class1.dex、class2.dex、class3.dex中的所有类都引用了hack.dex的类，所以其中的都不会打上CLASS_ISPREVERIFIED标志。</p>
<p>我们可以参考<a href="https://github.com/dodola/HotFix" target="_blank" rel="external">dodola/HotFix</a>项目来说明。</p>
<p>app中有一个LoadBugClass类，他引用了BugClass类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadBugClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBugString</span><span class="params">()</span> </span>&#123;</div><div class="line">        BugClass bugClass = <span class="keyword">new</span> BugClass();</div><div class="line">        <span class="keyword">return</span> bugClass.bug();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中BugClass出现了bug。按照刚才的理论LoadBugClass会被打成CLASS_ISPREVERIFIED标志。为了阻止它打上CLASS_ISPREVERIFIED标志，需要在他的构造函数里添加hack.dex一个类引用，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">LoadBugClass()&#123;</div><div class="line">      …………</div><div class="line"></div><div class="line">      System.out.println(dodola.hackdex.AntilazyLoad.class)</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>其中<code>AntilazyLoad</code>就是hack.dex的类。这样处理不会增加方法数，对代码的侵入较少。</p>
<p>好了这节介绍了Android热修复的实现原理，下一篇会结合<a href="https://github.com/jasonross/Nuwa" target="_blank" rel="external">jasonross/Nuwa</a>和<a href="https://github.com/dodola/HotFix" target="_blank" rel="external">dodola/HotFix</a>来谈一下他们的实践。</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><hr>
<ol>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=400118620&amp;idx=1&amp;sn=b4fdd5055731290eef12ad0d17f39d4a&amp;scene=1&amp;srcid=1106Imu9ZgwybID13e7y2nEi#wechat_redirect" target="_blank" rel="external">QQ空间 – 安卓App热补丁动态修复技术介绍</a></li>
<li><a href="http://my.oschina.net/853294317/blog/308583" target="_blank" rel="external">Android dex分包方案</a></li>
<li><a href="http://www.kymjs.com/code/2016/05/08/01" target="_blank" rel="external">张涛 – Android 热修复，没你想的那么难</a></li>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/49883661" target="_blank" rel="external">鸿洋 –Android 热补丁动态修复框架小结</a></li>
<li><a href="http://blog.hwangjr.com/2016/03/02/Android-HotFix%E6%96%B9%E6%A1%88/" target="_blank" rel="external">Android HotFix方案</a></li>
<li>classLoader 替换方案 <a href="http://weishu.me/2016/04/05/understand-plugin-framework-classloader/" target="_blank" rel="external">Android 插件化原理解析——插件加载机制</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于热修复其实很早都想动手写，不过由于没研究过具体的实践，不敢乱谈。&lt;br&gt;那么何为热修复呢？所谓热修复，无非是线上出了bug，开发人员可以发补丁，应用程序默默下载好对应问题的补丁，修复这个bug。这种热修复其实很适合client-server的模式，当然了客户端肯定也是适用的。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ownwell.github.io/categories/Android/"/>
    
    
      <category term="hot-fix" scheme="http://ownwell.github.io/tags/hot-fix/"/>
    
  </entry>
  
  <entry>
    <title>Android下多彩的StatusView的实现</title>
    <link href="http://ownwell.github.io/2016/08/26/android-status-bar/"/>
    <id>http://ownwell.github.io/2016/08/26/android-status-bar/</id>
    <published>2016-08-26T13:34:57.000Z</published>
    <updated>2017-05-24T07:19:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>在上一个博文 <a href="http://ownwell.github.io/2016/08/11/Anroid%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%8A%B6%E6%80%81%E6%A0%8F/">Anroid沉浸式状态栏</a>中提到了，画了一个图，这个图简单将我们的状态栏分为不同的2个维度来看状态栏。其中涉及的概念我不在赘诉，请返到<a href="http://ownwell.github.io/2016/08/11/Anroid%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%8A%B6%E6%80%81%E6%A0%8F/">Anroid沉浸式状态栏</a>再去认识下这几个概念。本文中提到的<strong>[上节]</strong>就是<a href="http://ownwell.github.io/2016/08/11/Anroid%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%8A%B6%E6%80%81%E6%A0%8F/">Anroid沉浸式状态栏</a>这篇文章。**<br><a id="more"></a></p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1470997766590.png" alt="图1"></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>由于[上节]提到了基本的实现方法和一些基本概念，但是没有实际操作和演示，那我们现在就来一步步来去实现我们提到的三种状态栏的实现过程。</p>
<h2 id="全屏模式下的透明状态栏"><a href="#全屏模式下的透明状态栏" class="headerlink" title="全屏模式下的透明状态栏"></a>全屏模式下的透明状态栏</h2><p>全屏模式下的透明状态栏，其他app实现这样方式我们肯定见过，如我们的启动页很多情况下就是全屏模式，但是这个还是和我们说的不太一样，不过今天我们介绍的这个是透明状态栏，但是仍然又有出入。</p>
<p>如下图是网易新闻的启动页：</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1472219319760.png" width="350"></p>
<p>但是不是我们需要的效果，这种是全屏模式时，当前页面获取焦点就显示一个有一定透明度的暗色状态栏。</p>
<blockquote>
<p>网易新闻这种才是真正的浸入式状态栏,这个沉浸式让郭神讲的很透彻 –<a href="http://blog.csdn.net/guolin_blog/article/details/51763825" target="_blank" rel="external">Android状态栏微技巧，带你真正理解沉浸式模式</a></p>
</blockquote>
<hr>
<p>我们希望的是小米天气的这种：<br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1472220275729.png" width="350"></p>
<p>内容部分可以延伸到状态栏，且状态栏是透明的，无背景色，也就是我们的全屏模式。    </p>
<p>按照我们上节拿来实践下。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">setFullSreen</span><span class="params">(Activity activity)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">            <span class="comment">// 设置透明状态栏,这样才能让 ContentView 向上</span></div><div class="line">            activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我将一个图片铺满contentView。<br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1472221242655.png" width="350"></p>
<p>这个截图是在4.4上完成的。</p>
<p>但是在6.0上的效果还差强人意：</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1472221930580.png" width="350"></p>
<p>这个是在我的N5手机上跑的，上面有灰色的阴影。不是完全透明，和我们的小米天气不太一样，好了还是用到上节的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">setFullSreen</span><span class="params">(Activity activity)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class="line">            Window window = activity.getWindow();</div><div class="line">            window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS</div><div class="line">                    | WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);</div><div class="line">            window.getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN| View.SYSTEM_UI_FLAG_LAYOUT_STABLE);</div><div class="line">            window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);</div><div class="line">            window.setStatusBarColor(Color.TRANSPARENT);</div><div class="line">        &#125;<span class="keyword">else</span></div><div class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">            <span class="comment">// 设置透明状态栏,这样才能让 ContentView 向上</span></div><div class="line">            activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这样就可以使得状态栏也透明了。</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1472222580320.png" width="350"></p>
<h2 id="彩色状态栏"><a href="#彩色状态栏" class="headerlink" title="彩色状态栏"></a>彩色状态栏</h2><p>可能有些人会迷惑，为什么我们要设置彩色状态栏，在5.0可以直接设置主题来设置的，我要告诉你的是我们希望4.4上也有彩色的状态栏。上节我们提到了彩色状态栏的实现方法：就是先设置为屏幕模式下的透明状态栏，再在透明状态栏的垂直下方放置一个和状态栏同样高宽的view，我们操作他这个空白view的颜色，即可实现彩色状态栏。</p>
<p>具体实现是参考<a href="http://jaeger.itscoder.com/" target="_blank" rel="external">猴子</a>的一个开源项目<a href="https://github.com/laobie/StatusBarUtil" target="_blank" rel="external">StatusBarUtil</a>里的中代码，可能略有改动，已经告知猴子，得到他本人授权。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">/**</span></div><div class="line">  *设置彩色的状态栏</div><div class="line">  *</div><div class="line">  * <span class="doctag">@param</span> activity</div><div class="line">  * <span class="doctag">@param</span> color 状态栏需要设置的背景颜色</div><div class="line">  * <span class="doctag">@param</span> statusBarAlpha 状态栏需要设置的背景颜色的透明度</div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(Activity activity, @ColorInt <span class="keyword">int</span> color, <span class="keyword">int</span> statusBarAlpha)</span></span>&#123;</div><div class="line"></div><div class="line">     <span class="comment">//先设置的全屏模式</span></div><div class="line">     setFullSreen(activity);</div><div class="line">     <span class="comment">//在透明状态栏的垂直下方放置一个和状态栏同样高宽的view</span></div><div class="line">     addStatusBarBehind(activity,color,statusBarAlpha);</div><div class="line"></div><div class="line"></div><div class="line"> &#125;</div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 添加了一个状态栏(实际上是个view)，放在了状态栏的垂直下方</div><div class="line">      */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addStatusBarBehind</span><span class="params">(Activity activity, @ColorInt <span class="keyword">int</span> color, <span class="keyword">int</span> statusBarAlpha)</span> </span>&#123;</div><div class="line">     <span class="comment">//获取windowphone下的decorView</span></div><div class="line">     ViewGroup decorView = (ViewGroup) activity.getWindow().getDecorView();</div><div class="line">     <span class="keyword">int</span>       count     = decorView.getChildCount();</div><div class="line">     <span class="comment">//判断是否已经添加了statusBarView</span></div><div class="line">     <span class="keyword">if</span> (count &gt; <span class="number">0</span> &amp;&amp; decorView.getChildAt(count - <span class="number">1</span>) <span class="keyword">instanceof</span> StatusBarView) &#123;</div><div class="line">         decorView.getChildAt(count - <span class="number">1</span>).setBackgroundColor(calculateStatusColor(color, statusBarAlpha));</div><div class="line">     &#125; <span class="keyword">else</span> &#123;</div><div class="line">         <span class="comment">//新建一个和状态栏高宽的view</span></div><div class="line">         StatusBarView statusView = createStatusBarView(activity, color, statusBarAlpha);</div><div class="line">         decorView.addView(statusView);</div><div class="line">     &#125;</div><div class="line">     setRootView(activity);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * 设置根布局参数</div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setRootView</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">     ViewGroup rootView = (ViewGroup) ((ViewGroup) activity.findViewById(android.R.id.content)).getChildAt(<span class="number">0</span>);</div><div class="line">     <span class="comment">//rootview不会为状态栏流出状态栏空间</span></div><div class="line">     ViewCompat.setFitsSystemWindows(rootView,<span class="keyword">false</span>);</div><div class="line">     rootView.setClipToPadding(<span class="keyword">true</span>);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> StatusBarView <span class="title">createStatusBarView</span><span class="params">(Activity activity, <span class="keyword">int</span> color, <span class="keyword">int</span> alpha)</span> </span>&#123;</div><div class="line">     <span class="comment">// 绘制一个和状态栏一样高的矩形</span></div><div class="line">     StatusBarView statusBarView = <span class="keyword">new</span> StatusBarView(activity);</div><div class="line">     LinearLayout.LayoutParams params =</div><div class="line">             <span class="keyword">new</span> LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, getStatusBarHeight(activity));</div><div class="line">     statusBarView.setLayoutParams(params);</div><div class="line">     statusBarView.setBackgroundColor(calculateStatusColor(color, alpha));</div><div class="line">     <span class="keyword">return</span> statusBarView;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * 获取状态栏高度</div><div class="line">  *</div><div class="line">  * <span class="doctag">@param</span> context context</div><div class="line">  * <span class="doctag">@return</span> 状态栏高度</div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getStatusBarHeight</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">     <span class="comment">// 获得状态栏高度</span></div><div class="line">     <span class="keyword">int</span> resourceId = context.getResources().getIdentifier(<span class="string">"status_bar_height"</span>, <span class="string">"dimen"</span>, <span class="string">"android"</span>);</div><div class="line">     <span class="keyword">return</span> context.getResources().getDimensionPixelSize(resourceId);</div><div class="line"> &#125;</div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 计算状态栏颜色</div><div class="line">  *</div><div class="line">  * <span class="doctag">@param</span> color color值</div><div class="line">  * <span class="doctag">@param</span> alpha alpha值</div><div class="line">  * <span class="doctag">@return</span> 最终的状态栏颜色</div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateStatusColor</span><span class="params">(<span class="keyword">int</span> color, <span class="keyword">int</span> alpha)</span> </span>&#123;</div><div class="line">     <span class="keyword">float</span> a = <span class="number">1</span> - alpha / <span class="number">255f</span>;</div><div class="line">     <span class="keyword">int</span> red = color &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>;</div><div class="line">     <span class="keyword">int</span> green = color &gt;&gt; <span class="number">8</span> &amp; <span class="number">0xff</span>;</div><div class="line">     <span class="keyword">int</span> blue = color &amp; <span class="number">0xff</span>;</div><div class="line">     red = (<span class="keyword">int</span>) (red * a + <span class="number">0.5</span>);</div><div class="line">     green = (<span class="keyword">int</span>) (green * a + <span class="number">0.5</span>);</div><div class="line">     blue = (<span class="keyword">int</span>) (blue * a + <span class="number">0.5</span>);</div><div class="line">     <span class="keyword">return</span> <span class="number">0xff</span> &lt;&lt; <span class="number">24</span> | red &lt;&lt; <span class="number">16</span> | green &lt;&lt; <span class="number">8</span> | blue;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>其中状态栏的view就是一个简单的view，贴出来的这个类吧：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StatusBarView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">StatusBarView</span><span class="params">(Context context, AttributeSet attrs,<span class="keyword">int</span> style)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs,style);</div><div class="line">    &#125;    </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StatusBarView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StatusBarView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 搞定，我们就可以来动态改变状态栏的颜色了。</p>
<blockquote>
<p>calculateStatusColor 方法中的alpha是0-255的，0的时候其实是不透明的，当设置255相当于statusview背景透明，即为默认色黑色。</p>
</blockquote>
<p>可用的函数是<code>public static void setColor(Activity activity, @ColorInt int color, int statusBarAlpha)</code>和<code>setFullSreen</code></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>Now现在这个工具类就算是OK，对于代码的侵入基本上为零，直接拿来当工具类，不用改主题，简单易容用。也为大家提供一个思路，这个只是实现的基本功能，一些复杂的定制的情况，可以随机应变，自由组合使用。<a href="https://github.com/laobie/StatusBarUtil" target="_blank" rel="external">猴子的StatusBarUtil</a>可以参考下，也希望大家多提issues，使这个项目更加完善。</p>
<p>实现状态栏，无非是将4.4-5.0 和5.0+的分别实现，当然配合decorview和 ViewCompat.setFitsSystemWindows(view,boolean)使用效果更佳。</p>
<h1 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h1><p>在改变状态栏颜色时，我们需要注意的是默认的状态栏字体颜色都是黑色的，但是若是背景为暗色，上面的时间、电量等还等看到很清晰，但是若是遇到了全屏模式下状态栏垂直下方的view是白色的或者接近白色，那岂不是看不见状态栏上的字么？</p>
<p>是的！<br>所以有人提出需要改状态栏的字体颜色了，这个在知乎上火了一阵，所以把这个拓展部分留一个知乎的链接 —-<a href="http://www.zhihu.com/question/31994153" target="_blank" rel="external">android开发，修改状态栏字体颜色?</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一个博文 &lt;a href=&quot;http://ownwell.github.io/2016/08/11/Anroid%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%8A%B6%E6%80%81%E6%A0%8F/&quot;&gt;Anroid沉浸式状态栏&lt;/a&gt;中提到了，画了一个图，这个图简单将我们的状态栏分为不同的2个维度来看状态栏。其中涉及的概念我不在赘诉，请返到&lt;a href=&quot;http://ownwell.github.io/2016/08/11/Anroid%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%8A%B6%E6%80%81%E6%A0%8F/&quot;&gt;Anroid沉浸式状态栏&lt;/a&gt;再去认识下这几个概念。本文中提到的&lt;strong&gt;[上节]&lt;/strong&gt;就是&lt;a href=&quot;http://ownwell.github.io/2016/08/11/Anroid%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%8A%B6%E6%80%81%E6%A0%8F/&quot;&gt;Anroid沉浸式状态栏&lt;/a&gt;这篇文章。**&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ownwell.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://ownwell.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Gitflow工作流</title>
    <link href="http://ownwell.github.io/2016/08/17/git-work-flow/"/>
    <id>http://ownwell.github.io/2016/08/17/git-work-flow/</id>
    <published>2016-08-17T13:13:23.000Z</published>
    <updated>2017-05-24T07:19:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在的版本控制越来越重要，还记得毕业那会写毕业设计一个个版本，搞得头昏脑涨，不过当时已经接触了版本迭代在自己的机器上部署了一个SVN Server，用程序员的方式轻松解决一个个版本。</p>
<p><img src="http://img3.imgtn.bdimg.com/it/u=1698758481,31368498&amp;fm=21&amp;gp=0.jpg" alt="毕业设计"><br><a id="more"></a><br>毕业后用过SVN，在超星时用得就是SVN，后来在世界邦用的是Git，对于版本控制来说那种都无所谓，不过对于用过Git的人来说，Git在分支和分布式版本这块和SVN还是有很大的区别，不过就冲Git优秀分支管理这块很适合客户端的开发，版本迭代快、团队人数不多，用起Git更能提高自己的效率。有了天书第六部，我们还怕张小凡么？</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1471440527718.png" width="200"></p>
<h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><p>至于Git的基础命令我推荐几个比较好的网站：</p>
<ol>
<li><a href="http://git-scm.com/book/zh" target="_blank" rel="external">Pro Git官网</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰的Git教程</a></li>
<li><a href="http://www.ixirong.com/2014/11/19/the-way-to-learn-git/" target="_blank" rel="external">Git入门指南使用资料汇总及文章推荐</a></li>
<li><a href="http://backlogtool.com/git-guide/cn/" target="_blank" rel="external">图文并茂-猴子都能懂的git入门教程</a></li>
<li><a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="external">A successful Git branching model</a></li>
</ol>
<p>其中<a href="http://www.ixirong.com/2014/11/19/the-way-to-learn-git/" target="_blank" rel="external">Git入门指南使用资料汇总及文章推荐</a>提到了<code>git flow</code>–<a href="https://github.com/nvie/gitflow" target="_blank" rel="external">项目地址</a>,<code>git flow</code>其实是为了更好的利用Git分支对git 命令的一个封装，省时省力，不信来张图。</p>
<h1 id="git-flow"><a href="#git-flow" class="headerlink" title="git flow"></a>git flow</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Git Flow模型中定义了主分支和辅助分支两类分支。其中主分支用于组织与软件开发、部署相关的活动；辅助分支组织为了解决特定的问题而进行的各种开发活动。</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1471443465028.png" width="500"></p>
<p><a href="http://7xj9f0.com1.z0.glb.clouddn.com/md/1471441229112.png" target="_blank" rel="external">另外的一个</a></p>
<h2 id="master分支"><a href="#master分支" class="headerlink" title="master分支"></a><code>master分支</code></h2><p> 主分支，是你发版的release时打的tag，是稳定版本，每一个版本都要打一个version tag。</p>
<h2 id="develop分支"><a href="#develop分支" class="headerlink" title="develop分支"></a><code>develop分支</code></h2><p> develop分支，主分支开发分支，总是我们最新版本，虽然不稳定，但是有我们最新的版本，当开发完，QA通过，版本迭代完毕，将<code>develop</code> <code>merge</code>回主分支。</p>
<h2 id="辅助分支"><a href="#辅助分支" class="headerlink" title="辅助分支"></a>辅助分支</h2><ol>
<li><code>release分支</code> release分支是为发布新的产品版本而设计的。在这个分支上的代码允许做小的缺陷修正、准备发布版本所需的各项说明信息（版本号、发布时间、编译时间等等）。</li>
<li><code>feature分支</code>：是develop的功能分支，如有几个同事同时开发，需要切换成几个小功能，每个人都需要从从develop中拉出一个feature分支，但是每个feature颗粒要尽量小，因为它需要我们能尽早merge会develop分支，否则冲突解决起来就没完没了。同时，当一个功能因为各种原因不开发了或者放弃了，这个分支直接废弃，不影响其他develop分支。</li>
<li><code>hot-fix</code>分支：是一个比较特殊的分支，如图是从master分支上分出来的一个分支，如发版后发现有个紧急修复的bug，这时就需要用到hot-fix分支，修改完bug，结束了这个<code>hot-fix</code>，回合并修改的内容到<code>develop</code>分支和<code>mastar</code>分支。</li>
</ol>
<blockquote>
<p>常用的分支约定：</p>
<p>用于新建发布分支的分支: develop<br>用于合并的分支: master<br>分支命名: release-<em> 或 release/</em></p>
</blockquote>
<p>截了一个<a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html" target="_blank" rel="external">git-flow 备忘清单</a>网站上的图。</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1471442358943.png" width="670"></p>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="创建开发分支"><a href="#创建开发分支" class="headerlink" title="创建开发分支"></a>创建开发分支</h3><p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1471443398542.png" width="275"></p>
<p><a href="http://backlogtool.com/git-guide/cn/reference/branch.html#sec2" target="_blank" rel="external">创建一个本地分支</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git branch develop</div><div class="line">git push -u origin develop</div></pre></td></tr></table></figure></p>
<p>或者<a href="http://backlogtool.com/git-guide/cn/reference/remote.html#sec4" target="_blank" rel="external">checkout一份到本地</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b develop origin/develop</div></pre></td></tr></table></figure>
<h3 id="初始化git-flow"><a href="#初始化git-flow" class="headerlink" title="初始化git flow"></a>初始化git flow</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git flow init</div></pre></td></tr></table></figure>
<h3 id="feature分支"><a href="#feature分支" class="headerlink" title="feature分支"></a>feature分支</h3><p>开始创建新的需求分支</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git flow feature start feature1 #这时项目会自动切换 feature/feature1分支</div></pre></td></tr></table></figure>
<p>提交日志到本地仓库<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -a -m <span class="string">"修改日志"</span></div></pre></td></tr></table></figure></p>
<p>完成开发分支合并develop(自动)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git flow feature finish feature1</div></pre></td></tr></table></figure></p>
<p>发布到远程开发分支<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin develop</div></pre></td></tr></table></figure></p>
<h3 id="hotfix分支"><a href="#hotfix分支" class="headerlink" title="hotfix分支"></a>hotfix分支</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">更新master分支</div><div class="line">git pull origin master（更新master分支为最新）    </div><div class="line"></div><div class="line"> 切换到master分支</div><div class="line">git checkout master</div><div class="line"></div><div class="line">生成一个hotfix分支</div><div class="line">git flow hotfix start hfx     </div><div class="line"></div><div class="line"> 通知相关得工程师和测试人员hotfix分支名称   </div><div class="line"></div><div class="line"> 最终测试完成后拉回分支最新代码</div><div class="line">git pull origin hotfix/hfx</div><div class="line"></div><div class="line">最终修改和测试完成后，结束hot fix以供发布</div><div class="line">git flow hot fix finish hfx</div><div class="line"></div><div class="line"> 发布最终的master分支</div><div class="line">git push origin master</div></pre></td></tr></table></figure>
<hr>
<p>参考文章</p>
<ol>
<li><a href="http://www.ituring.com.cn/article/56870" target="_blank" rel="external">基于git的源代码管理模型——git flow</a></li>
<li><a href="http://backlogtool.com/" target="_blank" rel="external">猴子都能懂得git入门</a></li>
<li><a href="http://blog.jobbole.com/76867/" target="_blank" rel="external">Git工作流指南：Gitflow工作流</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在的版本控制越来越重要，还记得毕业那会写毕业设计一个个版本，搞得头昏脑涨，不过当时已经接触了版本迭代在自己的机器上部署了一个SVN Server，用程序员的方式轻松解决一个个版本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img3.imgtn.bdimg.com/it/u=1698758481,31368498&amp;amp;fm=21&amp;amp;gp=0.jpg&quot; alt=&quot;毕业设计&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://ownwell.github.io/categories/Tools/"/>
    
    
      <category term="Git" scheme="http://ownwell.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Anroid沉浸式状态栏</title>
    <link href="http://ownwell.github.io/2016/08/11/Anroid%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%8A%B6%E6%80%81%E6%A0%8F/"/>
    <id>http://ownwell.github.io/2016/08/11/Anroid沉浸式状态栏/</id>
    <published>2016-08-11T06:21:50.000Z</published>
    <updated>2017-05-24T07:19:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>Metarial Design是2014年Google IO中Google重点提到的一个点，在过去的两年时光里，越来越多的公司已经认可了MD设计规范。在<a href="https://dribbble.com/" target="_blank" rel="external">dribbble</a>上可以看到，越来越多的设计师开始投入到MD设计实践中，MD设计规范终于有底气可以和IOS的设计规范对抗啦！！！Android程序员可以很叫嚣滴告诉设计师这就是Android的设计规范。<br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1471272644394.png" width="300"><br><a id="more"></a></p>
<p>很少写Material Design的东西，今天趁着手热，在Material化财经APP的时候，看了些透明状态栏/沉浸式状态栏的东西，觉得自己可能还有很多不足之处只是希望能分享出来，一方面是自己的学习成果，另一方面是希望大家指正自己在理解的不到位或者错误。</p>
<p>先放一张我的五儿子手机原生的短信截图：</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1470896523109.png" width="136" alt="图1"></p>
<p>从上到下依次是状态栏、内容View、导航栏（有些机器上不一定有导航栏这个虚拟栏），可以看到状态栏是彩色的，不是以前那种黑乎乎的状态栏，现在你也可以定制自己的状态栏了(这个应该是跟IOS学的吧，不过这个值得学习)。</p>
<p>现在我们就来看下我手机上装的APP的一些截图：<br><span id="pic2"><br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1470968884672.png" width="308" alt="图2"><br></span><br>这个五个应用分别是网易新闻、豌豆荚、微信、小米天气、小气天气。</p>
<p>&emsp;&emsp;关于这个状态栏变色到底叫「Immersive Mode」/「Translucent Bars」有兴趣可以去 <a href="http://www.zhihu.com/question/27040217" target="_blank" rel="external">为什么在国内会有很多用户把 ｢透明栏｣（Translucent Bars）称作 ｢沉浸式顶栏｣？</a>以及<a href="https://www.zhihu.com/question/24908570" target="_blank" rel="external">何为沉浸模式，沉浸式顶栏，变色龙状态栏</a>，这个历史原因我们就没法去说大家错误，所有就错说错有了沉浸式状态栏一说。</p>
<p>可以看到状态栏也可以按照我们的需要定制的很炫酷，Do not you think so。</p>
<p>在5.0之后我们是可以通过v7包下的<code>Theme.AppCompat</code>一些列主题为APP的页面设置Activity的的状态栏。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"BaseAppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowIsTranslucent"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>但是为了使Android 4.4 和Android 5+平台的统一，我们放弃这样方式，不过这样简单处理也是v7 compat给大家的一个福利。</p>
<p>为了更好的操作我们的状态栏StatusBar，我们需要定制自己的状态栏，我们可以手动设置状态栏的颜色，可以随时改变状态栏的透明度等，所以我们需要自己来定制一套可行的方案。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol>
<li><p><strong>全屏模式和着色模式</strong><br>根据内容延伸的角度可以分为两类：全屏模式和着色模式。其中,<a href="#pic2">图2</a> 中前三个页面都是状态栏固定在上方，无论下面怎么滑动，内部View都是那一块固定的大小区域滑动，由于状态栏是固定在一定位置且有着色，我们称之为着色模式，而<a href="#pic2">图2</a>中后两个页面截图中，内容View和状态栏像放在一个<code>FrameLayout</code>一样，是层叠关系并且状态栏是透明，内容View可以延伸到状态栏，我们称之为全屏模式。</p>
</li>
<li><p><strong>透明状态栏和彩色状态栏</strong><br>根据状态栏的颜色，可以分为状态栏透明和不透明（网易新闻、小米天气都是透明，而豌豆荚、wechat都是不透明）。<br>以上两种分为是不同维度的，从不同维度来看可以组合如下图:</p>
</li>
</ol>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1470997766590.png" width="300"></p>
<h3 id="setFitsSystemWindows"><a href="#setFitsSystemWindows" class="headerlink" title="setFitsSystemWindows"></a>setFitsSystemWindows</h3><p>在android doc是这么描述的：</p>
<blockquote>
<p>void setFitsSystemWindows (boolean fitSystemWindows)<br>Sets whether or not this view should account for system screen decorations such as the status bar and inset its content; that is, controlling whether the default implementation of fitSystemWindows(Rect) will be executed. See that method for more details.</p>
<p>Note that if you are providing your own implementation of fitSystemWindows(Rect), then there is no need to set this flag to true – your implementation will be overriding the default implementation that checks this flag.</p>
</blockquote>
<p>大概意思是：<code>setFitsSystemWindows</code>用来设置影响系统的工具栏如状态栏，决定了这个view是否插入到它的ContentView。当您设置了fitSystemWindows(Rect)而没有将<code>setFitsSystemWindows</code>设置为true，你对fitSystemWindows(Rect)设置是无效的.</p>
<p>该属性设置为true时,会预留出状态栏的空间。</p>
<p>由于这个实在API14(4.0)之后的函数，为了兼容低版本，才有V4里面的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ViewCompat.setFitsSystemWindows(rootView,<span class="keyword">false</span>);</div></pre></td></tr></table></figure></p>
<h2 id="透明状态栏"><a href="#透明状态栏" class="headerlink" title="透明状态栏"></a>透明状态栏</h2><p>由于Android 4.4才加入透明状态栏，Android 5.0之后可以直接设置状态栏和导航栏，而不是之前的黑乎乎的状态栏，但是，在4.4以下的系统上，想自己定义状态栏就无能为力了。所以，我们将Android 4.4和Android5.0视为边界。</p>
<h3 id="Android-4-4设置透明状态栏"><a href="#Android-4-4设置透明状态栏" class="headerlink" title="Android 4.4设置透明状态栏"></a>Android 4.4设置透明状态栏</h3><p>设置方法有两种:</p>
<p> <strong>代码</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">            <span class="comment">// 设置状态栏透明</span></div><div class="line">             activity.getWindow()</div><div class="line">                .setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>XML</strong></p>
<p> 在values-v19文件夹下，为activity的Style 添加一个属性：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"@style/BaseAppTheme"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTranslucentStatus"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这样设置的结果是contentview的位置的上移，状态栏透明。</p>
<h3 id="Android-5-0-透明状态栏"><a href="#Android-5-0-透明状态栏" class="headerlink" title="Android 5.0+透明状态栏"></a>Android 5.0+透明状态栏</h3><p>不过对于5.0系统，上面的设置后的结果可能不是透明哦（在原生机器是不透明的，但是在小米的是透明的，估计MIUI做了一些优化工作）</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1470904408961.png" width="135"></p>
<p>若是要完全透明，就需要看额外处理，在内容延伸到状态栏一节有介绍。</p>
<p>当然了你也可以用5.0的<code>setStatusBarColor</code></p>
<p><span id="5status">全屏模式的透明状态栏</span></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Window window = activity.getWindow();</div><div class="line"><span class="comment">//设置透明状态栏,这样才能让 ContentView 向上</span></div><div class="line">window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</div><div class="line"></div><div class="line"><span class="comment">//需要设置这个 flag 才能调用 setStatusBarColor 来设置状态栏颜色</span></div><div class="line">window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);</div><div class="line"><span class="comment">//设置状态栏颜色</span></div><div class="line">window.setStatusBarColor(statusColor);</div><div class="line"></div><div class="line"><span class="comment">//为了设置全屏</span></div><div class="line">ViewGroup mContentView = (ViewGroup) activity.findViewById(Window.ID_ANDROID_CONTENT);</div><div class="line">View mChildView = mContentView.getChildAt(<span class="number">0</span>);</div><div class="line"><span class="keyword">if</span> (mChildView != <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="comment">//注意不是设置 ContentView 的 FitsSystemWindows, 而是设置 ContentView 的第一个子 View . 使其不为系统 View 预留空间.</span></div><div class="line">    ViewCompat.setFitsSystemWindows(mChildView, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>ViewCompat.setFitsSystemWindows(mChildView, false)中的第二个参数设置为false就是全屏模式，而设置成true。像上述实例中， ViewCompat.setFitsSystemWindows(mChildView, false)就是说mChildView可以直接延伸到phoneWindow的顶部，相当于小米天气的那种效果。</p>
</blockquote>
<h2 id="彩色状态栏"><a href="#彩色状态栏" class="headerlink" title="彩色状态栏"></a>彩色状态栏</h2><p>有透明状态栏，就有彩色状态栏。<br>在5.0+设置状态栏很简单就参照<a href="#5status">全屏模式的透明状态栏</a>中的代码做修改<code>window.setStatusBarColor(int color)</code>，而对于Android 4.4–5.0的怎么办呢，Android4.4是提供<code>setStatusBarColor</code>这个方法的。</p>
<p>我们就想到了在上面提到的全屏透明状态栏的基础上加一个和状态栏一样高度的空白View放到顶部。</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1471188010910.png" width="350"></p>
<p>好了说干就干：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">    	activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</div><div class="line"> <span class="comment">//添加一个空白的view到手机屏幕的顶部</span></div><div class="line">addStatusBarBehind(activity, color, statusBarAlpha);</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public static void addStatusBarBehind(Activity activity, int color, int statusBarAlpha) &#123;</div><div class="line">        ViewGroup decorView = (ViewGroup) activity.getWindow().getDecorView();</div><div class="line">        int       count     = decorView.getChildCount();</div><div class="line">        if (count &gt; 0 &amp;&amp; decorView.getChildAt(count - 1) instanceof StatusBarView) &#123;</div><div class="line">            decorView.getChildAt(count - 1).setBackgroundColor(calculateStatusColor(color, statusBarAlpha));</div><div class="line">        &#125; else &#123;</div><div class="line">            StatusBarView statusView = createStatusBarView(activity, color, statusBarAlpha);</div><div class="line">            decorView.addView(statusView);</div><div class="line">        &#125;</div><div class="line">        setRootView(activity);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="全屏模式"><a href="#全屏模式" class="headerlink" title="全屏模式"></a>全屏模式</h2><p>全屏模式，内容延伸到状态栏类似与小米天气的APP，先考虑下怎么做？</p>
<blockquote>
<p>答案：将内容移到状态栏下，并且状态栏背景透明.</p>
</blockquote>
<h3 id="Android4-4–5-0"><a href="#Android4-4–5-0" class="headerlink" title="Android4.4–5.0"></a>Android4.4–5.0</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">          <span class="comment">// 设置状态栏透明</span></div><div class="line">          activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</div><div class="line">          <span class="comment">//  设置根布局的参数</span></div><div class="line">          ViewGroup rootView = (ViewGroup) ((ViewGroup) activity.findViewById(android.R.id.content)).getChildAt(<span class="number">0</span>);</div><div class="line">          ViewCompat.setFitsSystemWindows(rootView,<span class="keyword">false</span>);</div><div class="line">          rootView.setClipToPadding(<span class="keyword">true</span>);</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<p>其实就先将状态栏设置了透明<code>activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)</code>,而后可以直接设置内容的根View来直接设置<code>ViewCompat.setFitsSystemWindows(rootView,false)</code>,这样就可以直接讲根rootView直接顶上去，和状态栏的顶部对齐。</p>
<h3 id="Android-5-0"><a href="#Android-5-0" class="headerlink" title="Android 5.0+"></a>Android 5.0+</h3><p>在Android 4.4上设置透明状态栏，在5.0上依然可以正常显示，利用5.0实现的<a href="#5status">全屏模式的透明状态栏</a>不过状态栏实际上并不完全为透明色，会有些许灰色。一般情况下，这个使我们能接受的，如微信、QQ等都是状态栏颜色暗与下面的Toolbar的。</p>
<p>若是能通过Activity的Theme的<code>colorPrimaryDark</code>设状态栏颜色颜色设置，也是可行的，但是若你must实现透明额状态栏，也只能出狠招了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Window window = activity.getWindow();</div><div class="line"></div><div class="line">window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS|</div><div class="line">| WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);</div><div class="line">window.getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN| View.SYSTEM_UI_FLAG_LAYOUT_STABLE);           window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);</div><div class="line">window.setStatusBarColor(Color.TRANSPARENT);</div></pre></td></tr></table></figure>
<p><code>setSystemUiVisibility</code>这个可以参考<a href="https://developer.android.com/training/system-ui/immersive.html?hl=zh-cn#nonsticky" target="_blank" rel="external">Using Immersive Full-Screen Mode</a>。</p>
<hr>
<p>这样的组合，让我们可以按照自己的需求来定制自己的状态栏，随后会开源自己封装的开源库工供大家参考。</p>
<hr>
<p>具体实现请参考这篇文章：<a href="http://ownwell.github.io/2016/08/26/android-status-bar/">Android下多彩的StatusView的实现</a></p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ol>
<li><a href="https://developer.android.com/training/system-ui/immersive.html?hl=zh-cn#nonsticky" target="_blank" rel="external">Using Immersive Full-Screen Mode</a></li>
</ol>
<ol>
<li><p><a href="http://blog.csdn.net/sbsujjbcy/article/details/48391863" target="_blank" rel="external">Android实现沉浸式状态栏</a></p>
</li>
<li><p><a href="http://niorgai.github.io/2016/03/20/Android-transulcent-status-bar/" target="_blank" rel="external">Android-transulcent-status-bar</a></p>
</li>
<li><p><a href="http://www.jianshu.com/p/2ef52f357aa0" target="_blank" rel="external">Android状态栏合集-管你透不透明</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Metarial Design是2014年Google IO中Google重点提到的一个点，在过去的两年时光里，越来越多的公司已经认可了MD设计规范。在&lt;a href=&quot;https://dribbble.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dribbble&lt;/a&gt;上可以看到，越来越多的设计师开始投入到MD设计实践中，MD设计规范终于有底气可以和IOS的设计规范对抗啦！！！Android程序员可以很叫嚣滴告诉设计师这就是Android的设计规范。&lt;br&gt;&lt;img src=&quot;http://7xj9f0.com1.z0.glb.clouddn.com/md/1471272644394.png&quot; width=&quot;300&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://ownwell.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Realm分享直播笔记</title>
    <link href="http://ownwell.github.io/2016/07/28/realm-note/"/>
    <id>http://ownwell.github.io/2016/07/28/realm-note/</id>
    <published>2016-07-28T14:53:51.000Z</published>
    <updated>2017-04-19T05:57:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天很幸运，看到了徐川老师发的一条消息，说下午，群里请大神讲Realm，就报名参加了。<br><a id="more"></a><br>s</p>
<p>干货太多，不敢独享。虽然形式简单，但是内容不少，现在我就分享出来所有内容的截图：</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1469717889374.png" alt="image"></p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1469717935563.png" alt="image"></p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1469717973648.png" alt="image"></p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1469717988310.png" alt="image"></p>
<p>有时间会整理成文字，有喜欢这种类似直播的同学可以加徐川老师的微信(pockry001)：</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天很幸运，看到了徐川老师发的一条消息，说下午，群里请大神讲Realm，就报名参加了。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ownwell.github.io/categories/Android/"/>
    
    
      <category term="Realm" scheme="http://ownwell.github.io/tags/Realm/"/>
    
  </entry>
  
  <entry>
    <title>[Androoid]开源自己的项目到JCenter</title>
    <link href="http://ownwell.github.io/2016/07/14/push-library-to-jcenter/"/>
    <id>http://ownwell.github.io/2016/07/14/push-library-to-jcenter/</id>
    <published>2016-07-14T03:15:17.000Z</published>
    <updated>2017-05-24T07:19:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个完整的系统，模块与模块之间，尽可能的使其独立存在。也就是说，让每个模块，尽可能的独立完成某个特定的子功能。模块与模块之间的接口，尽量的少而简单。<br><a id="more"></a></p>
<p>在写文章之前先吊书袋子了一下，告诉大家软件设计中的低耦合，所以我们会把一个个模块分开，模块之前相互独立，即插即用，这个书袋子吊的还可以吧。<br><img src="http://img4.imgtn.bdimg.com/it/u=835084131,3132971467&amp;fm=21&amp;gp=0.jpg" alt="maven"></p>
<p>所以maven在一个大型系统是经常见到的，如各个模块做成独立的压缩文件如jar，放在服务器上，所有需要的都可以直接DownLoad到本地，拿来用，这是一种很爽的体验吧。</p>
<p>所以Maven使我们解决依赖的一种最常用的方法，当然了你也可以通过maven来构建项目。但是这不是我们的重点，我们要讲的是对于android开发者如何上传自己的项目到JCenter(一个供程序员玩耍的Maven仓库)，世界上所有的程序员都可以通过JCenter上传自己的项目或者下载别人的项目来使用。</p>
<th><img src="http://qq.yh31.com/tp/qq/ZJBQ/201111/201111041444379709.gif" alt="藐视"></th>

<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>JCenter作为一个规模相当大的中心仓库，我们需要到<a href="https://bintray.com/#" target="_blank" rel="external">https://bintray.com/#</a>，去注册的账号，若你有账号跳过这一步。注册一般通过邮箱验证，试下登录是否注册成功。</p>
<h2 id="获取API-key"><a href="#获取API-key" class="headerlink" title="获取API key"></a><span id="apikey">获取API key</span></h2><p> 注册完成后我们需要查看自己的key，进入到<a href="https://bintray.com/profile/edit" target="_blank" rel="external">https://bintray.com/profile/edit</a>，看到有个API KEY输入密码就可以见到，下面会用到这个key。</p>
<h2 id="认识GAV"><a href="#认识GAV" class="headerlink" title="认识GAV"></a>认识GAV</h2><p>为了确定你的包唯一，我们使用GAV来保证，如下面的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;    </div><div class="line">  	&lt;groupId&gt;org.apache.struts&lt;/groupId&gt;    </div><div class="line">	&lt;artifactId&gt;struts2-core&lt;/artifactId&gt;    </div><div class="line">	&lt;version&gt;2.0.11&lt;/version&gt;    </div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>groupId 是你的Group的唯一标示<br>artifactId  你的项目名称<br>version   项目的版本    </p>
<p>所以你要确定自己的groupId和artifactId。</p>
<h1 id="配置gradle上传maven的配置"><a href="#配置gradle上传maven的配置" class="headerlink" title="配置gradle上传maven的配置"></a>配置gradle上传maven的配置</h1><h3 id="在更项目的build-gradle添加如下几句："><a href="#在更项目的build-gradle添加如下几句：" class="headerlink" title="在更项目的build.gradle添加如下几句："></a>在更项目的build.gradle添加如下几句：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"> dependencies &#123;</div><div class="line">        ……</div><div class="line">        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4'</div><div class="line">        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'</div><div class="line">        ……</div><div class="line">&#125;</div><div class="line">```   </div><div class="line"></div><div class="line"></div><div class="line">### 准备脚本和配置</div><div class="line"> 新建一个发布到Jcenter的gradle脚本到你的library,这个脚本是单独处理和JCenter上传的操作</div><div class="line"></div><div class="line"></div><div class="line">bintray.gradle文件</div><div class="line">```apply plugin: 'com.github.dcendents.android-maven'</div><div class="line">apply plugin: 'com.jfrog.bintray'</div><div class="line"></div><div class="line">Properties properties = new Properties()</div><div class="line">properties.load(project.file('bintray.properties').newDataInputStream())</div><div class="line">def siteUrl = properties.getProperty("bintray.siteUrl")</div><div class="line"></div><div class="line">def desc = properties.getProperty("bintray.descrip")</div><div class="line"></div><div class="line">// Maven Group ID for the artifact，一般填你唯一的包名</div><div class="line">group = properties.getProperty("bintray.group")</div><div class="line">version = properties.getProperty("bintray.version")</div><div class="line"></div><div class="line">def giturl = properties.getProperty("bintray.vcs")</div><div class="line">def userid = properties.getProperty("bintray.userid")</div><div class="line">def username = properties.getProperty("bintray.username")</div><div class="line">def useremail = properties.getProperty("bintray.useremail")</div><div class="line"></div><div class="line">def licensename = properties.getProperty("bintray.licensename")</div><div class="line">def licenseurl = properties.getProperty("bintray.licenseurl")</div><div class="line">install &#123;</div><div class="line">    repositories.mavenInstaller &#123;</div><div class="line">         // This generates POM.xml with proper parameters</div><div class="line">        pom &#123;</div><div class="line">            project &#123;</div><div class="line">                packaging 'aar'</div><div class="line">                // Add your description here</div><div class="line">                name desc //项目描述</div><div class="line"></div><div class="line">               url siteUrl</div><div class="line">               // Set your license</div><div class="line">               licenses &#123;</div><div class="line">                   license &#123;</div><div class="line">                       name licensename</div><div class="line">                       url licenseurl</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                developers &#123;</div><div class="line">                    developer &#123;</div><div class="line">                        id userid</div><div class="line">                        name username</div><div class="line">                        email useremail</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                scm &#123;</div><div class="line">                    connection giturl</div><div class="line">                    developerConnection giturl</div><div class="line">                    url siteUrl</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">task sourcesJar(type: Jar) &#123;</div><div class="line">    from android.sourceSets.main.java.srcDirs</div><div class="line">    classifier = 'sources'</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">task javadoc(type: Javadoc) &#123;</div><div class="line">    source = android.sourceSets.main.java.srcDirs</div><div class="line">    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))</div><div class="line">&#125;</div><div class="line"></div><div class="line">task javadocJar(type: Jar, dependsOn: javadoc) &#123;</div><div class="line">    classifier = 'javadoc'</div><div class="line">    from javadoc.destinationDir</div><div class="line">&#125;</div><div class="line">artifacts &#123;</div><div class="line">//    archives javadocJar</div><div class="line">    archives sourcesJar</div><div class="line"></div><div class="line">&#125;</div><div class="line">bintray &#123;</div><div class="line">    user = properties.getProperty("bintray.user")</div><div class="line">    key = properties.getProperty("bintray.key")</div><div class="line">    configurations = ['archives']</div><div class="line">    pkg &#123;</div><div class="line">        repo = "maven"</div><div class="line">        name = properties.getProperty("bintray.name") //发布到JCenter上的项目名字</div><div class="line">        websiteUrl = properties.getProperty("bintray.siteUrl")</div><div class="line">        vcsUrl = properties.getProperty("bintray.vcs")</div><div class="line">        licenses =[properties.getProperty("bintray.licenses")]</div><div class="line">                publish = true</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你看到的那些<code>bintray.licenses</code>都是我们需要新建另外一个配置文件的：</p>
<hr>
<p>bintray.properties文件<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">bintray.key= #填写刚才获取[API key](#apikey)中的key</div><div class="line">bintray.user=#填写刚才登录时的昵称</div><div class="line"></div><div class="line">bintray.userid=</div><div class="line">bintray.username=#需要显示在maven中的作者昵称</div><div class="line">bintray.useremail=#需要显示在maven中的作者邮箱</div><div class="line"></div><div class="line">bintray.licensename=The Apache Software License, Version 2.0</div><div class="line">bintray.licenseurl=http://www.apache.org/licenses/LICENSE-2.0.txt</div><div class="line"></div><div class="line">bintray.group=#项目的groupId</div><div class="line">bintray.name=#项目名称</div><div class="line">bintray.version=#项目版本号</div><div class="line">bintray.siteUrl=#项目的对应网站</div><div class="line">bintray.vcs=#项目的地址如githun等代码托管的链接</div><div class="line">bintray.licenses=#开源协议如mit等</div><div class="line">bintray.descrip=项目描述</div><div class="line">`</div></pre></td></tr></table></figure></p>
<p>准备妥当了，需要把gradle脚本放到你的libray的<code>build.gradle</code>,因为项目执行会去执行<code>build.gradle</code>,我们把刚才的bintray.gradle</p>
<p>apply from: “bintray.gradle”</p>
<p>整个项目结构我们可以这么看</p>
<p>library<br>–main<br>   –java<br>–build.gradle 在结尾记得加apply from: “bintray.gradle”<br>–bintray.gradle<br>–bintray.properties</p>
<h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><p>./gradlew clean bintrayUpload</p>
<p>这样就可以上传到jcenter上，去你的jcenter账号下看看有没有文件上传成功吧。</p>
<h3 id="申请同步到jcenter"><a href="#申请同步到jcenter" class="headerlink" title="申请同步到jcenter"></a>申请同步到jcenter</h3><p>会看到左侧使我们可以使用的GAV<br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1470416953314.png" width="685"></p>
<p>右侧是我们需要自己填写同步到jcenter的，否则只是私有库不能直接通过jcenter访问。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个完整的系统，模块与模块之间，尽可能的使其独立存在。也就是说，让每个模块，尽可能的独立完成某个特定的子功能。模块与模块之间的接口，尽量的少而简单。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ownwell.github.io/categories/Android/"/>
    
    
      <category term="JCenter" scheme="http://ownwell.github.io/tags/JCenter/"/>
    
  </entry>
  
  <entry>
    <title>扩大view的点击区域</title>
    <link href="http://ownwell.github.io/2016/06/19/expand_touch/"/>
    <id>http://ownwell.github.io/2016/06/19/expand_touch/</id>
    <published>2016-06-19T09:54:20.000Z</published>
    <updated>2017-05-24T07:19:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>在做一个一个页面，发现有些小Button实在是很难击中,可能你会想各种办法，比如在外面套一个大的容器、把Padding设置的大一点等等，今天给你提供一个新思路。<br><a id="more"></a></p>
<h1 id="扩大view的点击区域"><a href="#扩大view的点击区域" class="headerlink" title="扩大view的点击区域"></a>扩大view的点击区域</h1><p>今天在看View代码时，发现有个方法叫<code>setTouchDelegate</code>，后来查阅了一下发现这个实际上是个代理类，我们可以通过它的父组件来扩大点击区域。</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1470736727319.png" width="299"></p>
<p>代码很简单，直接贴上吧：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 扩大View的触摸和点击响应范围,最大不超过其父View范围</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> view</div><div class="line">     * <span class="doctag">@param</span> top</div><div class="line">     * <span class="doctag">@param</span> bottom</div><div class="line">     * <span class="doctag">@param</span> left</div><div class="line">     * <span class="doctag">@param</span> right</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">expandViewTouchDelegate</span><span class="params">(<span class="keyword">final</span> View view, <span class="keyword">final</span> <span class="keyword">int</span> top,</span></span></div><div class="line">                                               <span class="keyword">final</span> <span class="keyword">int</span> bottom, <span class="keyword">final</span> <span class="keyword">int</span> left, <span class="keyword">final</span> <span class="keyword">int</span> right) &#123;</div><div class="line"></div><div class="line">        ((View) view.getParent()).post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                Rect bounds = <span class="keyword">new</span> Rect();</div><div class="line">                view.setEnabled(<span class="keyword">true</span>);</div><div class="line">                view.getHitRect(bounds);</div><div class="line"></div><div class="line">                bounds.top -= top;</div><div class="line">                bounds.bottom += bottom;</div><div class="line">                bounds.left -= left;</div><div class="line">                bounds.right += right;</div><div class="line"></div><div class="line">                TouchDelegate touchDelegate = <span class="keyword">new</span> TouchDelegate(bounds, view);</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (View.class.isInstance(view.getParent())) &#123;</div><div class="line">                    ((View) view.getParent()).setTouchDelegate(touchDelegate);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 还原View的触摸和点击响应范围,最小不小于View自身范围</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> view</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">restoreViewTouchDelegate</span><span class="params">(<span class="keyword">final</span> View view)</span> </span>&#123;</div><div class="line"></div><div class="line">        ((View) view.getParent()).post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                Rect bounds = <span class="keyword">new</span> Rect();</div><div class="line">                bounds.setEmpty();</div><div class="line">                TouchDelegate touchDelegate = <span class="keyword">new</span> TouchDelegate(bounds, view);</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (View.class.isInstance(view.getParent())) &#123;</div><div class="line">                    ((View) view.getParent()).setTouchDelegate(touchDelegate);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做一个一个页面，发现有些小Button实在是很难击中,可能你会想各种办法，比如在外面套一个大的容器、把Padding设置的大一点等等，今天给你提供一个新思路。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ownwell.github.io/categories/Android/"/>
    
    
      <category term="View" scheme="http://ownwell.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Activity生命周期和启动模式</title>
    <link href="http://ownwell.github.io/2016/06/01/2016-06-01%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B01/"/>
    <id>http://ownwell.github.io/2016/06/01/2016-06-01《Android开发艺术探索》读书笔记1/</id>
    <published>2016-06-01T03:15:17.000Z</published>
    <updated>2017-05-24T07:19:18.000Z</updated>
    
    <content type="html"><![CDATA[<div align="center"><br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/android-book.png" align="middle"><br></div>

<p>《Android开发艺术探索》是一本很合适初高级工程师来学习和进阶，这种书多读读对自己也有成长。作者也是从自己的开发经验角度出发，似一位导师一样给我们讲解，我认为这本书对我真的有提高，从基础的Activity的生命周期到组件定制，再到四大组件的工作原理，很实用的技术。</p>
<a id="more"></a>
<h1 id="Activity的生命周期"><a href="#Activity的生命周期" class="headerlink" title="Activity的生命周期"></a>Activity的生命周期</h1><h2 id="1-1-Activity的生命周期"><a href="#1-1-Activity的生命周期" class="headerlink" title="1.1 Activity的生命周期"></a>1.1 Activity的生命周期</h2><ol>
<li><p><code>onCreate</code> <code>Activity</code> 创建时的初始化工作 如设置页面的ContentView、接收参数等.</p>
</li>
<li><p><code>onRestart</code> 在<code>Activity</code>的<code>onStop</code>后重新启动时，会调用这个参数</p>
</li>
<li><p><code>onStart</code>  正在启动，即将开始，没有出现在前台，还无法和用户交互，可以理解为已经初始化完成，但是处于后台我们暂时没法看见。</p>
</li>
<li><p><code>onResume</code>  可见了并且处于激活态,处于前台。</p>
<blockquote>
<p>和onStart最大的不同就是onStart是在后台已经初始化完，但是无法交互。</p>
</blockquote>
</li>
<li><p><code>onPause</code>  失去焦点不可以交互、处于后台。</p>
</li>
<li><p><code>onStop</code> 即将停止，做一些稍微重量级回收类的工作</p>
</li>
<li><p><code>onDestory</code> Activity即将被销毁，需要们做一些回收和资源释放类的工作。</p>
</li>
</ol>
<p>他们之间的关系：</p>
<p><img src="http://p.blog.csdn.net/images/p_blog_csdn_net/hpoi/EntryImages/20091003/347621596238419942633901667161718750.jpg" alt=""></p>
<p>或者同另外一个角度来看Activity生命周期之间的关系。<br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/activity_life.png" alt=""></p>
<h2 id="异常的生命周期调用"><a href="#异常的生命周期调用" class="headerlink" title="异常的生命周期调用"></a>异常的生命周期调用</h2><p>其实我们开发中一般是按照这样的生命周期执行，但是也会有异常的一些处理，如系统内存不足时，会杀死一些进程，以回收一部分资源，来保证系统仍可以正常的运行。具体的例子可以参照：<a href="http://itindex.net/detail/50832-%E5%86%85%E5%AD%98-android-%E7%B3%BB%E7%BB%9F" target="_blank" rel="external">内存不足时Android 系统如何Kill进程</a>，kill进程的顺序：</p>
<p><strong>空进程— 后台进程 -&gt; 服务进程 -&gt; 可见进程 -&gt; 前台进程</strong></p>
<p>相对于异常Activity的生命周期过程实际上是精简版的完整生命周期，如我们按Home键，当前的进程(实际上已经成为了后台进程)可能会由于内存不足等其他原因，被系统的kill掉，此时执行时的是onPause–&gt;onStop 还有一个是为了保存activity数据状态的onSaveInstanceState,这些属于常见的内容，可以自行<a href="http://google.com" target="_blank" rel="external">搜索</a></p>
<h1 id="Activity的启动模式-LaunchMode"><a href="#Activity的启动模式-LaunchMode" class="headerlink" title="Activity的启动模式(LaunchMode)"></a>Activity的启动模式(LaunchMode)</h1><p>Activity的启动模式这个是我们做久项目，必须要思考和研究额内容，在很多时候，理解这些会事倍功倍。</p>
<p>Activity一共有四种启动方式：standard、SingleTask、SingleTop、SingleInstance。每次Activity启动都会加入加入任务栈，当销毁时又从任务栈中退出，任务栈是一个后进先出的栈结构，当任务栈中没有Activity时，系统会自动回收改任务栈。</p>
<p>在我们开发中，我们可能需要某一个Activity（如主界面的MainActivity）始终只有一个，没必要每次startActivity都新建一个吧。所以怎么区分这些驱动模式呢？</p>
<h2 id="Standard-标准模式"><a href="#Standard-标准模式" class="headerlink" title="Standard 标准模式"></a>Standard 标准模式</h2><blockquote>
<p>若没有给Activity设置启动模式，默认的设置就是标准模式。</p>
</blockquote>
<p>标准的Activity的启动方式，每次启动都会新建一个新的Activity，如Activity A(standart)对象启动Activity B（standard），就会执行标准的Activity的生命周期：</p>
<p> onPause –&gt; onStop –&gt;onCreate –&gt; onStart ……</p>
<p>这样任务栈中就有了A B(从栈低到栈顶的顺序)，当B在重新启动A时，就成了ABA。</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/launchmode1.png" alt="图 2-1"></p>
<blockquote>
<ol>
<li>默认的情况下，启动一个启动模式为standard的Activity启动另一个启动模式为standard的Activity，会将启动的Activity放入到前一个Activity的任务栈中，如图2-7 所示。</li>
<li>通过全局AppicationContext启动一个Activity，由于Application的context没有在任务栈，所以必须添加FLAG_ACITIVITY_NEW_TASK 这个标志位，来新建一个任务栈。</li>
</ol>
</blockquote>
<h2 id="SingleTop-栈顶复用模式。"><a href="#SingleTop-栈顶复用模式。" class="headerlink" title="SingleTop 栈顶复用模式。"></a>SingleTop 栈顶复用模式。</h2><p>该模式一个重要的特性是栈顶复用，当启动一个启动模式为SingleTop的Activity，会先去找这个Activity所在的任务栈的顶部是否已经存在，若栈顶有该Activity则会复用，不会重新新建Activity，而是复用该Activity，并调用该Activity的onNewIntent方法。</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/launchmode_singleTop.png" alt="图 2-2"></p>
<h2 id="SingleTask-栈内复用"><a href="#SingleTask-栈内复用" class="headerlink" title="SingleTask 栈内复用"></a>SingleTask 栈内复用</h2><p>SingleTask模式，是栈内的单例，当一个Acitiviy已经在栈内存在，多次启动这个Activity不会重新创建这个Activity实例，而是会直接调用这个栈内已经存在的该Activity实例，系统会调用这个Activity的onNewIntent，同时会清除栈内这个Activity到栈顶的所有Activity实例，实际上clearTop的效果。</p>
<p>如图2-2，只有3-2 可能会不一样，因为在B–&gt;A时，Acitivity A是在任务栈中的，会将Acitivity A调至栈顶，清除A到栈顶的所有Activity，最后就只有Activity A。</p>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xj9f0.com1.z0.glb.clouddn.com/android-book.png&quot; align=&quot;middle&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;《Android开发艺术探索》是一本很合适初高级工程师来学习和进阶，这种书多读读对自己也有成长。作者也是从自己的开发经验角度出发，似一位导师一样给我们讲解，我认为这本书对我真的有提高，从基础的Activity的生命周期到组件定制，再到四大组件的工作原理，很实用的技术。&lt;/p&gt;
    
    </summary>
    
      <category term="读书" scheme="http://ownwell.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="《Android开发艺术探索》读书笔记" scheme="http://ownwell.github.io/tags/%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Android开发备忘</title>
    <link href="http://ownwell.github.io/2016/05/09/Android%E5%BC%80%E5%8F%91%E5%A4%87%E5%BF%98/"/>
    <id>http://ownwell.github.io/2016/05/09/Android开发备忘/</id>
    <published>2016-05-09T02:02:24.000Z</published>
    <updated>2017-05-24T07:19:20.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p> View相关</p>
<ol>
<li><p>父组件的焦点状态怎么设置</p>
<p>LinearLayout有一个很好的属性 Android:addStatesFromChildren=”true”，就是子组件的状态决定了父组件的状态。</p>
<p>参考文章：<a href="http://blog.csdn.net/finddreams/article/details/45502277" target="_blank" rel="external">Android登录界面账号密码输入框选中时，选中背景变换的实现方法</a></p>
</li>
</ol>
<h2 id="ButterKnife多参数"><a href="#ButterKnife多参数" class="headerlink" title="ButterKnife多参数"></a>ButterKnife多参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@OnClick(&#123;</div><div class="line">            R.id.dialog_dau_share_wx,</div><div class="line">            R.id.dialog_dau_share_wx_timeline,</div><div class="line">            R.id.dialog_dau_share_weibo,</div><div class="line">            R.id.dialog_dau_share_qq</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<h1 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h1><h2 id="检测App是否安装"><a href="#检测App是否安装" class="headerlink" title="检测App是否安装"></a>检测App是否安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 检查App是否安装</div><div class="line">private boolean appInstalledOrNot(String uri) &#123;</div><div class="line">    PackageManager pm = getPackageManager();</div><div class="line">    boolean app_installed;</div><div class="line">    try &#123;</div><div class="line">        pm.getPackageInfo(uri, PackageManager.GET_ACTIVITIES);</div><div class="line">        app_installed = true;</div><div class="line">    &#125; catch (PackageManager.NameNotFoundException e) &#123;</div><div class="line">        app_installed = false;</div><div class="line">    &#125;</div><div class="line">    return app_installed;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Android-Studio-Tips"><a href="#Android-Studio-Tips" class="headerlink" title="Android Studio Tips"></a>Android Studio Tips</h1><p><a href="https://github.com/pavlospt/Android-Studio-Tips-by-Philippe-Breault/wiki" target="_blank" rel="external">https://github.com/pavlospt/Android-Studio-Tips-by-Philippe-Breault/wiki</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt; View相关&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;父组件的焦点状态怎么设置&lt;/p&gt;
&lt;p&gt;LinearLayout有一个很好的属性 Android:addStatesFromChildren=”true”，就是子组件的状态决定了父组件的状态
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Fragment+Tab实现懒加载</title>
    <link href="http://ownwell.github.io/2016/04/22/fragment-tab-host/"/>
    <id>http://ownwell.github.io/2016/04/22/fragment-tab-host/</id>
    <published>2016-04-22T15:12:58.000Z</published>
    <updated>2017-05-24T07:19:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在Google已经在新的APP UI规范中开始提倡使用底部导航栏（<code>BottomNavigation</code>），而不是以前的侧拉导航栏（<code>NavigationView</code>,对于大屏手机，这个规范是很人性的。<code>BottomNavigation</code>分为底部的Tab导航栏和上面的内容展示部分，实现上，每个Tab对应一个<code>Fragment</code>，同时也需要我们正确处理每个<code>Fragment</code>在Tab间进行切换，同时每次打开那个Tab时，那个Tab对应的<code>Fragment</code>才加载。<br><a id="more"></a></p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20160422-1.png" alt="tab"></p>
<blockquote>
<p>如上图：</p>
<ol>
<li>当选中下面的Tab时,对应的Tab显示（其实在代码实现上就是Fragment能加载显示）</li>
<li>对于第一次加载的Tab，需要进行初始化和加载工作，而对于已经加载过的Tab,只需要加载即可，但是不能再次进行初始化工作。</li>
</ol>
</blockquote>
<p>就是说每一个tab对应一个<code>Fragemnt</code>，切换Tab时能正确切换到<code>Fragment</code>上。</p>
<p>Tab 1  —-&gt; TabFragment1<br>Tab 2  —-&gt; TabFragment2</p>
<h1 id="方案一-FragmentTabHost"><a href="#方案一-FragmentTabHost" class="headerlink" title="方案一  FragmentTabHost"></a>方案一  FragmentTabHost</h1><p>  在新的v4 support下有个类叫<code>FragemntTabHost</code>，是替代以前那种<code>TabHost</code>的方案，每个Tab就是<code>Fragment</code>。</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line"></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">".SendActivity"</span></div><div class="line">    &gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">      <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">      <span class="attr">app:popupTheme</span>=<span class="string">"@style/AppTheme.PopupOverlay"</span></div><div class="line">      &gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">      <span class="attr">android:layout_below</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">      <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 把FragmentLayout放在FragmentTabHost上面，这样tabs就在底部了，注意，id要自己添加了</span></div><div class="line">     android:id="@+id/realtabcontent"</div><div class="line">    --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/realtabcontent"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"0dip"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span> /&gt;</div><div class="line">    <span class="comment">&lt;!--&lt;View--&gt;</span></div><div class="line">        <span class="comment">&lt;!--android:id="@android:id/tabhost"--&gt;</span></div><div class="line">        <span class="comment">&lt;!--android:layout_width="match_parent"--&gt;</span></div><div class="line">        <span class="comment">&lt;!--android:layout_height="48dp"--&gt;</span></div><div class="line">        <span class="comment">&lt;!--&amp;gt;--&gt;</span></div><div class="line">    <span class="comment">&lt;!--&lt;/&gt;--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v4.app.FragmentTabHost</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@android:id/tabhost"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"48dp"</span></div><div class="line">        &gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v4.app.FragmentTabHost</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可能会这么设置布局，为每个tab设置一个TabView。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">View tab_msg1 = initTabItem(<span class="number">1</span>);</div><div class="line">View tab_msg2 = initTabItem(<span class="number">2</span>);</div><div class="line">View tab_msg3 = initTabItem(<span class="number">3</span>);</div><div class="line">View tab_msg4 = initTabItem(<span class="number">4</span>);</div><div class="line"></div><div class="line"><span class="comment">//addTab(标题，跳转的Fragment，传递参数的Bundle)</span></div><div class="line"><span class="comment">//ContactFragment自己定义一个extends Fragment的类就行了</span></div><div class="line"></div><div class="line">mTabHost.addTab(mTabHost.newTabSpec(<span class="string">"Tag1"</span>).setIndicator(tab_msg1), ContactFragment.class, <span class="keyword">null</span>);</div><div class="line">mTabHost.addTab(mTabHost.newTabSpec(<span class="string">"Tag2"</span>).setIndicator(tab_msg2), ContactFragment.class, <span class="keyword">null</span>);</div><div class="line">mTabHost.addTab(mTabHost.newTabSpec(<span class="string">"Tag3"</span>).setIndicator(tab_msg3), ContactFragment.class, <span class="keyword">null</span>);</div><div class="line">mTabHost.addTab(mTabHost.newTabSpec(<span class="string">"Tag4"</span>).setIndicator(tab_msg4), ContactFragment.class, <span class="keyword">null</span>);</div><div class="line"><span class="comment">//设置tabs之间的分隔线不显示</span></div><div class="line">mTabHost.getTabWidget().setShowDividers(LinearLayout.SHOW_DIVIDER_NONE);</div><div class="line"></div><div class="line"></div><div class="line">mTabHost.setOnTabChangedListener(<span class="keyword">this</span>);</div></pre></td></tr></table></figure></p>
<p>只要监听每次Tab的切换事件<code>OnTabChangeListener</code>就可以了，至于每个<code>Fragment</code>怎么切换交给了<code>FragmentTabHost</code>来处理。</p>
<p>等等让我实验下。</p>
<hr>
<p>coding 20分钟等待中。</p>
<hr>
<p>但(提)是(示)大家Tab有没有真正应用到项目中，我能说我用了么，为了<code>Fragemnt</code>我是操碎了心了啊，每次切换Tab，对应的<code>Fragment</code>都会回调<code>onCreateView</code>,<code>OnResume</code>等<code>Fragment</code>的方法，这个每次都会创建的<code>Fragment</code>的，很多初始化工作也会重新走一遍。好了，还是看看<code>FragmentTabHost</code>的source code吧。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">private FragmentTransaction doTabChanged(String tabId, FragmentTransaction ft) &#123;</div><div class="line">       TabInfo newTab = null;</div><div class="line">       for (int i=0; i&lt;mTabs.size(); i++) &#123;</div><div class="line">           TabInfo tab = mTabs.get(i);</div><div class="line">           if (tab.tag.equals(tabId)) &#123;</div><div class="line">               newTab = tab;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       if (newTab == null) &#123;</div><div class="line">           throw new IllegalStateException(&quot;No tab known for tag &quot; + tabId);</div><div class="line">       &#125;</div><div class="line">       if (mLastTab != newTab) &#123;</div><div class="line">           if (ft == null) &#123;</div><div class="line">               ft = mFragmentManager.beginTransaction();</div><div class="line">           &#125;</div><div class="line">           if (mLastTab != null) &#123;</div><div class="line">               if (mLastTab.fragment != null) &#123;</div><div class="line">                   ft.detach(mLastTab.fragment);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">           if (newTab != null) &#123;</div><div class="line">               if (newTab.fragment == null) &#123;</div><div class="line">                   newTab.fragment = Fragment.instantiate(mContext,</div><div class="line">                           newTab.clss.getName(), newTab.args);</div><div class="line">                   ft.add(mContainerId, newTab.fragment, newTab.tag);</div><div class="line">               &#125; else &#123;</div><div class="line">                   ft.attach(newTab.fragment);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           mLastTab = newTab;</div><div class="line">       &#125;</div><div class="line">       return ft;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>源码很清晰解释了为什么，当切换Tab时，有两个Fragemnt，一个是<br>newTab，另一是mLastTab，mLastTab是被detach，newTab是add或者被attach，似乎这些有点蒙。</p>
<blockquote>
<p>detach()<br>会将view从UI中移除,和remove()不同,此时fragment的状态依然由FragmentManager维护。<br>attach()<br>重建view视图，附加到UI上并显示。<br>一个Fragment的生命周期难道你忘了么，翠花上图：</p>
</blockquote>
<p><img src="http://img.my.csdn.net/uploads/201211/29/1354170699_6619.png" alt="Fragment的生命周期">。<br>被attach就会走<code>onAttach</code>后面的<code>onCreateView</code>等方法，被detach就会走<code>onDestoryView</code>等方法，好了知道为什么会出现Tab切换，切到目标<code>Fragemnt</code>上时<code>Fragemnt</code>会不断调用<code>onCreateView</code>、<code>onResume</code>等方法了。</p>
<p>这么控制每个<code>Fragemnt</code>真的好累，为了能更好控制<code>Fragment</code>我们是可以自己定义类似<code>FragemntTabHost</code>的东西，使得每次加载已经加载过的<code>Fragemnt</code>能只是显示个View，不要一次次调用<code>onCreateView</code>、<code>onResume</code>等方法。</p>
<h1 id="Hide-Or-Show（）的方式"><a href="#Hide-Or-Show（）的方式" class="headerlink" title="Hide() Or Show（）的方式"></a>Hide() Or Show（）的方式</h1><p>在使用Tab切换时，很多人在提倡<code>用FragmentManager</code>的hide()和show()的方法。</p>
<blockquote>
<p>transaction.hide()<br>隐藏当前的Fragment，仅仅是设为不可见，并不会销毁<br>transaction.show()<br>显示之前隐藏的Fragment   </p>
</blockquote>
<p>这个就稍微简单了点，对于一个<code>Fragment</code>，没add到transaction是就add，已经add了就show，其他不该显示的<code>Fragemnt</code>全部hide。就是这个简单残暴：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">switchFragemnt</span><span class="params">(String tag)</span> </span>&#123;</div><div class="line">    FragmentTransaction ft = getSupportFragmentManager().beginTransaction();</div><div class="line">    <span class="keyword">if</span> (Tag1.equals(tag))&#123;</div><div class="line">      <span class="keyword">if</span> (fragment2 != <span class="keyword">null</span> &amp;&amp; fragment2.isAdded())&#123;</div><div class="line">        ft.hide(fragment2);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (fragment1 == <span class="keyword">null</span>)&#123;</div><div class="line">        fragment1 = ContactFragment.newInstance(<span class="number">1</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (!fragment1.isAdded())&#123;</div><div class="line">        ft.add(R.id.contenter,fragment1,Tag1);</div><div class="line">      &#125;<span class="keyword">else</span> &#123;</div><div class="line">        ft.show(fragment1);</div><div class="line">      &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (Tag2.equals(tag))&#123;</div><div class="line">      <span class="keyword">if</span> (fragment1 != <span class="keyword">null</span> &amp;&amp; fragment1.isAdded())&#123;</div><div class="line">        ft.hide(fragment1);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (fragment2 == <span class="keyword">null</span>)&#123;</div><div class="line">        fragment2 = ContactFragment.newInstance(<span class="number">2</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (!fragment2.isAdded())&#123;</div><div class="line">        ft.add(R.id.contenter,fragment2,Tag2);</div><div class="line">      &#125;<span class="keyword">else</span> &#123;</div><div class="line">        ft.show(fragment2);</div><div class="line">      &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ft.commitAllowingStateLoss();</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>  这个只是简单的逻辑代码，傻了点不过肯定你能看懂，这个再切换过程中，只是隐藏但是依然可以流畅切。<br>  后来总结这些自己也抽象了一个简单的类：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.FragmentActivity;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.FragmentTransaction;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.TabHost;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TabManager</span> <span class="keyword">implements</span> <span class="title">TabHost</span>.<span class="title">OnTabChangeListener</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> FragmentActivity mActivity;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> TabHost          mTabHost;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>              mContainerId;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String, TabInfo&gt; mTabs = <span class="keyword">new</span> HashMap&lt;String, TabInfo&gt;();</div><div class="line"></div><div class="line">	TabHost.OnTabChangeListener tabChangeListener;</div><div class="line">	TabInfo mLastTab;</div><div class="line"></div><div class="line">	<span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TabInfo</span> </span>&#123;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> String   tag;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; clss;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> Bundle   args;</div><div class="line">		<span class="keyword">private</span>       Fragment fragment;</div><div class="line"></div><div class="line">		TabInfo(String _tag, Class&lt;?&gt; _class, Bundle _args) &#123;</div><div class="line">			tag = _tag;</div><div class="line">			clss = _class;</div><div class="line">			args = _args;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DummyTabFactory</span> <span class="keyword">implements</span> <span class="title">TabHost</span>.<span class="title">TabContentFactory</span> </span>&#123;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> Context mContext;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">DummyTabFactory</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">			mContext = context;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> View <span class="title">createTabContent</span><span class="params">(String tag)</span> </span>&#123;</div><div class="line">			View v = <span class="keyword">new</span> View(mContext);</div><div class="line">			v.setMinimumWidth(<span class="number">0</span>);</div><div class="line">			v.setMinimumHeight(<span class="number">0</span>);</div><div class="line">			<span class="keyword">return</span> v;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> TabManager <span class="title">setTabChangeListener</span><span class="params">(TabHost.OnTabChangeListener tabChangeListener)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.tabChangeListener = tabChangeListener;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TabManager</span><span class="params">(FragmentActivity activity, TabHost tabHost,</span></span></div><div class="line">			<span class="keyword">int</span> containerId) &#123;</div><div class="line">		mActivity = activity;</div><div class="line">		mTabHost = tabHost;</div><div class="line">		mContainerId = containerId;</div><div class="line">		mTabHost.setOnTabChangedListener(<span class="keyword">this</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> TabManager <span class="title">addTab</span><span class="params">(TabHost.TabSpec tabSpec, Class&lt;?&gt; clss, Bundle args)</span> </span>&#123;</div><div class="line">		tabSpec.setContent(<span class="keyword">new</span> DummyTabFactory(mActivity));</div><div class="line">		String tag = tabSpec.getTag();</div><div class="line"></div><div class="line">		TabInfo info = <span class="keyword">new</span> TabInfo(tag, clss, args);</div><div class="line"></div><div class="line">		<span class="comment">// Check to see if we already have a fragment for this tab, probably</span></div><div class="line">		<span class="comment">// from a previously saved state. If so, deactivate it, because our</span></div><div class="line">		<span class="comment">// initial state is that a tab isn't shown.</span></div><div class="line">		info.fragment = mActivity.getSupportFragmentManager().findFragmentByTag(tag);</div><div class="line">		<span class="keyword">if</span> (info.fragment != <span class="keyword">null</span> &amp;&amp; !info.fragment.isDetached()) &#123;</div><div class="line">			FragmentTransaction ft = mActivity.getSupportFragmentManager().beginTransaction();</div><div class="line">			ft.hide(info.fragment);</div><div class="line">			ft.commit();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		mTabs.put(tag, info);</div><div class="line">		mTabHost.addTab(tabSpec);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTabChanged</span><span class="params">(String tabId)</span> </span>&#123;</div><div class="line"></div><div class="line">		TabInfo newTab = mTabs.get(tabId);</div><div class="line">		<span class="keyword">if</span> (mLastTab != newTab) &#123;</div><div class="line">			FragmentTransaction ft = mActivity.getSupportFragmentManager().beginTransaction();</div><div class="line">			<span class="keyword">if</span> (mLastTab != <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">if</span> (mLastTab.fragment != <span class="keyword">null</span>) &#123;</div><div class="line">					ft.hide(mLastTab.fragment);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (newTab != <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">if</span> (newTab.fragment == <span class="keyword">null</span>) &#123;</div><div class="line">					newTab.fragment = Fragment.instantiate(mActivity, newTab.clss.getName(), newTab.args);</div><div class="line">					ft.add(mContainerId, newTab.fragment, newTab.tag);</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					ft.show(newTab.fragment);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			mLastTab = newTab;</div><div class="line">			ft.commitAllowingStateLoss(); <span class="comment">// 如果使用commit()，则从牛人协议页点同意后程序崩溃; java.lang.IllegalStateException: Can not perform this action after onSaveInstanceState</span></div><div class="line">			mActivity.getSupportFragmentManager().executePendingTransactions();</div><div class="line">			<span class="keyword">if</span> (tabChangeListener != <span class="keyword">null</span>)&#123;</div><div class="line">				tabChangeListener.onTabChanged(tabId);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  使用：<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mTabManager = <span class="keyword">new</span> TabManager(<span class="keyword">this</span>, mTabHost, R.id.realtabcontent);</div><div class="line">View tab1 = addTab(mInflater, Constants.INDEX_1, R.drawable.ic_tab_1, R.string.1);</div><div class="line">      mTabManager.addTab(mTabHost.newTabSpec(Constants.TAB_1).setIndicator(tabMarket), MainFragment.class, <span class="keyword">null</span>);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在Google已经在新的APP UI规范中开始提倡使用底部导航栏（&lt;code&gt;BottomNavigation&lt;/code&gt;），而不是以前的侧拉导航栏（&lt;code&gt;NavigationView&lt;/code&gt;,对于大屏手机，这个规范是很人性的。&lt;code&gt;BottomNavigation&lt;/code&gt;分为底部的Tab导航栏和上面的内容展示部分，实现上，每个Tab对应一个&lt;code&gt;Fragment&lt;/code&gt;，同时也需要我们正确处理每个&lt;code&gt;Fragment&lt;/code&gt;在Tab间进行切换，同时每次打开那个Tab时，那个Tab对应的&lt;code&gt;Fragment&lt;/code&gt;才加载。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ownwell.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://ownwell.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Python学习-pip和virtualenv</title>
    <link href="http://ownwell.github.io/2016/04/16/Android-developer-to-learn-to-python-01/"/>
    <id>http://ownwell.github.io/2016/04/16/Android-developer-to-learn-to-python-01/</id>
    <published>2016-04-16T13:57:04.000Z</published>
    <updated>2017-05-24T07:19:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Python可以作为运维人员的工具，无论是windows、mac和linux，都可以跑起来，比shell脚本方便，可以作为web的开发工具，搭建网站，在大数据方面Python也不弱，所以选择Python作为开发语言的工程师可能是一个全栈工程师。</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/308085d7cbf0dfed3d87bd686d564143_r.jpg" alt=""></p>
<a id="more"></a>
<p>那么<code>Python</code>作为一个热门语言，肯定有很多开发者，也有很多第三方库，那么我们怎么导入这些呢，就像我们通过<code>maven center</code>来获取第三方的库呢，不要担心<code>Python</code>也有。<br>就请出我们的男猪脚吧 —-<code>pip</code>。<br>对了我的电脑上有好几个版本的<code>Python</code>，<code>Python2.7</code>和<code>Python3</code>都有，搞得眼花缭乱，怎么办，不要担心今天的女猪脚也来了 —<code>virtualenv</code>。</p>
<p>双剑在手，<code>Python</code>无愁。</p>
<h1 id="Pip"><a href="#Pip" class="headerlink" title="Pip"></a><code>Pip</code></h1><h2 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装<code>pip</code></h2><p><code>mac</code>系统为例，<code>brew</code>安装<code>wget</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget https://raw.github.com/pypa/pip/master/contrib/get-pip.py</div><div class="line"></div><div class="line">python get-pip.py</div></pre></td></tr></table></figure>
<h2 id="pip-常用命令"><a href="#pip-常用命令" class="headerlink" title="pip 常用命令"></a>pip 常用命令</h2><h3 id="pip升级自己"><a href="#pip升级自己" class="headerlink" title="pip升级自己"></a>pip升级自己</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install --upgrade pip</div></pre></td></tr></table></figure>
<h3 id="使用search、install这两个参数"><a href="#使用search、install这两个参数" class="headerlink" title="使用search、install这两个参数"></a>使用search、install这两个参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pip install pack  </div><div class="line"></div><div class="line">pip install package</div></pre></td></tr></table></figure>
<h3 id="查看已经安装的库"><a href="#查看已经安装的库" class="headerlink" title="查看已经安装的库"></a>查看已经安装的库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip list</div></pre></td></tr></table></figure>
<h3 id="获取过期的库："><a href="#获取过期的库：" class="headerlink" title="获取过期的库："></a>获取过期的库：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pip list --outdated</div><div class="line"></div><div class="line">例如：</div><div class="line">pip list --outdated | grep Jinja2</div></pre></td></tr></table></figure>
<h1 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h1><h2 id="virtualenv安装"><a href="#virtualenv安装" class="headerlink" title="virtualenv安装"></a><code>virtualenv</code>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pip install virtualenv</div><div class="line"></div><div class="line">python3下</div><div class="line">pip install virtualenv</div></pre></td></tr></table></figure>
<h2 id="virtualenv使用"><a href="#virtualenv使用" class="headerlink" title="virtualenv使用"></a><code>virtualenv</code>使用</h2><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Mac:~ cyning$ mkdir myproject</div><div class="line">Mac:~ cyning$ cd myproject/</div><div class="line">Mac:myproject cyning$</div></pre></td></tr></table></figure>
<h3 id="创建一个独立的Python运行环境，命名为venv"><a href="#创建一个独立的Python运行环境，命名为venv" class="headerlink" title="创建一个独立的Python运行环境，命名为venv"></a>创建一个独立的<code>Python</code>运行环境，命名为<code>venv</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Mac:myproject cyning$ virtualenv --no-site-packages venv</div><div class="line">Using base prefix '/usr/local/.../Python.framework/Versions/3.4'</div><div class="line">New python executable in venv/bin/python3.4</div><div class="line">Also creating executable in venv/bin/python</div><div class="line">Installing setuptools, pip, wheel...done.</div></pre></td></tr></table></figure>
<p>参数<code>--no-site-packages</code>，这样，已经安装到系统<code>Python</code>环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的<code>Python</code>运行环境。</p>
<p>有了<code>venv</code>这个Python环境，可以用source进入该环境：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Mac:myproject cyning$ source venv/bin/activate</div><div class="line">(venv)Mac:myproject cyning$</div></pre></td></tr></table></figure>
<p>有个(venv)前缀，表示当前环境是一个名为<code>venv</code>的<code>Python</code>环境。</p>
<h3 id="在自己的Python环境下管理自己的Python的环境"><a href="#在自己的Python环境下管理自己的Python的环境" class="headerlink" title="在自己的Python环境下管理自己的Python的环境"></a>在自己的<code>Python</code>环境下管理自己的<code>Python</code>的环境</h3><p>下面正常安装各种第三方包，并运行<code>Python</code>命令:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(venv)Mac:myproject cyning$ pip install jinja2</div><div class="line">...</div><div class="line">Successfully installed jinja2<span class="number">-2.7</span><span class="number">.3</span> markupsafe<span class="number">-0.23</span></div><div class="line">(venv)Mac:myproject cyning$ python myapp.py</div></pre></td></tr></table></figure></p>
<p>在<code>venv</code>环境下，用<code>pip</code>安装的包都被安装到<code>venv</code>这个环境下，系统<code>Python</code>环境不受任何影响。也就是说，<code>venv</code>环境是专门针对myproject这个应用创建的。</p>
<p>退出当前的<code>venv</code>环境，使用<code>deactivate</code>命令:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(venv)Mac:myproject cyning$ deactivate</div><div class="line">Mac:myproject cyning$</div></pre></td></tr></table></figure>
<p>在<code>venv</code>和系统的<code>python</code>间自由的飞翔吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Python可以作为运维人员的工具，无论是windows、mac和linux，都可以跑起来，比shell脚本方便，可以作为web的开发工具，搭建网站，在大数据方面Python也不弱，所以选择Python作为开发语言的工程师可能是一个全栈工程师。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xj9f0.com1.z0.glb.clouddn.com/308085d7cbf0dfed3d87bd686d564143_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://ownwell.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://ownwell.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>站在大神肩膀上看RxJava</title>
    <link href="http://ownwell.github.io/2016/04/13/RxJava-introduce/"/>
    <id>http://ownwell.github.io/2016/04/13/RxJava-introduce/</id>
    <published>2016-04-13T13:44:49.000Z</published>
    <updated>2017-05-24T07:19:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/md/1470727585294.png"></p>
<p>RxJava是作为Android开发中的新贵， 越来越多的人参与到RxJava的拓展和使用上，如JakeWharton参与了多个RxJava项目。国内呢，一大批（如扔物线、小邓子、代码家等）对RxJava推广，你要不没听过它，你都觉得不好意思，因为它太火了。<br><a id="more"></a></p>
<p>今天我们就是要踩在这些过来人的肩膀上，来学习RxJava，这个主要是针对不熟悉RxJava的，若是已经很熟练使用了，这篇可能就不太适合你。</p>
<p>大概是在14年底，我在一个创业公司，从yahoo来的曾Sir就给我们分享RxJava但是当时资料甚少，加上项目赶紧，就大概知道了RxJava这种响应式处理数据太好了，但是使用起来需要自己写一堆配套的库，所以就搁置了。但是随着Retrofit 2.0、RxVolley等这些好用的第三方RxJava拓展库 —-用一次就觉得爽到爆—我决定在公司的项目中使用RxJava了。</p>
<p>RxJava是一个针对JVM通用的工具库，在Github上你会发现一堆的扩展库，在简书、CSDN等技术论坛上，你会发现有N多篇RxJava的文章，对于一个新手或者进阶的开发者，我就以过来人的身份为大家列出一些入门的文章和项目，本人不会有什么实质性的介绍或者解释，会给大家列出一系列的文章和书，一步步给大家知道。</p>
<h1 id="什么是RxJava以及RxJava能干什么"><a href="#什么是RxJava以及RxJava能干什么" class="headerlink" title="什么是RxJava以及RxJava能干什么"></a>什么是RxJava以及RxJava能干什么</h1><p>在Flipboard工作的扔物线同学用通俗的描述为我们讲述什么是Rxjava，为什么要用RxJava — <a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">给 Android 开发者的 RxJava </a>详解。很喜欢他的文章风格，图文都是让你过目不忘。还是建议你直接跳转去看看扔物线的<a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">文章</a>。</p>
<h1 id="该怎么用RxJava"><a href="#该怎么用RxJava" class="headerlink" title="该怎么用RxJava"></a>该怎么用RxJava</h1><p>其实我以前是先看的大头鬼翻译的文章，觉得翻译的很好（英文的，看着多多少少有时不太理解），深入浅出告诉你怎么使用RxJava。</p>
<ol>
<li><a href="http://blog.csdn.net/lzyzsd/article/details/41833541" target="_blank" rel="external">深入浅出RxJava（一：基础篇）</a></li>
<li><a href="http://blog.csdn.net/lzyzsd/article/details/44094895" target="_blank" rel="external">深入浅出RxJava(二：操作符)</a></li>
<li><a href="http://blog.csdn.net/lzyzsd/article/details/44891933" target="_blank" rel="external">深入浅出RxJava三–响应式的好处</a></li>
<li><a href="http://blog.csdn.net/lzyzsd/article/details/45033611" target="_blank" rel="external">深入浅出RxJava四-在Android中使用响应式编程</a></li>
</ol>
<p>看完了这些你或许对RxJava有个大概的印象和使用常见的操作符，那你可以试试用RxJava和RxAndroid来一个简单的项目。<br><a href="https://github.com/jpetitto/MovieListApp" target="_blank" rel="external">MovieListApp</a>没事可以看看这个项目，将请求的服务器远程数据请求后，通过Observable.just(）后，可以处理这些数据，通过map转换、onNext（）里缓存，线程切换、最后通过subcriber交给我们需要展示的UI组件上。</p>
<p>是不是有点意思了。<br>还有一个<a href="https://github.com/kaushikgopal/RxJava-Android-Samples" target="_blank" rel="external">Demo</a>。</p>
<p>等等，我感觉我还是不熟练啊。没关系，我是雷锋，继续给你发放福利。</p>
<ol>
<li><p><a href="https://github.com/mcxiaoke/RxDocs" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
</li>
<li><p><a href="http://rxmarbles.com/" target="_blank" rel="external">各种操作符的示例图</a>，满足你的视觉。<br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20160413-1.png" alt=""></p>
</li>
<li><p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0430/2815.html" target="_blank" rel="external">泡网相关的RxJava总结</a>，泡网里决定是都良心博文。</p>
</li>
</ol>
<h1 id="拓展库"><a href="#拓展库" class="headerlink" title="拓展库"></a>拓展库</h1><p>RxJava的拓展库太多了，如JakeWharton参与或者主导的项目就参与了RxBinding、RxAndroid等项目，现在越来越多的人参与RxJava的推广中。</p>
<p>我就项目中可能会用到的一些库给大家推荐几款。</p>
<h2 id="Retrofit"><a href="#Retrofit" class="headerlink" title="Retrofit"></a><a href="http://square.github.io/retrofit/" target="_blank" rel="external">Retrofit</a></h2><p>一个懒人必备神器，可以简化我们对网络请求的封装，用它可能也有一些问题，需要你再开发中解决。建议使用Retrofit 2.0。</p>
<ol>
<li><p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0915/3460.html" target="_blank" rel="external">Retrofit 2.0：有史以来最大的改进</a></p>
</li>
<li><p><a href="http://gank.io/post/56e80c2c677659311bed9841" target="_blank" rel="external">RxJava 与 Retrofit 结合的最佳实践</a> Gank.io的匠心写作系列文章。</p>
</li>
<li><p><a href="https://futurestud.io/blog/retrofit-getting-started-and-android-client" target="_blank" rel="external">Retrofit的使用手册</a>，必备手册。</p>
</li>
</ol>
<h2 id="RxBinding"><a href="#RxBinding" class="headerlink" title="RxBinding"></a><a href="https://github.com/JakeWharton/RxBinding" target="_blank" rel="external">RxBinding</a></h2><p>JakeWharton大神操刀项目，主要是各种组件绑定，将Onclick、TextWatcher等时间作为一个事件源，通过RxJava可以改善用户的交互体验，避免了快速点击会出现两个点击事件。另外，还支持kotlin。<br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20160413-2.png" alt=""></p>
<h2 id="RxLifecycle"><a href="#RxLifecycle" class="headerlink" title="RxLifecycle"></a><a href="https://github.com/trello/RxLifecycle" target="_blank" rel="external">RxLifecycle</a></h2><p>用来严格控制由于发布了一个订阅后，由于没有及时取消，导致Activity/Fragment无法销毁导致的内存泄露。</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20160413-3.png" alt=""></p>
<h2 id="Rx-preferences"><a href="#Rx-preferences" class="headerlink" title="Rx-preferences"></a><a href="https://github.com/f2prateek/rx-preferences" target="_blank" rel="external">Rx-preferences</a></h2><p>用RxJava实现Android中的SharedPreferences</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20160413-4.png" alt="image">)</p>
<h2 id="Storio"><a href="#Storio" class="headerlink" title="Storio"></a><a href="https://github.com/pushtorefresh/storio" target="_blank" rel="external">Storio</a></h2><p>支持RxJava的数据库</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ol>
<li><a href="https://github.com/lzyzsd/Awesome-RxJava" target="_blank" rel="external">Awesome-RxJava</a></li>
<li><a href="http://www.jianshu.com/p/6917510b0e4c" target="_blank" rel="external">RxJava常见的使用场景总结</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xj9f0.com1.z0.glb.clouddn.com/md/1470727585294.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;RxJava是作为Android开发中的新贵， 越来越多的人参与到RxJava的拓展和使用上，如JakeWharton参与了多个RxJava项目。国内呢，一大批（如扔物线、小邓子、代码家等）对RxJava推广，你要不没听过它，你都觉得不好意思，因为它太火了。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>用chrome调试Android程序</title>
    <link href="http://ownwell.github.io/2016/03/16/how-to-debug-application-with-stetho/"/>
    <id>http://ownwell.github.io/2016/03/16/how-to-debug-application-with-stetho/</id>
    <published>2016-03-16T14:02:50.000Z</published>
    <updated>2017-05-24T07:19:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>在开发过程中，我们经常喊着我们需要一个root的手机，为什么呢？<br><img src="http://pic.baike.soso.com/p/20090712/20090712210314-622536671.jpg" alt=""></p>
<a id="more"></a>
<p>因为有时我们需要查看手机/data/data里面的数据，如数据库、SharedPreferences，不过有的是否真的没有root过的手机，有人说你可以用虚拟机啊，不过虚拟机不友好的操作，让我很是不习惯。若是有一个工具是通过chrome浏览器就可以帮我们查看数据库、SharedPreferences是不是会让我们欣喜若狂啊。好了，FaceBook退出的<a href="https://github.com/facebook/stetho" target="_blank" rel="external">Stetho</a>满足你这个小小的愿望。</p>
<p>~不得不感叹FB真是良心企业~。<br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/mdfacebook.png-blog" alt="facebook"><br>FaceBook的东西总是采用比较流行的一些工具，<code>Stetho</code>编译也是Android Studio的，可以直接通过gradle来编译，那就开始使用Stetho吧。</p>
<h2 id="引入stetho"><a href="#引入stetho" class="headerlink" title="引入stetho"></a>引入stetho</h2><p>Java<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    //debug工具</div><div class="line">    compile &apos;com.facebook.stetho:stetho:1.2.0&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="配置Stetho"><a href="#配置Stetho" class="headerlink" title="配置Stetho"></a>配置Stetho</h2><p>在项目的Application下也需要配置下Stetho。</p>
<p>Java<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">private void initStetho() &#123;</div><div class="line">    Stetho.initialize(</div><div class="line">        Stetho.newInitializerBuilder(this)</div><div class="line">            .enableDumpapp(</div><div class="line">                Stetho.defaultDumperPluginsProvider(this))</div><div class="line">            .enableWebKitInspector(</div><div class="line">                Stetho.defaultInspectorModulesProvider(this))</div><div class="line">            .build());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>好了编译下，你的手机就启动了（废话一句，USB调试开关这时肯定是打开的）。</p>
<h2 id="在chrome查看"><a href="#在chrome查看" class="headerlink" title="在chrome查看"></a>在chrome查看</h2><p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/mdstetho_inspect.png-blog" alt=""></p>
<p>打开chrome浏览器，在地址栏输入<a href="chrome://inspect" target="_blank" rel="external">chrome://inspect</a>，好了你就可以可以在resource的tab下看到你想要的东西，还不快快体验下。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发过程中，我们经常喊着我们需要一个root的手机，为什么呢？&lt;br&gt;&lt;img src=&quot;http://pic.baike.soso.com/p/20090712/20090712210314-622536671.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ownwell.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://ownwell.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android开发中事半功倍的小知识点</title>
    <link href="http://ownwell.github.io/2016/02/29/Android%E5%BC%80%E5%8F%91%E4%B8%AD%E4%BA%8B%E5%8D%8A%E5%8A%9F%E5%80%8D%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://ownwell.github.io/2016/02/29/Android开发中事半功倍的小知识点/</id>
    <published>2016-02-29T13:52:28.000Z</published>
    <updated>2017-04-19T05:57:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在偷懒，没有更新自己的博客，曾经想放弃更新博客，觉得别人都写的挺好，为什么我的博客越写越不想写，产生了困惑和疑问，不过我后来觉得自己还是要写，是给自己写，一篇优质的博客，何尝不是自己从零开始思考，想通了也就决定今天开始，没一周至少一篇动心思写的博客或者翻译文章，由于女朋友也要复习自己的考试的东西，也要读读一些自己一直没看的书。</p>
<p>开发Android也已经快3年，在网易也已经呆了快一年，觉得自己成长的任然是很慢，当然了这还是自己的原因，不过在开源社区待久了，发现自己还是学到了一些好东西，下面就慢慢总结出来供大家参考。<br><a id="more"></a></p>
<h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><h2 id="IDEA-Android-Studio"><a href="#IDEA-Android-Studio" class="headerlink" title="IDEA/Android Studio"></a>IDEA/Android Studio</h2><p> Android Studio 是Google重点推荐的工具，以前的Eclipse+ADT已经不再维护了，它强大的地方就不再赘述。为了更好配合开发，有一些插件我们可能需要安装的：</p>
<ol>
<li>Android Parcelable code generator 在<code>Javabean</code>里右键，会有一个<code>Parcelable</code>可将javabean实现<code>Parcelable</code>接口。</li>
<li>GsonFormat 将json转成JaveBean。</li>
</ol>
<h1 id="干货聚集地"><a href="#干货聚集地" class="headerlink" title="干货聚集地"></a>干货聚集地</h1><p>  <a href="gank.io">干货，每天下午两点更新</a><br>  <a href="http://p.codekk.com/" target="_blank" rel="external">开源项目</a><br>  <a href="http://www.jcodecraeer.com/" target="_blank" rel="external">泡在网上的日子</a><br>  <a href="">Android developer Blog</a><br>  <a href="">AndroidStyling</a><br>  <a href="">开发者最前线</a></p>
<h1 id="好用第三方库"><a href="#好用第三方库" class="headerlink" title="好用第三方库"></a>好用第三方库</h1><p>   <a href="">Gson</a><br>   <a href="">Android-support</a><br>   <a href="">OkHttpClient</a><br>   <a href="">Rxjava/RxAndroid</a><br>   <a href="">Glide/Piccaso/UIL</a>    </p>
<h1 id="插件化框架"><a href="#插件化框架" class="headerlink" title="插件化框架"></a>插件化框架</h1><p>   <a href="https://github.com/bunnyblue/ACDD" target="_blank" rel="external">OpenAtlas/ACDD</a><br>   <a href="https://github.com/Qihoo360/DroidPlugin" target="_blank" rel="external">DroidPlug</a><br>   <a href="https://github.com/mmin18/AndroidDynamicLoader" target="_blank" rel="external">AndroidDynamicLoader</a>      </p>
<h1 id="高质量的APP"><a href="#高质量的APP" class="headerlink" title="高质量的APP"></a>高质量的APP</h1><p>  <a href="">NBAPlus</a><br>  <a href="">Gank.io</a>   </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直在偷懒，没有更新自己的博客，曾经想放弃更新博客，觉得别人都写的挺好，为什么我的博客越写越不想写，产生了困惑和疑问，不过我后来觉得自己还是要写，是给自己写，一篇优质的博客，何尝不是自己从零开始思考，想通了也就决定今天开始，没一周至少一篇动心思写的博客或者翻译文章，由于女朋友也要复习自己的考试的东西，也要读读一些自己一直没看的书。&lt;/p&gt;
&lt;p&gt;开发Android也已经快3年，在网易也已经呆了快一年，觉得自己成长的任然是很慢，当然了这还是自己的原因，不过在开源社区待久了，发现自己还是学到了一些好东西，下面就慢慢总结出来供大家参考。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ownwell.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://ownwell.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>多渠道打包时，多渠道不同的配置文件夹</title>
    <link href="http://ownwell.github.io/2015/12/02/%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85%E6%97%B6%EF%BC%8C%E5%A4%9A%E6%B8%A0%E9%81%93%E6%B3%A8%E6%84%8F%E4%BA%8B%E5%AE%9C/"/>
    <id>http://ownwell.github.io/2015/12/02/多渠道打包时，多渠道注意事宜/</id>
    <published>2015-12-02T12:44:31.000Z</published>
    <updated>2017-04-19T05:57:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>记得上次说过给多个渠道打包，用的是美团的那种方式，但是现在开发中还是有各种各样的问题，如给豌豆荚首发需要改变一些UI布局，想给自己的dubug和release用不同的图标标识一下等需要，不要说你没有，要是没有，小伙子你等着你产品经理肯定会找到你让你这么搞得。<br><a id="more"></a></p>
<p>Android Studio的文件结构其实是支持的。<br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/mdQQ20160229-1%402x.png" alt=""></p>
<p>其中<br>src<br><br>—main/java就是存放源代码 <br><br>—main/res存放资源<br><br>—AndroidMannifest manifest文件<br><br>而对于多渠道我们可以新建不同的文件夹,如</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/mdQQ20160229-2%402x.png" alt=""></p>
<p>这样在用productFlavors打渠道包就会找到不同的路径，如你的渠道是qihu360，其ad_image_bottom.png资源就会是src/qihu360下的ad_image_bottom.png。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记得上次说过给多个渠道打包，用的是美团的那种方式，但是现在开发中还是有各种各样的问题，如给豌豆荚首发需要改变一些UI布局，想给自己的dubug和release用不同的图标标识一下等需要，不要说你没有，要是没有，小伙子你等着你产品经理肯定会找到你让你这么搞得。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ownwell.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://ownwell.github.io/tags/Android/"/>
    
  </entry>
  
</feed>

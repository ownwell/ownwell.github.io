<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[cyning4星运]]></title>
  <subtitle><![CDATA[Follow your Heart]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://ownwell.github.io/"/>
  <updated>2016-04-01T06:06:48.000Z</updated>
  <id>http://ownwell.github.io/</id>
  
  <author>
    <name><![CDATA[小李]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Rxjava你不知道的秘密]]></title>
    <link href="http://ownwell.github.io/2016/04/01/Rxjava%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E5%AF%86%E7%A0%81/"/>
    <id>http://ownwell.github.io/2016/04/01/Rxjava你不知道的密码/</id>
    <published>2016-04-01T04:48:24.000Z</published>
    <updated>2016-04-01T06:06:48.000Z</updated>
    <content type="html"><![CDATA[<h1 id="概述">概述</h1><p>RxJava是作为Android开发中的新贵， 越来越多的人参与到RxJava的拓展和使用上，如<a href="https://github.com/JakeWharton" target="_blank" rel="external">JakeWharton</a>参与了多个RxJava项目。国内呢，一大批（如扔物线、小邓子、代码家等）对RxJava推广，你要不没听过它，你都觉得不好意思，因为它太火了。<br><img src="http://upload-images.jianshu.io/upload_images/675733-2254c982389d3d93.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="RxJava,我爱你"></p>
<h1 id="前言">前言</h1><p>大概是在14年底，我在一个创业公司，从yahoo来的曾Sir就给我们分享RxJava但是当时资料甚少，加上项目赶紧，就大概知道了RxJava这种响应式处理数据太好了，但是使用起来需要自己写一堆配套的库，所以就搁置了。但是随着Retrofit 2.0、RxVolley等这些好用的第三方RxJava拓展库 —-<strong>用一次就觉得爽到爆</strong>—我决定在公司的项目中使用RxJava了。</p>
<p>RxJava是一个针对JVM通用的工具库，在Github上你会发现一堆的扩展库，在简书、CSDN等技术论坛上，你会发现有N多篇RxJava的文章，对于一个新手或者进阶的开发者，我就以过来人的身份为大家列出一些入门的文章和项目。</p>
<h1 id="技术入门">技术入门</h1><p>首先你得熟悉RxJava，至于RxAndroid、RxBinding等可以放到后面在看，这个是基础。</p>
<h2 id="为什么要用RxJava以及RxJava能干什么">为什么要用RxJava以及RxJava能干什么</h2><p>在Flipboard工作的扔物线同学用通俗的描述为我们讲述什么是Rxjava，为什么要用RxJava — <a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">给 Android 开发者的 RxJava 详解</a>。很喜欢他的文章风格，图文都是让你过目不忘。</p>
<h2 id="该怎么用RxJava">该怎么用RxJava</h2><p>其实我以前是先看的<a href="http://blog.csdn.net/lzyzsd/" target="_blank" rel="external">大头鬼</a>翻译的文章，觉得翻译的很好（英文的，看着多多少少有时不太理解），深入浅出告诉你怎么使用RxJava。</p>
<ol>
<li><a href="http://blog.csdn.net/lzyzsd/article/details/41833541" target="_blank" rel="external">深入浅出RxJava（一：基础篇）</a></li>
<li><a href="http://blog.csdn.net/lzyzsd/article/details/44094895" target="_blank" rel="external">深入浅出RxJava(二：操作符)</a></li>
<li><a href="http://blog.csdn.net/lzyzsd/article/details/44891933" target="_blank" rel="external">深入浅出RxJava三—响应式的好处</a></li>
<li><a href="http://blog.csdn.net/lzyzsd/article/details/45033611" target="_blank" rel="external">深入浅出RxJava四-在Android中使用响应式编程</a></li>
</ol>
<p>看完了这些你或许对RxJava有个大概的印象和使用常见的操作符，那你可以试试用RxJava和RxAndroid来一个简单的项目。<br><a href="https://github.com/jpetitto/MovieListApp" target="_blank" rel="external">MovieListApp</a>没事可以看看这个项目，将请求的服务器远程数据请求后，通过Observable.just(）后，可以处理这些数据，通过map转换、onNext（）里缓存，线程切换、最后通过subcriber交给我们需要展示的UI组件上。</p>
<p>是不是有点意思了。<br>还有一个<a href="RxJava-Android-Samples">Demo</a>。</p>
<p>等等，我感觉我还是不熟练啊。没关系，我是雷锋，继续给你发放福利。</p>
<p><a href="https://github.com/mcxiaoke/RxDocs" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<p><a href="http://rxmarbles.com/" target="_blank" rel="external">各种操作符的示例图</a></p>
<p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0430/2815.html" target="_blank" rel="external">泡网相关的RxJava总结</a></p>
<h1 id="拓展库">拓展库</h1><p>RxJava的拓展库太多了，如<a href="https://github.com/JakeWharton" target="_blank" rel="external">JakeWharton</a>参与或者主导的项目就有4个：</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/mdQQ20160401-1.png" alt="image"></p>
<p>我就我们可能会用到的一些库给大家抛砖引玉：</p>
<h2 id="Retrofit"><a href="http://square.github.io/retrofit/" target="_blank" rel="external">Retrofit</a></h2><p>一个懒人必备神器，可以简化我们对网络请求的封装，用它可能也有一些问题，需要你再开发中解决。建议使用Retrofit 2.0。</p>
<ol>
<li><p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0915/3460.html" target="_blank" rel="external">Retrofit 2.0：有史以来最大的改进</a></p>
</li>
<li><p><a href="http://gank.io/post/56e80c2c677659311bed9841" target="_blank" rel="external">RxJava 与 Retrofit 结合的最佳实践</a></p>
</li>
<li><p><a href="https://futurestud.io/blog/retrofit-getting-started-and-android-client" target="_blank" rel="external">Retrofit的使用手册</a></p>
</li>
</ol>
<hr>
<p>这样你就可以看别人怎么使用Retrofit了，上几个项目：</p>
<ol>
<li><a href="http://p.codekk.com/detail/Android/SilenceDut/NBAPlus" target="_blank" rel="external">NBAPlus</a>。</li>
<li><a href="https://github.com/vyshane/rex-weather" target="_blank" rel="external">RxWeather</a></li>
</ol>
<h2 id="RxVolley"><a href="https://github.com/kymjs/RxVolley" target="_blank" rel="external">RxVolley</a></h2><p>使用起来简单，最主要作者是国内的<a href="http://www.kymjs.com/" target="_blank" rel="external">kymjs 张涛</a></p>
<h2 id=""><img src="https://github.com/JakeWharton/RxBinding" alt="RxBinding"></h2><p>主要是和UI组件绑定，将Onclick、TextWatcher等时间作为一个事件源，再扔物线中也有提及。</p>
<h2 id="RxLifecycle用来严格控制由于发布了一个订阅后，由于没有及时取消，导致Activity/Fragment无法销毁导致的内存泄露。"><a href="https://github.com/trello/RxLifecycle" target="_blank" rel="external">RxLifecycle</a>用来严格控制由于发布了一个订阅后，由于没有及时取消，导致Activity/Fragment无法销毁导致的内存泄露。</h2><h2 id="rx-preferences用RxJava实现Android中的SharedPreferences"><a href="https://github.com/f2prateek/rx-preferences" target="_blank" rel="external">rx-preferences</a>用RxJava实现Android中的SharedPreferences</h2><h2 id="Storio支持RxJava的网络请求库"><a href="https://github.com/pushtorefresh/storio" target="_blank" rel="external">Storio</a>支持RxJava的网络请求库</h2><h2 id="参考文章">参考文章</h2><ol>
<li><a href="https://github.com/lzyzsd/Awesome-RxJava" target="_blank" rel="external">Awesome-RxJava</a></li>
<li><a href="http://www.jianshu.com/p/6917510b0e4c" target="_blank" rel="external">RxJava常见的使用场景总结</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="概述">概述</h1><p>RxJava是作为Android开发中的新贵， 越来越多的人参与到RxJava的拓展和使用上，如<a href="https://github.com/JakeWharton" target="_blank" rel="external]]>
    </summary>
    
      <category term="RxJava" scheme="http://ownwell.github.io/tags/RxJava/"/>
    
      <category term="Android" scheme="http://ownwell.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用chrome调试Android程序]]></title>
    <link href="http://ownwell.github.io/2016/03/16/how-to-debug-application-with-stetho/"/>
    <id>http://ownwell.github.io/2016/03/16/how-to-debug-application-with-stetho/</id>
    <published>2016-03-16T14:02:50.000Z</published>
    <updated>2016-03-16T14:38:57.000Z</updated>
    <content type="html"><![CDATA[<p>原文出处：<a href="http://ownwell.github.io/2016/03/16/how-to-debug-application-with-stetho/" target="_blank" rel="external">cyning的博客</a>     </p>
<p>在开发过程中，我们经常喊着我们需要一个root的手机，为什么呢？<br><img src="http://pic.baike.soso.com/p/20090712/20090712210314-622536671.jpg" alt=""></p>
<p>因为有时我们需要查看手机/data/data里面的数据，如数据库、SharedPreferences，不过有的是否真的没有root过的手机，有人说你可以用虚拟机啊，不过虚拟机不友好的操作，让我很是不习惯。若是有一个工具是通过chrome浏览器就可以帮我们查看数据库、SharedPreferences是不是会让我们欣喜若狂啊。好了，FaceBook退出的<a href="https://github.com/facebook/stetho" target="_blank" rel="external">Stetho</a>满足你这个小小的愿望。</p>
<p>~不得不感叹FB真是良心企业~。<br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/mdfacebook.png-blog" alt="facebook"><br>FaceBook的东西总是采用比较流行的一些工具，<code>Stetho</code>编译也是Android Studio的，可以直接通过gradle来编译，那就开始使用Stetho吧。</p>
<h2 id="引入stetho">引入stetho</h2><p>Java<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">//debug工具</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.facebook.stetho:stetho:1.2.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="配置Stetho">配置Stetho</h2><p>在项目的Application下也需要配置下Stetho。</p>
<p>Java<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="component">private void initStetho() &#123;</span><br><span class="line">    Stetho<span class="string">.initialize(</span></span><br><span class="line">        Stetho<span class="string">.newInitializerBuilder(this)</span></span><br><span class="line">            <span class="string">.enableDumpapp(</span></span><br><span class="line">                Stetho<span class="string">.defaultDumperPluginsProvider(this))</span></span><br><span class="line">            <span class="string">.enableWebKitInspector(</span></span><br><span class="line">                Stetho<span class="string">.defaultInspectorModulesProvider(this))</span></span><br><span class="line">            <span class="string">.build())</span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>好了编译下，你的手机就启动了（废话一句，USB调试开关这时肯定是打开的）。</p>
<h2 id="在chrome查看">在chrome查看</h2><p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/mdstetho_inspect.png-blog" alt=""></p>
<p>打开chrome浏览器，在地址栏输入<a href="chrome://inspect" target="_blank" rel="external">chrome://inspect</a>，好了你就可以可以在resource的tab下看到你想要的东西，还不快快体验下。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文出处：<a href="http://ownwell.github.io/2016/03/16/how-to-debug-application-with-stetho/" target="_blank" rel="external">cyning的博客</a>    ]]>
    </summary>
    
      <category term="Android" scheme="http://ownwell.github.io/tags/Android/"/>
    
      <category term="Android" scheme="http://ownwell.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android开发中事半功倍的小知识点]]></title>
    <link href="http://ownwell.github.io/2016/02/29/Android%E5%BC%80%E5%8F%91%E4%B8%AD%E4%BA%8B%E5%8D%8A%E5%8A%9F%E5%80%8D%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://ownwell.github.io/2016/02/29/Android开发中事半功倍的小知识点/</id>
    <published>2016-02-29T13:52:28.000Z</published>
    <updated>2016-02-29T14:29:11.000Z</updated>
    <content type="html"><![CDATA[<p>最近一直在偷懒，没有更新自己的博客，曾经想放弃更新博客，觉得别人都写的挺好，为什么我的博客越写越不想写，产生了困惑和疑问，不过我后来觉得自己还是要写，是给自己写，一篇优质的博客，何尝不是自己从零开始思考，想通了也就决定今天开始，没一周至少一篇动心思写的博客或者翻译文章，由于女朋友也要复习自己的考试的东西，也要读读一些自己一直没看的书。</p>
<p>开发Android也已经快3年，在网易也已经呆了快一年，觉得自己成长的任然是很慢，当然了这还是自己的原因，不过在开源社区待久了，发现自己还是学到了一些好东西，下面就慢慢总结出来供大家参考。</p>
<h1 id="开发工具">开发工具</h1><h2 id="IDEA/Android_Studio">IDEA/Android Studio</h2><p> Android Studio 是Google重点推荐的工具，以前的Eclipse+ADT已经不再维护了，它强大的地方就不再赘述。为了更好配合开发，有一些插件我们可能需要安装的：</p>
<ol>
<li>Android Parcelable code generator 在<code>Javabean</code>里右键，会有一个<code>Parcelable</code>可将javabean实现<code>Parcelable</code>接口。</li>
<li>GsonFormat 将json转成JaveBean。</li>
</ol>
<h1 id="干货聚集地">干货聚集地</h1><p>  <a href="gank.io">干货，每天下午两点更新</a><br>  <a href="http://p.codekk.com/" target="_blank" rel="external">开源项目</a><br>  <a href="http://www.jcodecraeer.com/" target="_blank" rel="external">泡在网上的日子</a><br>  <a href="">Android developer Blog</a><br>  <a href="">AndroidStyling</a><br>  <a href="">开发者最前线</a></p>
<h1 id="好用第三方库">好用第三方库</h1><p>   <a href="">Gson</a><br>   <a href="">Android-support</a><br>   <a href="">OkHttpClient</a><br>   <a href="">Rxjava/RxAndroid</a><br>   <a href="">Glide/Piccaso/UIL</a>    </p>
<h1 id="插件化框架">插件化框架</h1><p>   <a href="https://github.com/bunnyblue/ACDD" target="_blank" rel="external">OpenAtlas/ACDD</a><br>   <a href="https://github.com/Qihoo360/DroidPlugin" target="_blank" rel="external">DroidPlug</a><br>   <a href="https://github.com/mmin18/AndroidDynamicLoader" target="_blank" rel="external">AndroidDynamicLoader</a>      </p>
<h1 id="高质量的APP">高质量的APP</h1><p>  <a href="">NBAPlus</a><br>  <a href="">Gank.io</a>   </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近一直在偷懒，没有更新自己的博客，曾经想放弃更新博客，觉得别人都写的挺好，为什么我的博客越写越不想写，产生了困惑和疑问，不过我后来觉得自己还是要写，是给自己写，一篇优质的博客，何尝不是自己从零开始思考，想通了也就决定今天开始，没一周至少一篇动心思写的博客或者翻译文章，由于]]>
    </summary>
    
      <category term="Android" scheme="http://ownwell.github.io/tags/Android/"/>
    
      <category term="Android" scheme="http://ownwell.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[多渠道打包时，多渠道不同的配置文件夹]]></title>
    <link href="http://ownwell.github.io/2015/12/02/%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85%E6%97%B6%EF%BC%8C%E5%A4%9A%E6%B8%A0%E9%81%93%E6%B3%A8%E6%84%8F%E4%BA%8B%E5%AE%9C/"/>
    <id>http://ownwell.github.io/2015/12/02/多渠道打包时，多渠道注意事宜/</id>
    <published>2015-12-02T12:44:31.000Z</published>
    <updated>2016-02-29T13:46:06.000Z</updated>
    <content type="html"><![CDATA[<p>记得上次说过给多个渠道打包，用的是美团的那种方式，但是现在开发中还是有各种各样的问题，如给豌豆荚首发需要改变一些UI布局，想给自己的dubug和release用不同的图标标识一下等需要，不要说你没有，要是没有，小伙子你等着你产品经理肯定会找到你让你这么搞得。</p>
<p>Android Studio的文件结构其实是支持的。<br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/mdQQ20160229-1%402x.png" alt=""></p>
<p>其中<br>src<br><br>—-main/java就是存放源代码 <br><br>—-main/res存放资源<br><br>—-AndroidMannifest manifest文件<br><br>而对于多渠道我们可以新建不同的文件夹,如</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/mdQQ20160229-2%402x.png" alt=""></p>
<p>这样在用productFlavors打渠道包就会找到不同的路径，如你的渠道是qihu360，其ad_image_bottom.png资源就会是src/qihu360下的ad_image_bottom.png。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>记得上次说过给多个渠道打包，用的是美团的那种方式，但是现在开发中还是有各种各样的问题，如给豌豆荚首发需要改变一些UI布局，想给自己的dubug和release用不同的图标标识一下等需要，不要说你没有，要是没有，小伙子你等着你产品经理肯定会找到你让你这么搞得。</p>
<p>]]>
    </summary>
    
      <category term="Android" scheme="http://ownwell.github.io/tags/Android/"/>
    
      <category term="Android" scheme="http://ownwell.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SwipeBackLayout的一个让人揪心的问题]]></title>
    <link href="http://ownwell.github.io/2015/09/30/swipeback-windowIsTranslucent/"/>
    <id>http://ownwell.github.io/2015/09/30/swipeback-windowIsTranslucent/</id>
    <published>2015-09-30T11:30:15.000Z</published>
    <updated>2015-09-30T11:52:53.000Z</updated>
    <content type="html"><![CDATA[<h1 id="概述">概述</h1><p>Google 新品发布会，我就不想说了，太烂了，其他的不多说。</p>
<p>今天愣是被一个问题给搞蒙，虽然待会还要坐车回家过十一，但是还是趁着现在的时间，总结一下自己的问题。</p>
<p>看到网易财经的交互不是很友好，对于习惯了IOS手机操作的人来说，滑动就关掉当前页面是个很好的交互，对于单手操作尤其方便，但是Android系统是不提供这种交互的，所以有些APP就做了，如网易新闻、简书等，这能极大方便用户。</p>
<h1 id="SwipeBackLayout">SwipeBackLayout</h1><p>这不我也给财经APP加上，用的是<a href="https://github.com/ikew0ng/SwipeBackLayout" target="_blank" rel="external">SwipeBackLayout</a>这个还蛮好用的，所以就重点推荐它吧。</p>
<p>使用就不用说了吧，直接继承<code>SwipeBackActivity</code>这个类,</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwipeBackActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> <span class="keyword">implements</span> <span class="title">SwipeBackActivityBase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SwipeBackActivityHelper mHelper;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        mHelper = <span class="keyword">new</span> SwipeBackActivityHelper(<span class="keyword">this</span>);</span><br><span class="line">        mHelper.onActivityCreate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onPostCreate(savedInstanceState);</span><br><span class="line">        mHelper.onPostCreate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">findViewById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        View v = <span class="keyword">super</span>.findViewById(id);</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="keyword">null</span> &amp;&amp; mHelper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> mHelper.findViewById(id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SwipeBackLayout <span class="title">getSwipeBackLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mHelper.getSwipeBackLayout();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSwipeBackEnable</span><span class="params">(<span class="keyword">boolean</span> enable)</span> </span>&#123;</span><br><span class="line">        getSwipeBackLayout().setEnableGesture(enable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scrollToFinishActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Utils.convertActivityToTranslucent(<span class="keyword">this</span>);</span><br><span class="line">        getSwipeBackLayout().scrollToFinishActivity();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其他的不变，不过这样可以左右滑动，但是下面的页面是黑乎乎的，那是因为你只是滑动了Activity的contentView，至于他们的之间的关系，建议你google下Activity，Window，DecorView就知道了（要看最新的，DecorView以前是个线性布局，现在最新的是FrameLayout）。</p>
<p>所以需要将window设置为透明：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;item name="android:windowIsTranslucent"&gt;true&lt;/item&gt;</span><br></pre></td></tr></table></figure></p>
<h1 id="问题">问题</h1><p> 这样问题就来了，我以前是给activity设置了<code>windowAnimationStyle</code>,现在全部失效，我给跪了。</p>
<pre><code class="Java">&lt;item name="android:activityOpenExitAnimation"&gt;@anim/hold&lt;/item&gt;
&lt;item name="android:activityCloseEnterAnimation"&gt;@anim/hold&lt;/item&gt;
&lt;item name="android:activityOpenEnterAnimation"&gt;@anim/slide_in_from_bottom&lt;/item&gt;
……
</code></pre>
<p> 这个也有人遇到了：<a href="https://github.com/ikew0ng/SwipeBackLayout/issues/3" target="_blank" rel="external">issue</a>。</p>
<p> 参照下面的问题，我找到这个了，发现居然又解决方案：<a href="http://blog.csdn.net/xuewater/article/details/36398803" target="_blank" rel="external">方案</a>。不过我们需要为Activity的task的其他属性。</p>
<p> 好了说多了多是泪，还是有时间自己也模仿着写个吧。</p>
<p> 十一了，快回家了，先祝媳妇十一快乐，感觉最对不起的就是她。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="概述">概述</h1><p>Google 新品发布会，我就不想说了，太烂了，其他的不多说。</p>
<p>今天愣是被一个问题给搞蒙，虽然待会还要坐车回家过十一，但是还是趁着现在的时间，总结一下自己的问题。</p>
<p>看到网易财经的交互不是很友好，对于习惯了IO]]>
    </summary>
    
      <category term="UI" scheme="http://ownwell.github.io/tags/UI/"/>
    
      <category term="Android" scheme="http://ownwell.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android的快速多渠道打包]]></title>
    <link href="http://ownwell.github.io/2015/09/28/mutichannel4Android/"/>
    <id>http://ownwell.github.io/2015/09/28/mutichannel4Android/</id>
    <published>2015-09-28T15:09:32.000Z</published>
    <updated>2015-10-30T05:33:46.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/b1f9ddc451da81cb302607745666d0160b2431d9.jpg" alt=""></p>
<h1 id="概要">概要</h1><p>听说Google play快来中国了，不知道这个消息对于奋战在一线的Android开发者来说是不是个福音，终于可以不用翻墙下载Android SDK、下载Android Studio（避免XCodeGhost闹剧），不过也有一个威胁，对国内的引用市场什么360、百度、豌豆荚等渠道市场是不是会有影响呢？就让我们拭目以待吧。</p>
<p>其实这篇博客应该在上周就要写的，因为本人搬家的缘故一直此次往后退，今天终于可以腾出时间来写这篇博客了——Android的多渠道打包。</p>
<h1 id="多渠道打包">多渠道打包</h1><ol>
<li><p><a href="http://ownwell.github.io/2014/06/24/package4Android/" target="_blank" rel="external">插件打包法：</a></p>
</li>
<li><p><a href="http://ownwell.github.io/2014/11/17/GradlewMutilChannelInAndroid/" target="_blank" rel="external">Android的productFlavors打包法</a></p>
</li>
</ol>
<p>不过现在你在product Flavor这个打包仍旧很慢，网易财经30多个渠道一个小时，这个是我们难以忍受的，怎么办怎么办？</p>
<h1 id="快速打包方案">快速打包方案</h1><p>这个问题也困扰着美团的一群工程师们，美团的<a href="http://tech.meituan.com/mt-apk-packaging.html" target="_blank" rel="external">多渠道打包</a>。</p>
<p>第一种是maven打包和Gradle的product Flavor差不多，替换一次渠道名称，打一个包，100渠道，100*3分钟。</p>
<p>第二种其实就是现在有些黑心公司，利用反编译技术改变一些文件、重新签名，再打包，很是不正规。</p>
<p>第三种就是今天的重头戏，就是将mate-inf下新建一个空文件，这文件的名称中有渠道名称，每次只需要读取渠道名称即可，这个脚本用的是Python。</p>
<p>说起来简单，就来一步步分析吧。</p>
<h2 id="渠道">渠道</h2><p>准备好各个渠道名，放到一个文件里，每个渠道一行：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wandoujia</span><br><span class="line">hiapk</span><br><span class="line"><span class="number">91</span></span><br><span class="line">QQ</span><br><span class="line"><span class="number">360</span></span><br><span class="line">miliao</span><br><span class="line">goapk</span><br></pre></td></tr></table></figure>
<h2 id="Python脚本">Python脚本</h2><p>创建一个空文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> 空文件 便于写入此空文件到apk包中作为channel文件</span><br><span class="line">src_empty_file = <span class="string">'info/imoney.txt'</span></span><br><span class="line"><span class="comment"># 创建一个空文件（不存在则创建）</span></span><br><span class="line">f = open(src_empty_file, <span class="string">'w'</span>) </span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 获取当前目录中所有的apk源包</span></span><br><span class="line">src_apks = []</span><br><span class="line"><span class="comment"># python3 : os.listdir()即可，这里使用兼容Python2的os.listdir('.')</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>):</span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(file):</span><br><span class="line">        extension = os.path.splitext(file)[<span class="number">1</span>][<span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">if</span> extension <span class="keyword">in</span> <span class="string">'apk'</span>:</span><br><span class="line">            src_apks.append(file)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 获取渠道列表</span></span><br><span class="line">channel_file = <span class="string">'info/channel.txt'</span></span><br><span class="line">f = open(channel_file)</span><br><span class="line">lines = f.readlines()</span><br><span class="line">f.close()</span><br><span class="line">`</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> src_apk <span class="keyword">in</span> src_apks:</span><br><span class="line">    <span class="comment"># file name (with extension)</span></span><br><span class="line">    src_apk_file_name = os.path.basename(src_apk)</span><br><span class="line">    <span class="comment"># 分割文件名与后缀</span></span><br><span class="line">    temp_list = os.path.splitext(src_apk_file_name)</span><br><span class="line">    <span class="comment"># name without extension</span></span><br><span class="line">    src_apk_name = temp_list[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 后缀名，包含.   例如: ".apk "</span></span><br><span class="line">    src_apk_extension = temp_list[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建生成目录,与文件名相关</span></span><br><span class="line">    output_dir = <span class="string">'output_'</span> + src_apk_name + <span class="string">'/'</span></span><br><span class="line">    <span class="comment"># 目录不存在则创建</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_dir):</span><br><span class="line">        os.mkdir(output_dir)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 遍历渠道号并创建对应渠道号的apk文件</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="comment"># 获取当前渠道号，因为从渠道文件中获得带有\n,所有strip一下</span></span><br><span class="line">        target_channel = line.strip()</span><br><span class="line">        <span class="comment"># 拼接对应渠道号的apk</span></span><br><span class="line">        target_apk = output_dir + src_apk_name + <span class="string">"_"</span> + target_channel + src_apk_extension  </span><br><span class="line">        <span class="comment"># 拷贝建立新apk</span></span><br><span class="line">        shutil.copy(src_apk,  target_apk)</span><br><span class="line">        <span class="comment"># zip获取新建立的apk文件</span></span><br><span class="line">        zipped = zipfile.ZipFile(target_apk, <span class="string">'a'</span>, zipfile.ZIP_DEFLATED)</span><br><span class="line">        <span class="comment"># 初始化渠道信息</span></span><br><span class="line">        empty_channel_file = <span class="string">"META-INF/channel_&#123;channel&#125;"</span>.format(channel = target_channel)</span><br><span class="line">        <span class="comment"># 写入渠道信息</span></span><br><span class="line">        zipped.write(src_empty_file, empty_channel_file)</span><br><span class="line">        <span class="comment"># 关闭zip流</span></span><br><span class="line">        zipped.close()</span><br></pre></td></tr></table></figure>
<p>**<br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20150928-1@2x.png" alt=""></p>
<p>通过python可以直接运行，20s 30多个渠道就出来。</p>
<h2 id="读取渠道名称">读取渠道名称</h2><p>由于我们的将渠道信息放到了meta-inf下，而不是以前的那个放到Manifest文件，所以需要在meta-inf获取渠道名称，并将这个渠道手动设置到对应统计的SDK（如Umeng，百度等）中去。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> *<span class="javadoctag"> @author</span> Cyning</span><br><span class="line"> *<span class="javadoctag"> @since</span> 2015.09.17</span><br><span class="line"> * Time    下午9:07</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MutiChannelConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String Version         = <span class="string">"version"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String Channel         = <span class="string">"channel"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_CHANNEL = <span class="string">"netease"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String Channel_File = <span class="string">"channel"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getChannelFromMeta</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        ApplicationInfo appinfo = context.getApplicationInfo();</span><br><span class="line">        String sourceDir = appinfo.sourceDir;</span><br><span class="line">        String ret = <span class="string">""</span>;</span><br><span class="line">        ZipFile zipfile = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zipfile = <span class="keyword">new</span> ZipFile(sourceDir);</span><br><span class="line">            Enumeration&lt;?&gt; entries = zipfile.entries();</span><br><span class="line">            <span class="keyword">while</span> (entries.hasMoreElements()) &#123;</span><br><span class="line">                ZipEntry entry = ((ZipEntry) entries.nextElement());</span><br><span class="line">                String entryName = entry.getName();</span><br><span class="line">                <span class="keyword">if</span> (entryName.startsWith(<span class="string">"META-INF"</span>) &amp;&amp; entryName.contains(<span class="string">"channel_"</span>)) &#123;</span><br><span class="line">                    ret = entryName;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (zipfile != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    zipfile.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] split = ret.split(<span class="string">"_"</span>);</span><br><span class="line">        <span class="keyword">if</span> (split != <span class="keyword">null</span> &amp;&amp; split.length &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ret.substring(split[<span class="number">0</span>].length() + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> DEFAULT_CHANNEL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * 得到渠道名</span><br><span class="line">     *<span class="javadoctag"> @param</span> mContext</span><br><span class="line">     *</span><br><span class="line">     *<span class="javadoctag"> @return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getChannel</span><span class="params">(Context mContext)</span> </span>&#123;</span><br><span class="line">        String channel = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (isNewVersion(mContext)) &#123;<span class="comment">//是新版本</span></span><br><span class="line">            LayzLog.e(<span class="string">"isNewVersion  %s"</span>, <span class="string">"isNewVersion"</span>);</span><br><span class="line">            saveChannel(mContext);<span class="comment">//保存当前版本</span></span><br><span class="line">            channel = getChannelFromMeta(mContext);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            channel = getCachChannel(mContext);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> channel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * 保存当前的版本号和渠道名</span><br><span class="line">     *<span class="javadoctag"> @param</span> mContext</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveChannel</span><span class="params">(Context mContext)</span> </span>&#123;</span><br><span class="line">        SharedPreferences mSettinsSP = mContext.getSharedPreferences(Channel_File, Activity.MODE_PRIVATE);</span><br><span class="line">        SharedPreferences.Editor mSettinsEd = mSettinsSP.edit();</span><br><span class="line">        mSettinsEd.putString(Version, APPUtils.getAppVersion(mContext));</span><br><span class="line">        mSettinsEd.putString(Channel, getChannelFromMeta(mContext));</span><br><span class="line">        <span class="comment">//提交保存</span></span><br><span class="line">        mSettinsEd.commit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNewVersion</span><span class="params">(Context mContext)</span> </span>&#123;</span><br><span class="line">        SharedPreferences mSettinsSP = mContext.getSharedPreferences(Channel_File, Activity.MODE_PRIVATE);</span><br><span class="line">        String version = APPUtils.getAppVersion(mContext);</span><br><span class="line">        LayzLog.e(<span class="string">"version%s"</span>, version);</span><br><span class="line">        <span class="keyword">return</span> !mSettinsSP.getString(Version, <span class="string">""</span>).equals(version);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getCachChannel</span><span class="params">(Context mContext)</span> </span>&#123;</span><br><span class="line">        SharedPreferences mSettinsSP = mContext.getSharedPreferences(Channel_File, Activity.MODE_PRIVATE);</span><br><span class="line">        <span class="keyword">return</span> mSettinsSP.getString(Channel, DEFAULT_CHANNEL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/b1f9ddc451da81cb302607745666d0160b2431d9.jpg" alt=""></p>
<h1 id="概要">概要</h1><p>听说Google ]]>
    </summary>
    
      <category term="python" scheme="http://ownwell.github.io/tags/python/"/>
    
      <category term="多渠道" scheme="http://ownwell.github.io/tags/%E5%A4%9A%E6%B8%A0%E9%81%93/"/>
    
      <category term="Android" scheme="http://ownwell.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring学习笔记（1）]]></title>
    <link href="http://ownwell.github.io/2015/09/02/learn-spring-1/"/>
    <id>http://ownwell.github.io/2015/09/02/learn-spring-1/</id>
    <published>2015-09-02T15:21:02.000Z</published>
    <updated>2015-09-18T15:09:06.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/1362969045_index.jpg" alt="Spring"></p>
<h1 id="Maven的配置">Maven的配置</h1><h2 id="spring的配置">spring的配置</h2><blockquote>
<p>我把spring的配置文件放到了resource下。</p>
</blockquote>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20150902-1@2x.png-blog" alt="spring配置"></p>
<h2 id="pom依赖">pom依赖</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.2.0.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h1 id="实例化Bean的三种方式">实例化Bean的三种方式</h1><ul>
<li>使用类构造器直接实例化</li>
</ul>
<ul>
<li><p>使用静态工厂的方法实例化</p>
</li>
<li><p>使用实例工厂方法实例化</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!--使用类构造器直接实例化 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"student"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.cyning.chart01.Student"</span>/&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- 使用静态工厂的方法实例化 --&gt;</span><br><span class="line">   &lt;bean id=<span class="string">"userBean2"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.cyning.chart01.BeanFactory"</span> factory-method=<span class="string">"personService"</span>/&gt;</span><br><span class="line">   &lt;!-- 使用实例工厂方法实例化 --&gt;</span><br><span class="line">   &lt;bean id=<span class="string">"factory"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.cyning.chart01.BeanFactory"</span>/&gt;</span><br><span class="line">   &lt;bean id=<span class="string">"userBean3"</span> factory-bean=<span class="string">"factory"</span> factory-method=<span class="string">"getPerson"</span>/&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对于第一种用类构造器示例的，就直接知道bean下的class，完成初始化。</p>
<p>静态工厂实例化则是，通过BeanFactory的factory-method这个静态方式实例化一个bean。</p>
<p>第三种则完全是先示例一个BeanFactory对象，再调用BeanFactory对象对象的factory-method。</p>
</blockquote>
<h1 id="Bean节点信息配置">Bean节点信息配置</h1><blockquote>
<p>Spring的Ioc容器启动时会初始化bean，但是我们可以指定Bean节点的lazy-init=”true”，来延迟初始化bean。这时候，只有第一次获取bean才会初始化bean.</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"student"</span> <span class="attribute">class</span>=<span class="value">"com.cyning.chart01.Student"</span> <span class="attribute">lazy-init</span>=<span class="value">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果想对所有的bean有应用延迟初始化，可以在跟节点beans设置default-lazy-init=”true”:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span></span><br><span class="line">        <span class="keyword">default</span>-lazy-init=<span class="string">"true"</span>&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://www.jetbrains.com/idea/" target="_blank" rel="external">IDEA</a>下很爽的代码提示:<br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20150902-2@2x.png-blog" alt=""></p>
</blockquote>
<p>当然了还有其他方法如销毁：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"student"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.cyning.chart01.Student"</span>  init-method=<span class="string">"init"</span> destroy-method=<span class="string">"show"</span>/&gt;</span><br></pre></td></tr></table></figure></p>
<p> 通过配置获取的bean默认的是一个单例。<br> 若是像配置成可以作为其他类的属性的，可以在bean的scope配置：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"student"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.cyning.chart01.Student"</span>    scope=<span class="string">"prototype"</span>/&gt;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>其实scode就两个属性：singleton 和prototype</p>
</blockquote>
<h1 id="依赖注入的简单实现">依赖注入的简单实现</h1><p>Spring的核心机制是依赖注入。依赖注入让bean与bean之间以配置文件组织在一起，而不是以硬编码的方式耦合在一起。依赖注入(Dependency Injection)和控制反转(Inversion of Control)是同一个概念。</p>
<p>具体含义是:当某个角色(可能是一个Java实例，调用者)需要另一个角色(另一个Java实例，被调用者)的协助时，在传统的程序设计过程中，通常由调用者来创建被调用者的实例。但在Spring里，创建被调用者的工作不再由调用者来完成，因此称为控制反转;创建被调用者实例的工作通常由Spring容器来完成，然后注入调用者，因此也称为依赖注入。不管是依赖注入，还是控制反转，都说明<strong>Spring采用动态、灵活的方式来管理各种对象。对象与对象之间的具体实现互相透明</strong>。</p>
<p>举个例子：<br>明天就要开始为抗日胜利70周年纪念日而举行盛大的阅兵仪式，其中环节是代表讲话，但是这个代表是个什么角色（士兵、抗日老兵……），我们不知道，他会将什么内容，我们也不知道，怎么办呢。</p>
<p>我们就可以模拟这个来一段依赖注入的代码实现：<br>加入我们把发表演讲的人，抽象成一个接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> *<span class="javadoctag"> @Author</span>: cyning</span><br><span class="line"> *<span class="javadoctag"> @Date</span> : 2015.09.02</span><br><span class="line"> *<span class="javadoctag"> @Time</span> : 下午11:56</span><br><span class="line"> *<span class="javadoctag"> @Desc</span> : 发表演讲的人，这个是个接口</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IActor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>而我们的阅兵仪式又必须有这个一个演讲者：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> *<span class="javadoctag"> @Author</span>: cyning</span><br><span class="line"> *<span class="javadoctag"> @Date</span> : 2015.09.03</span><br><span class="line"> *<span class="javadoctag"> @Time</span> : 上午12:13</span><br><span class="line"> *<span class="javadoctag"> @Desc</span> : 抗日胜利纪念</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AntiJapaneseParadeService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**  发言的人*/</span></span><br><span class="line">    <span class="keyword">private</span> IActor actor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>&#123;</span><br><span class="line">        actor.speak();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActor <span class="title">getActor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> actor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AntiJapaneseParadeService <span class="title">setActor</span><span class="params">(IActor IActor)</span> </span>&#123;</span><br><span class="line">        actor = IActor;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可能有哪些人呢，士兵、曾抗日的老战士：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> *<span class="javadoctag"> @Author</span>: cyning</span><br><span class="line"> *<span class="javadoctag"> @Date</span> : 2015.09.03</span><br><span class="line"> *<span class="javadoctag"> @Time</span> : 上午12:09</span><br><span class="line"> *<span class="javadoctag"> @Desc</span> : 士兵</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Soldier</span>  <span class="keyword">implements</span>  <span class="title">IActor</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是士兵，保家卫国，驱除日寇"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> *<span class="javadoctag"> @Author</span>: cyning</span><br><span class="line"> *<span class="javadoctag"> @Date</span> : 2015.09.03</span><br><span class="line"> *<span class="javadoctag"> @Time</span> : 上午12:10</span><br><span class="line"> *<span class="javadoctag"> @Desc</span> : 抗日老战士</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AntiJapaneseVeterans</span> <span class="keyword">implements</span> <span class="title">IActor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我们曾经经历人类历史最悲惨的战争之一，所以我们珍爱和平"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好了，假设早上名单出来了，是我们的抗日老战士，直接就可以把AntiJapaneseParadeService中的actor给指向我们的老战士对象，不是有set方法么。</p>
<p>但是这种是需要我们手动维护这个set方法，耦合度很高，为什么不通过DI（依赖注入）可注入式的配置呢。</p>
<p>spring.xml:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id="soldier" class="com.cyning.chart02.Soldier"/&gt;</span><br><span class="line">&lt;bean id="veterans" class="com.cyning.chart02.AntiJapaneseVeterans"/&gt;</span><br><span class="line">&lt;bean id="parade" class="com.cyning.chart02.AntiJapaneseParadeService"&gt;</span><br><span class="line">    &lt;property name="actor" ref="veterans"/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<p>test一下：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">testSpring1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext mContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring.xml"</span>);</span><br><span class="line">        AntiJapaneseParadeService mService = (AntiJapaneseParadeService)mContext.getBean(<span class="string">"parade"</span>);</span><br><span class="line">        mService.speak();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>这样只需要维护spring.xml 这个配置文件即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/1362969045_index.jpg" alt="Spring"></p>
<h1 id="Maven的配置">Maven的配置</h1><h2 id="spring的配置"]]>
    </summary>
    
      <category term="Java" scheme="http://ownwell.github.io/tags/Java/"/>
    
      <category term="Java" scheme="http://ownwell.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Jenkin+Git+Gradle为Android项目搭建CI环境]]></title>
    <link href="http://ownwell.github.io/2015/08/16/jenkins-CI-android/"/>
    <id>http://ownwell.github.io/2015/08/16/jenkins-CI-android/</id>
    <published>2015-08-16T02:10:58.000Z</published>
    <updated>2015-09-15T03:15:12.000Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>在平时的项目开发中，我们需要将最新的代码及时打包（尽管是debug版本的）供公司内部人员及时的查看工作进度，这个怎么才能做到呢。</p>
<p>我的上家公司是创业公司，总是用一些很前卫的技术：Android Studio、Gradle、Git、Material等。这些在去年的Google IO大会后，在我们的项目中，已经开始全面的使用（其实Android项目就我一个工程师）。当时就有同事提出了CI这个自动化集成环境来处理，后来果然搭了一个Jenkins的CI环境，每次只需要提交代码，CI会从GitLab上拉最新的代码，自动打包，同时推到我们内部的下载/发布页面上。而我们内部的员工在下载页面上下载最新的安转文件，用起来很爽啊。</p>
<p>对于工程师来说，你就只管提交代码，不用关心怎么打包之类的。<br>对于产品或者测试，我只需要从发布页面下载APK安装文件，不必每次都跑工程师那，安装个最新的包之类。<br>这中间是CI帮我们处理了，怎么更新代码，怎么打包，怎么发版，他就是神器。</p>
<p><strong>Do U think so。</strong></p>
<p>就简单说下CI的一些作用吧：<br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20150816-3@2x.png" alt="图1"></p>
<p>我每次提交一次代码（Git/SVN作为代码的版本控制）到develop分支上，CI检测到有版本需要更新，就会在一定的时间内打出一个到指定的目录下，而这个目录就是我们可以访问下载的页面。</p>
<p>这周我也通过Jenkins搭建了一个简单的CI（Continuous Integration）环境，以供大家使用。</p>
<h1 id="准备">准备</h1><ol>
<li>PC（mac or Linux机器）</li>
<li>Java +Gradle环境 +Android SDK</li>
<li>Tomcat 7+</li>
<li><p>Jenkins（最好是war文件）</p>
</li>
<li><p>配置好tomcat，能启动访问，将Jenkins放到Tomcat的WebAPP下，可以通过本地访问到jenkins。<img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20150816-1@2x.png" alt="图2"></p>
</li>
</ol>
<h1 id="全局配置">全局配置</h1><h2 id="下载Git和Gradle的相关插件">下载Git和Gradle的相关插件</h2><p> 在Jenkins首页（图1）— 系统管理 — 插件管理 ，搜索<a href="https://wiki.jenkins-ci.org/display/JENKINS/GitLab+Plugin" target="_blank" rel="external">Gitlab</a>和Gradle的插件。</p>
<h2 id="全局配置-1">全局配置</h2><p>在Jenkins首页（图1）— 系统管理 — 系统管理：<br>配置JDK、Android SDK、Git、Gradle这些环境</p>
<h3 id="配置Android_SDK环境">配置Android SDK环境</h3><p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20150816-4@2x.png" alt=""></p>
<h3 id="配置JDK环境">配置JDK环境</h3><p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20150816-5@2x.png" alt=""></p>
<h3 id="配置Git环境">配置Git环境</h3><p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20150816-16@2x.png" alt=""></p>
<h3 id="配置Gradle环境">配置Gradle环境</h3><p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20150816-7@2x.png" alt=""></p>
<h1 id="配置Job">配置Job</h1><h2 id="新建一个Job">新建一个Job</h2><p>对于Jenkins，每一个任务都是job，所以我们需要把自己的job映射到jenkins上。</p>
<p>在Jenkins首页（图1）—左侧的新建 </p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20150816-8@2x.png" alt="image"></p>
<p>再回到jenjins的首页，就会发现多了一个项目。</p>
<h2 id="配置一个Job">配置一个Job</h2><p>根据<strong>Jenkins首页（图1）— 项目 — 配置</strong>进入到配置页面。</p>
<p>1.填写Git的相关信息和分支。<br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20150816-12@2x.png" alt="image"></p>
<blockquote>
<p>git的话，我现在用的是https协议的，用ssh协议的话，记得填写key以private key.</p>
</blockquote>
<p>2.SCM配置<br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20150816-9@2x.png" alt="image"><br>scm就会每5分钟更新一次，若是远程仓库的指定分支上更新</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20150816-11@2x.png" alt="image"></p>
<p>这样配置完成了。</p>
<h2 id="构建">构建</h2><p>回到你的项目的首页，点击左侧的立即构建。<br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20150816-13@2x.png" alt="image"><br>若是失败了点击本次的构建历史。</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20150816-14@2x.png" alt="image"></p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20150816-15@2x.png" alt="image"></p>
<h2 id="发版到指定服务器">发版到指定服务器</h2><p>在构建完成后，我们不仅仅可以用gradle的命令，还可以使用shell、python等，这样我们就可以模拟出一个发版的Server了，这个就不再啰嗦了。</p>
<p>只要更新在5分钟内就可以在后台看见jenkins在非常卖力的工作给我们打包。</p>
<p>这个就是构建历史，还可以看见每次的状态啊<br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20150816-17@2x.png" alt=""></p>
<p>发布页面，这个页面下，公司内部人员就可先尝鲜了。<br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20150816-18@2x.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>在平时的项目开发中，我们需要将最新的代码及时打包（尽管是debug版本的）供公司内部人员及时的查看工作进度，这个怎么才能做到呢。</p>
<p>我的上家公司是创业公司，总是用一些很前卫的技术：Android Studio、Gradle、]]>
    </summary>
    
      <category term="Android" scheme="http://ownwell.github.io/tags/Android/"/>
    
      <category term="Jenkins" scheme="http://ownwell.github.io/tags/Jenkins/"/>
    
      <category term="Tools" scheme="http://ownwell.github.io/categories/Tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于Mysql允许远程连接]]></title>
    <link href="http://ownwell.github.io/2015/08/11/mysql-remote/"/>
    <id>http://ownwell.github.io/2015/08/11/mysql-remote/</id>
    <published>2015-08-11T14:19:04.000Z</published>
    <updated>2015-09-18T11:38:55.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Happy to be a good <strong>Developer</strong> ,not a coder.</p>
</blockquote>
<p>课外之余，在DigitalOcean上买了一个VPS空间，供自己的开发的项目准备，我安装<code>Tomcat</code> 和<code>Mysql</code>。Tomcat是没有问题，安装之后就可以了，但是mysql在远程访问总是提示权限不够，下班之后折腾了下，发现在Navicat打开居然Ok了。</p>
<p>就做个简单的总结，防止下次使用时又忘了。</p>
<h1 id="配置">配置</h1><h2 id="登录你的Mysql服务器">登录你的Mysql服务器</h2><p>在你的DigitalOcean上登录你的mysql</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uName -pPassword&#10;``&#10;&#10;&#25226;Name&#26367;&#25442;&#20320;&#30340;mysql&#30340;&#21517;&#23383;&#65292;Password&#20063;&#26159;&#19968;&#26679;&#65292;&#22914;&#20320;&#30340;root&#23494;&#30721;&#26159;123456&#10;&#23601;&#36825;&#20040;&#20889;&#10;```Shell&#10;mysql -uroot -p123456</span><br></pre></td></tr></table></figure>
<h2 id="进入你的mysql的管理的数据下的下">进入你的mysql的管理的数据下的下</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&#62; USE mysql;&#10;&#62;&#62;Database changed&#10;``&#10;&#10; &#20999;&#25442;&#21040; mysql DB&#10; ------------&#10; ```Shell&#10; mysql&#62; SELECT User, Password, Host FROM user;</span><br></pre></td></tr></table></figure>
<h2 id="查看现有用户,密码及允许连接的主机">查看现有用户,密码及允许连接的主机</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&#62; GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;192.168.1.100&#39; IDENTIFIED BY &#39;&#39; WITH GRANT OPTION;&#10;mysql&#62; -- @&#39;192.168.1.100&#39; #&#21487;&#20197;&#26367;&#25442;&#20026;@&#8216;%&#8217;&#23601;&#21487;&#20219;&#24847;ip&#35775;&#38382;&#65292;&#24403;&#28982;&#25105;&#20204;&#20063;&#21487;&#20197;&#30452;&#25509;&#29992; UPDATE     &#26356;&#26032; root &#29992;&#25143; Host, &#20294;&#19981;&#25512;&#33616;, SQL&#22914;&#19979;:&#10;mysql&#62; -- UPDATE user SET Host=&#39;192.168.1.100&#39; WHERE User=&#39;root&#39; AND Host=&#39;localhost&#39; LIMIT 1;&#10;mysql&#62; flush privileges;&#10;Query OK, 0 rows affected (0.00 sec)&#10;&#10;`</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>Happy to be a good <strong>Developer</strong> ,not a coder.</p>
</blockquote>
<p>课外之余，在DigitalOcean上买了一个VPS空间，供自己的开发的项目准备，我安]]>
    </summary>
    
      <category term="JavaEE" scheme="http://ownwell.github.io/tags/JavaEE/"/>
    
      <category term="Java" scheme="http://ownwell.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mac 下安装配置Tomcat]]></title>
    <link href="http://ownwell.github.io/2015/07/29/use-tomcat-on-mac-os/"/>
    <id>http://ownwell.github.io/2015/07/29/use-tomcat-on-mac-os/</id>
    <published>2015-07-29T14:08:47.000Z</published>
    <updated>2015-09-18T11:39:01.000Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>这几天手痒痒，一直在想着自己的APP（虽然公司也有项目，但是自己还是挺想做一个自己特希望的项目—一个学习站点应用）。</p>
<p>这不，大热天，就想着怎么抓取数据，于是乎，有了这个博客—-在Mac Os 下安装tomcat。</p>
<h1 id="安装">安装</h1><p>去<a href="http://tomcat.apache.org/download-70.cgi" target="_blank" rel="external">Apache Tomcat</a>上下载一个Tomcat，记得以前就用Tomcat 7 ，有感情了。</p>
<p>下载完，放到你的根目录下；/Library/Tomcat</p>
<p>给你的运行脚本权限，这个在window是没有这个的：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 755  /Library/Tomcat/bin/*.sh</span><br></pre></td></tr></table></figure>
<h1 id="启动Tomacat">启动Tomacat</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh /Library/Tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure>
<p> 成功的话会出现：<br> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> Using CATALINA_BASE:   /Library/Tomcat&#10;Using CATALINA_HOME:   /Library/Tomcat&#10;Using CATALINA_TMPDIR: /Library/Tomcat/temp&#10;Using JRE_HOME:        /Library/Java/JavaVirtualMachines/jdk1.8.0_31.jdk/Contents/Home&#10;Using CLASSPATH:       /Library/Tomcat/bin/bootstrap.jar:/Library/Tomcat/bin/tomcat-juli.jar</span><br></pre></td></tr></table></figure></p>
<p>OK，打开浏览器输入：localhost8080<br>就可以看见可爱的tom猫了。</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/tomcat_20150729.png" alt=""></p>
<h1 id="配置">配置</h1><p>这样每次启动太麻烦了，没事都要跑到library去启动tomcat的shel脚本，麻烦死了。</p>
<p>在终端的包含路径下（如/usr/bin），下新建一个tomcat的文件：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10140; /usr/bin &#62;sudo touch tomcat</span><br></pre></td></tr></table></figure>
<p>打开这个文件，配置shell脚本如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash&#10;&#10;case $1 in&#10;start)&#10;sh /Library/Tomcat/bin/startup.sh&#10;;;&#10;stop)&#10;sh /Library/Tomcat/bin/shutdown.sh&#10;;;&#10;restart)&#10;sh /Library/Tomcat/bin/shutdown.sh&#10;sh /Library/Tomcat/bin/startup.sh&#10;;;&#10;*)&#10;echo &#8220;Usage: start|stop|restart&#8221;&#10;;;&#10;esac&#10;&#10;exit 0</span><br></pre></td></tr></table></figure></p>
<p>保存，好了这样，你就可以在任何位置启动或者关闭tomat了：<br>快捷命令如下：</p>
<ol>
<li>tomcat start </li>
<li>tomcat stop</li>
<li>tomcat restart </li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>这几天手痒痒，一直在想着自己的APP（虽然公司也有项目，但是自己还是挺想做一个自己特希望的项目—一个学习站点应用）。</p>
<p>这不，大热天，就想着怎么抓取数据，于是乎，有了这个博客—-在Mac Os 下安装tomcat。</p>
]]>
    </summary>
    
      <category term="Tomcat" scheme="http://ownwell.github.io/tags/Tomcat/"/>
    
      <category term="Java" scheme="http://ownwell.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio自定LiveTemplates]]></title>
    <link href="http://ownwell.github.io/2015/07/27/Android-Studio%E8%87%AA%E5%AE%9ALiveTemplates/"/>
    <id>http://ownwell.github.io/2015/07/27/Android-Studio自定LiveTemplates/</id>
    <published>2015-07-27T05:25:35.000Z</published>
    <updated>2015-09-15T03:15:12.000Z</updated>
    <content type="html"><![CDATA[<h1 id="介绍">介绍</h1><p> Android Studio已经被越来越多的人任何，继承了IDEA的一切有点。我很喜欢代码提示，但是我们也需要自己的定义的live Temple，就是自己的一些快捷键。<br> 如：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.err.println();</span><br></pre></td></tr></table></figure>
<p> 只需要：<code>serr</code>+<code>Tab</code></p>
<p> 查看的方法很简单：<br> 在Prefrence—&gt; Editor—&gt;Live Templates, 有系统已经定义的可以去尝鲜吧。</p>
<h1 id="自定义">自定义</h1><p>我定义的一个单例模式</p>
<h2 id="添加一个LiveTemplate">添加一个LiveTemplate</h2><p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/live.png" alt="添加一个LiveTemplate"></p>
<h2 id="添加快速提示的字符">添加快速提示的字符</h2><p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/live_template_2.png" alt="image"></p>
<p>这样就会在输入inst按下Tab键就会出来我们要定义的代码片段</p>
<h2 id="添加代码片段">添加代码片段</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> $EXCEPTION$ mInstance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> $EXCEPTION$ getInstance() &#123;</span><br><span class="line">    <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> ($EXCEPTION$.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mInstance = <span class="keyword">new</span> $EXCEPTION$();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&gt;</p>
<blockquote>
<p><code>$EXCEPTION$</code>代表表达式</p>
<p><code>$SELECTION$</code> 选中的代码</p>
<p><code>$END$</code>  光标结束时，所在的位置</p>
</blockquote>
<p>EXCEPTION是没有意义的，编译它所代表的表达式。</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/live_template_3.png" alt="image"></p>
<h2 id="选择代码作用的区域">选择代码作用的区域</h2><p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/live_template_4.png" alt="image"></p>
<p>确认，应用!打工告成~~</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="介绍">介绍</h1><p> Android Studio已经被越来越多的人任何，继承了IDEA的一切有点。我很喜欢代码提示，但是我们也需要自己的定义的live Temple，就是自己的一些快捷键。<br> 如：</p>
 <figure class="highl]]>
    </summary>
    
      <category term="Android" scheme="http://ownwell.github.io/tags/Android/"/>
    
      <category term="Tools" scheme="http://ownwell.github.io/categories/Tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python学习笔记（3）--函数式编程]]></title>
    <link href="http://ownwell.github.io/2015/07/05/learn-notes/"/>
    <id>http://ownwell.github.io/2015/07/05/learn-notes/</id>
    <published>2015-07-05T03:03:22.000Z</published>
    <updated>2015-09-18T11:47:00.000Z</updated>
    <content type="html"><![CDATA[<h1 id="概述">概述</h1><p>函数是Python内建支持的一种封装，我们通过把大段代码拆成函数，通过一层一层的函数调用，就可以把复杂任务分解成简单的任务，这种分解可以称之为面向过程的程序设计。函数就是面向过程的程序设计的基本单元。</p>
<p>函数式编程就是一种抽象程度很高的编程范式，纯粹的函数式编程语言编写的函数没有变量，因此，任意一个函数，只要输入是确定的，输出就是确定的，这种纯函数我们称之为没有副作用。而允许使用变量的程序设计语言，由于函数内部的变量状态不确定，同样的输入，可能得到不同的输出，因此，这种函数是有副作用的。</p>
<p>函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！</p>
<p>Python对函数式编程提供部分支持。由于Python允许使用变量，因此，Python不是纯函数式编程语言。</p>
<h2 id="高级函数">高级函数</h2><h3 id="map/reduce">map/reduce</h3><p>map()函数接收两个参数，一个是函数，一个是序列，map将传入的函数依次作用到序列的每个元素，并把结果作为新的list返回。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">squ</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x*x;</span><br><span class="line">x =  map(squ,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>  x;</span><br></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p>这个有点类似用数组实现<br>L = []<br>for elem in arr:<br>   L.append(elem *elem)<br>print L</p>
</blockquote>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="概述">概述</h1><p>函数是Python内建支持的一种封装，我们通过把大段代码拆成函数，通过一层一层的函数调用，就可以把复杂任务分解成简单的任务，这种分解可以称之为面向过程的程序设计。函数就是面向过程的程序设计的基本单元。</p>
<p>函数式编程就是一种抽]]>
    </summary>
    
      <category term="Python" scheme="http://ownwell.github.io/tags/Python/"/>
    
      <category term="编程" scheme="http://ownwell.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Python" scheme="http://ownwell.github.io/categories/%E7%BC%96%E7%A8%8B/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python学习笔记(2)]]></title>
    <link href="http://ownwell.github.io/2015/07/02/python-learning-series1/"/>
    <id>http://ownwell.github.io/2015/07/02/python-learning-series1/</id>
    <published>2015-07-02T14:34:58.000Z</published>
    <updated>2015-09-18T11:46:49.000Z</updated>
    <content type="html"><![CDATA[<h1 id="概述">概述</h1><p>记得以前学习C++时，首先学的就是面向过程编程，所有的操作都是通过一个个的函数实现，一个好的函数，可以被导出调用，省时省力，函数是面向过程的一个主要元素。</p>
<p>那么函数在Python有什么好玩的呢？</p>
<h1 id="定义一个函数">定义一个函数</h1><p>可以定义一个由自己想要功能的函数，以下是简单的规则：</p>
<ol>
<li>函数代码块以def关键词开头，后接函数标识符名称和圆括号()。</li>
<li>任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。</li>
<li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li>
<li>函数内容以冒号起始，并且缩进。</li>
<li>Return[expression]结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">functionname</span><span class="params">( parameters )</span>:</span></span><br><span class="line">   <span class="string">"函数_文档字符串"</span></span><br><span class="line">   function_suite</span><br><span class="line">   <span class="keyword">return</span> [expression]</span><br><span class="line">``</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">来个例子吧：</span><br><span class="line">```Python</span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num1,num2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num1+num2;</span><br><span class="line"></span><br><span class="line">num1 = <span class="number">1</span></span><br><span class="line">num2 = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">total = add(num1,num2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"total = "</span>,total</span><br></pre></td></tr></table></figure>
<p>打印结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">total =  3</span><br></pre></td></tr></table></figure></p>
<h1 id="参数">参数</h1><h2 id="默认参数">默认参数</h2><p>函数名唯一，不像java中一个参数和两个参数的同名参数是同一个，但是Python不是，因为Python是弱语言。<br>函数传参，传引用改变引用值，跳出函数应用是改变的，但是对于一般的参数这是不可以的，同时参数允许默认值,对于Python参数是可以带上原有的参数名字的，顺序可与定义函数的顺序不同。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printStuInfo</span><span class="params">(name=<span class="string">"name"</span>,age=<span class="number">2</span>,stuNo=<span class="number">2009</span>,className=<span class="string">"软件工程"</span>)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"name=%s,age=%d,stuNo=%d,className=%s"</span>%(name,age,stuNo,className)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">printStuInfo(name=<span class="string">"Cyning"</span>,stuNo=<span class="number">2009</span>,age=<span class="number">25</span></span><br></pre></td></tr></table></figure>
<h2 id="关键字参数">关键字参数</h2><p>可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, **kw)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age, <span class="string">'other:'</span>, kw</span><br></pre></td></tr></table></figure>
<p>函数person除了必选参数name和age外，还接受关键字参数kw。在调用该函数时，可以只传入必选参数.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>person(<span class="string">'Michael'</span>, <span class="number">30</span>)</span><br><span class="line">name: Michael age: <span class="number">30</span> other: &#123;&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>person(<span class="string">'Bob'</span>, <span class="number">35</span>, city=<span class="string">'Beijing'</span>)</span><br><span class="line">name: Bob age: <span class="number">35</span> other: &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>&#125;</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>person(<span class="string">'Adam'</span>, <span class="number">45</span>, gender=<span class="string">'M'</span>, job=<span class="string">'Engineer'</span>)</span><br><span class="line">name: Adam age: <span class="number">45</span> other: &#123;<span class="string">'gender'</span>: <span class="string">'M'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</span><br></pre></td></tr></table></figure>
<p>关键字参数有什么用？它可以扩展函数的功能。比如，在person函数里，我们保证能接收到name和age这两个参数，但是，如果调用者愿意提供更多的参数，我们也能收到。试想你正在做一个用户注册的功能，除了用户名和年龄是必填项外，其他都是可选项，利用关键字参数来定义这个函数就能满足注册的需求。</p>
<p>和可变参数类似，也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>kw = &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, city=kw[<span class="string">'city'</span>], job=kw[<span class="string">'job'</span>])</span><br><span class="line">name: Jack age: <span class="number">24</span> other: &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</span><br></pre></td></tr></table></figure>
<p>当然，上面复杂的调用可以用简化的写法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>kw = &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, **kw)</span><br><span class="line">name: Jack age: <span class="number">24</span> other: &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参数组合">参数组合</h2><p>在Python中定义函数，可以用必选参数、默认参数、可变参数和关键字参数，这4种参数都可以一起使用，或者只用其中某些，但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数和关键字参数。</p>
<p>比如定义一个函数，包含上述4种参数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, b, c=<span class="number">0</span>, *args, **kw)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'args ='</span>, args, <span class="string">'kw ='</span>, kw</span><br></pre></td></tr></table></figure>
<p>args是一个tuple，kw是dict.</p>
<p>在函数调用的时候，Python解释器自动按照参数位置和参数名把对应的参数传进去。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>func(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">0</span> args = () kw = &#123;&#125;</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>func(<span class="number">1</span>, <span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = () kw = &#123;&#125;</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">'a'</span>, <span class="string">'b'</span>) kw = &#123;&#125;</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, x=<span class="number">99</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">'a'</span>, <span class="string">'b'</span>) kw = &#123;<span class="string">'x'</span>: <span class="number">99</span>&#125;</span><br></pre></td></tr></table></figure>
<p>最神奇的是通过一个tuple和dict，你也可以调用该函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>kw = &#123;<span class="string">'x'</span>: <span class="number">99</span>&#125;</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>func(*args, **kw)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="number">4</span>,) kw = &#123;<span class="string">'x'</span>: <span class="number">99</span>&#125;</span><br></pre></td></tr></table></figure>
<p>所以，对于任意函数，都可以通过类似func(<em>args, *</em>kw)的形式调用它，无论它的参数是如何定义的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="概述">概述</h1><p>记得以前学习C++时，首先学的就是面向过程编程，所有的操作都是通过一个个的函数实现，一个好的函数，可以被导出调用，省时省力，函数是面向过程的一个主要元素。</p>
<p>那么函数在Python有什么好玩的呢？</p>
<h1 id="定]]>
    </summary>
    
      <category term="Python" scheme="http://ownwell.github.io/tags/Python/"/>
    
      <category term="编程" scheme="http://ownwell.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Python" scheme="http://ownwell.github.io/categories/%E7%BC%96%E7%A8%8B/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio配置CheckStyle]]></title>
    <link href="http://ownwell.github.io/2015/07/01/Android-CheckStyle/"/>
    <id>http://ownwell.github.io/2015/07/01/Android-CheckStyle/</id>
    <published>2015-07-01T13:27:13.000Z</published>
    <updated>2015-09-18T11:39:30.000Z</updated>
    <content type="html"><![CDATA[<h1 id="概述">概述</h1><p>在开发中，我们需要不仅仅是个人的超强的能力（学习能力、解决问题能力等），我们也需要团队合作能力，我们要明白，我们的成功来自于我们的团队（一个英雄是很难自靠自己的能力来创造一个时代的）。今天我们就介绍一种，在团队开发中遵守某些编码规范的工具—-CheckStyle。</p>
<p>CheckStyle主要的功能就是实时检测，代码的规范（Code Style）是否符合我们规定的一个模板，如定义的静态常量是大写，局部参数以m开头，函数名字不超过20个字等。当发现这些不符合这些规范时，它就报一个警告或者错误等提示。</p>
<h1 id="CheckStyle检验的主要内容">CheckStyle检验的主要内容</h1><ol>
<li>Javadoc注释</li>
<li>命名约定</li>
<li>标题</li>
<li>Import语句</li>
<li>体积大小</li>
<li>空白</li>
<li>修饰符</li>
<li>块</li>
<li>代码问题</li>
<li>类设计</li>
<li>混合检查（包活一些有用的比如非必须的System.out和printstackTrace）</li>
</ol>
<h1 id="Android和Check_Style">Android和Check Style</h1><p>checkstyle帮助开发者实现常用JAVA代码规范的自动化检查。它的功能比较丰富，相对配置起来比较复杂，你需要根据自己的需求配置你想检查的东西，比如Annotations，Block Checks，Class Design，Coding，Duplicate Code，Headers，Imports，Javadoc Comments，Metrics，Miscellaneous，Modifiers，Naming Conventions，Regexp，Size Violations，Whitespace。</p>
<p>在Android开发中，也需要我们去定义，Android Studio继承了IDEA的可拓展特性，它也拥有CheckStyle的插件，在Android项目中，使用的Gradle配置。</p>
<h2 id="添加Plugin">添加Plugin</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'checkstyle'</span></span><br></pre></td></tr></table></figure>
<h2 id="设置CheckStyle版本">设置CheckStyle版本</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">checkstyle &#123;</span><br><span class="line">    toolVersion <span class="string">'6.1.1'</span></span><br><span class="line">    showViolations <span class="keyword">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="设置配置文件">设置配置文件</h2><p>checkStyle需要我们自定义我们的配置文件，如函数的名字不超过20个字符等，详情可参考 <a href="http://checkstyle.sourceforge.net/checks.html" target="_blank" rel="external">CheckStyle</a>的解释。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">check.dependsOn <span class="string">'checkstyle'</span></span><br><span class="line"></span><br><span class="line"><span class="function">task <span class="title">checkstyle</span><span class="params">(type: Checkstyle)</span> </span>&#123;</span><br><span class="line">    source <span class="string">'src'</span></span><br><span class="line">    <span class="function">configFile <span class="title">file</span><span class="params">(<span class="string">"config/checkstyle.xml"</span>)</span></span><br><span class="line">    include '**<span class="comment">/*.java'</span><br><span class="line">    exclude '**/</span>gen<span class="comment">/**'</span><br><span class="line">    ignoreFailures true</span><br><span class="line"></span><br><span class="line">    classpath = files()</span><br><span class="line">&#125;</span></span></span><br></pre></td></tr></table></figure>
<p>我现在用的是华为的<a href="https://gist.github.com/ownwell/c32878440216f1866842" target="_blank" rel="external">CheckStyle</a>：</p>
<p>当然了我们也可以自己定义。</p>
<h2 id="运行">运行</h2><p>安装Idea的check Style插件。</p>
<p>那么在我们的列表里，我们会看到多一个CheckStyle的窗口。<br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20150701-1@2x.png" alt="image"></p>
<p>我们可以选择一个文件，Check Current FIle。<br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20150701-2@2x.png" alt="image"></p>
<p>参考：</p>
<ol>
<li><p><a href="http://vincentbrison.com/2014/07/19/how-to-improve-quality-and-syntax-of-your-android-code/" target="_blank" rel="external">How to improve quality and syntax of your Android code
</a></p>
</li>
<li><p><a href="http://checkstyle.sourceforge.net/" target="_blank" rel="external">CheckStyle</a>及<a href="http://checkstyle.sourceforge.net/checks.html" target="_blank" rel="external">具体的配置</a></p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="概述">概述</h1><p>在开发中，我们需要不仅仅是个人的超强的能力（学习能力、解决问题能力等），我们也需要团队合作能力，我们要明白，我们的成功来自于我们的团队（一个英雄是很难自靠自己的能力来创造一个时代的）。今天我们就介绍一种，在团队开发中遵守某些编码规范的工]]>
    </summary>
    
      <category term="Android" scheme="http://ownwell.github.io/tags/Android/"/>
    
      <category term="Tools" scheme="http://ownwell.github.io/categories/Tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[热爱生活，珍爱生命]]></title>
    <link href="http://ownwell.github.io/2015/06/28/love-your-life/"/>
    <id>http://ownwell.github.io/2015/06/28/love-your-life/</id>
    <published>2015-06-28T13:40:07.000Z</published>
    <updated>2015-06-29T15:11:56.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/6e95ce11494c967d456a3&690.jpeg" class="img-center"><br><img src="" alt="Love your Life"></p>
<p>今天在朋友圈看到由高晓松导演，以李开复罹患癌症之后，对自己人生的反思为主题拍摄的纪录片——<a href="http://v.qq.com/cover/n/nvch2mx5yvdb8e0.html?vid=l0016hf9v44" target="_blank" rel="external">筑梦者之李开复-《向死而生真情实录版》</a>。</p>
<h1 id="反思">反思</h1><p>生命之短暂，随风而逝。在自然面前，生命是脆弱的，可能随时都被夺走。我们是否为自己曾经的言行而忏悔。</p>
<p>我们对于自己，对于别人，是否还有一些遗憾，我们曾经追梦，而那个梦是否是你的初心。</p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20150629-1@2x.png" class="img-topic"></p>
<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20150629-1@2x.png" class="img-center"></p>
<h1 id="亲情和友情">亲情和友情</h1><p>父母、伴侣、儿女以及朋友，这些我们身边最最亲近的人，和我们一起经历患难，一起见证这彼此的改变，而我们是否在他们最需要你的是否你及时的出现，想他/她一样帮助你。</p>
<p>子欲养而亲不待也，这何尝不是我们儿女最大的不孝！</p>
<p>我们的存在不是为了自己，而是为了自己更好和大家一起生活。</p>
<h1 id="身体">身体</h1><p>作为IT男，一直都宅在家里，外面空气也是很好。<br>养成良好的生活作息，不要现在用命挣钱，以后用钱养命。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/6e95ce11494c967d456a3&690.jpeg" class="img-center"><br><img src="" alt="Love your Life"><]]>
    </summary>
    
      <category term="生活" scheme="http://ownwell.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="生活" scheme="http://ownwell.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[译]Android渐变动画 Part1]]></title>
    <link href="http://ownwell.github.io/2015/06/27/%E6%B8%90%E5%8F%98%E5%8A%A8%E7%94%BB/"/>
    <id>http://ownwell.github.io/2015/06/27/渐变动画/</id>
    <published>2015-06-27T02:12:55.000Z</published>
    <updated>2015-08-25T18:00:04.000Z</updated>
    <content type="html"><![CDATA[<p>原文连接：<a href="https://blog.stylingandroid.com/transition-animation-part-1/" target="_blank" rel="external">https://blog.stylingandroid.com/transition-animation-part-1/</a></p>
<blockquote>
<p>译者语：在开源社区上逛久了，的确涨了新知识，不过也发现已经旧的很好的东西，没人留意，我就吧<a href="https://blog.stylingandroid.com/" target="_blank" rel="external">StyleAndroid</a>上一些东西翻译出来供大家来学习（StyleAndroid貌似在国内访问比较慢，还是建议大家卖个VPN，很便宜实惠）</p>
</blockquote>
<p>现在离Google发布Android 4.4 KitKat已经近两周了，他提供了新的API来供大家使用，接下来的这一系列的我们将看一下新的API中的渐变动画。</p>
<p>在以前的StylingAndroid（译者注：本文的作者<a href="https://blog.stylingandroid.com" target="_blank" rel="external">网站</a>）我们已经介绍了很多种动画，那么Android 4。4有什么新的API来让我们使用呢？最基本就是它提供了可以同时让多个View以同样的方式进行动画效果，貌似老版的也提供了，不过不同的是新版的API自己为我们做了很多工作，解放了大家。</p>
<p>下面有个示范的例子。先来看下布局文件吧：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">		<span class="attribute">android:id</span>=<span class="value">"@+id/layout_1"</span></span><br><span class="line">		<span class="attribute">android:layout_width</span>=<span class="value">"fill_parent"</span></span><br><span class="line">		<span class="attribute">android:layout_height</span>=<span class="value">"0dp"</span></span><br><span class="line">		<span class="attribute">android:layout_weight</span>=<span class="value">"1"</span></span><br><span class="line">		<span class="attribute">android:gravity</span>=<span class="value">"center"</span></span><br><span class="line">		<span class="attribute">android:orientation</span>=<span class="value">"vertical"</span></span><br><span class="line">		<span class="attribute">android:padding</span>=<span class="value">"@dimen/margin"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">			<span class="attribute">android:id</span>=<span class="value">"@+id/item_1a"</span></span><br><span class="line">			<span class="attribute">android:layout_width</span>=<span class="value">"fill_parent"</span></span><br><span class="line">			<span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">			<span class="attribute">android:minHeight</span>=<span class="value">"@dimen/item_height"</span></span><br><span class="line">			<span class="attribute">android:background</span>=<span class="value">"@color/red"</span></span><br><span class="line">			<span class="attribute">android:text</span>=<span class="value">"Item 1a"</span></span><br><span class="line">			<span class="attribute">android:gravity</span>=<span class="value">"center"</span></span><br><span class="line">			<span class="attribute">android:textAppearance</span>=<span class="value">"@style/Text"</span></span><br><span class="line">			<span class="attribute">android:layout_margin</span>=<span class="value">"@dimen/margin"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">			<span class="attribute">android:id</span>=<span class="value">"@+id/item_1b"</span></span><br><span class="line">			<span class="attribute">android:layout_width</span>=<span class="value">"fill_parent"</span></span><br><span class="line">			<span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">			<span class="attribute">android:minHeight</span>=<span class="value">"@dimen/item_height"</span></span><br><span class="line">			<span class="attribute">android:background</span>=<span class="value">"@color/green"</span></span><br><span class="line">			<span class="attribute">android:text</span>=<span class="value">"Item 1b"</span></span><br><span class="line">			<span class="attribute">android:gravity</span>=<span class="value">"center"</span></span><br><span class="line">			<span class="attribute">android:textAppearance</span>=<span class="value">"@style/Text"</span></span><br><span class="line">			<span class="attribute">android:layout_margin</span>=<span class="value">"@dimen/margin"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>假如我们想通过点击其中的一个TextView，就有一个动画来交换这两个TextView。在以前，我们可能通过属性动画（property animator）实现—-使用translateY来改变TextView在竖直方向上的位置。这个可能需要我们简单的计算已动画结束的位置来确保他们能落到正确的位置上。在动画结束时，我们需要在LinearLayout交互位置，并移出动画。</p>
<p>有了4.4的新API，这就简单多了。</p>
<p>逻辑上我们需要先交换这个TextView在LinearLayout里：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ViewGroup mLayout1;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(</span><br><span class="line">        LayoutInflater inflater,</span><br><span class="line">        ViewGroup container,</span><br><span class="line">        Bundle savedInstanceState)</span></span>&#123;</span><br><span class="line">        View view=inflater.inflate(R.layout.fragment_part1,</span><br><span class="line">        container,<span class="keyword">false</span>);</span><br><span class="line">        mLayout1=(ViewGroup)view.findViewById(R.id.layout_1);</span><br><span class="line">        mLayout1.findViewById(R.id.item_1a)</span><br><span class="line">        .setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        mLayout1.findViewById(R.id.item_1b)</span><br><span class="line">        .setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> selected=mLayout1.indexOfChild(v);</span><br><span class="line">        mLayout1.removeView(v);</span><br><span class="line">        mLayout1.addView(v,</span><br><span class="line">        selected==<span class="number">0</span>?mLayout1.getChildCount():<span class="number">0</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>这没什么难的啊，我们只是在父组件里先删除了一个view，然后又重新在插入一个新的位置上。为了能使他们能有动画，我们只需要加入两行代码。<strong>只需要两行！</strong></p>
<p>实际上只有一行，还有一行只是在分开view以确保原来的view不会滚动。</p>
<p>实际上</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> selected = mLayout1.indexOfChild(v);</span><br><span class="line"> TransitionManager.beginDelayedTransition(mLayout1,  <span class="keyword">new</span> ChangeBounds());</span><br><span class="line"> mLayout1.removeView(v);</span><br><span class="line"> mLayout1.addView(v,  selected == <span class="number">0</span> ? mLayout1.getChildCount() : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文连接：<a href="https://blog.stylingandroid.com/transition-animation-part-1/" target="_blank" rel="external">https://blog.stylingandroid.co]]>
    </summary>
    
      <category term="Animations" scheme="http://ownwell.github.io/tags/Animations/"/>
    
      <category term="Transition" scheme="http://ownwell.github.io/tags/Transition/"/>
    
      <category term="翻译" scheme="http://ownwell.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="Android" scheme="http://ownwell.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python学习笔记(1)]]></title>
    <link href="http://ownwell.github.io/2015/06/23/introduce-to-python2-7/"/>
    <id>http://ownwell.github.io/2015/06/23/introduce-to-python2-7/</id>
    <published>2015-06-23T14:38:00.000Z</published>
    <updated>2015-09-18T11:46:33.000Z</updated>
    <content type="html"><![CDATA[<p>python是一门很方便的脚本程序，在开发过程中，可以编写一些python脚本来作为工具使用。我也很感兴趣，想通过它来实现自己的爬虫。</p>
<p>教程参考：</p>
<ol>
<li><a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000" target="_blank" rel="external">廖学峰的Python教程</a></li>
<li><a href="http://www.w3cschool.cc/python/python-tutorial.html" target="_blank" rel="external">3wSchool Python教程</a></li>
</ol>
<h1 id="python的基本数据结构">python的基本数据结构</h1><p>在python有Number(数字)、String（字符串）、列表（List）、元组（tuple）、Dictionary（字典）。</p>
<h2 id="Python数字">Python数字</h2><p>Python支持四种不同的数值类型：</p>
<ol>
<li>int（有符号整型）</li>
<li>long（长整型[也可以代表八进制和十六进制]）</li>
<li>float（浮点型）</li>
<li>complex（复数）</li>
</ol>
<p>其数字的类型示例如下：<br><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20150623-1@2x.png" alt="image"></p>
<h2 id="Python字符串">Python字符串</h2><p>字符串或串(String)是由数字、字母、下划线组成的一串字符。</p>
<p>python的字串列表有2种取值顺序:</p>
<ol>
<li>从左到右索引默认0开始的，最大范围是字符串长度少1</li>
<li>从右到左索引默认-1开始的，最大范围是字符串开头</li>
</ol>
<p>当使用以冒号分隔的字符串，python返回一个新的对象，结果包含了以这对偏移标识的连续的内容，左边的开始是包含了下边界。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">str = <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> str <span class="comment"># 输出完整字符串</span></span><br><span class="line"><span class="keyword">print</span> str[<span class="number">0</span>] <span class="comment"># 输出字符串中的第一个字符</span></span><br><span class="line"><span class="keyword">print</span> str[<span class="number">2</span>:<span class="number">5</span>] <span class="comment"># 输出字符串中第三个至第五个之间的字符串</span></span><br><span class="line"><span class="keyword">print</span> str[<span class="number">2</span>:] <span class="comment"># 输出从第三个字符开始的字符串</span></span><br><span class="line"><span class="keyword">print</span> str * <span class="number">2</span> <span class="comment"># 输出字符串两次</span></span><br><span class="line"><span class="keyword">print</span> str + <span class="string">"TEST"</span> <span class="comment"># 输出连接的字符串</span></span><br></pre></td></tr></table></figure>
<p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Hello World!</span><br><span class="line">H</span><br><span class="line">llo</span><br><span class="line">llo World!</span><br><span class="line">Hello World!Hello World!</span><br><span class="line">Hello World!TEST</span><br></pre></td></tr></table></figure></p>
<h2 id="Python列表">Python列表</h2><p>List（列表） 是 Python 中使用最频繁的数据类型。和<strong>Java中的List</strong>有点类似，但是不同的是里面的元素可以是不同类型的。<br>列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（所谓嵌套）。</p>
<p>列表用[ ]标识。是python最通用的复合数据类型。看这段代码就明白。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">coding=utf-<span class="number">8</span></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">list = [ <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'john'</span>, <span class="number">70.2</span> ]</span><br><span class="line">tinylist = [<span class="number">123</span>, <span class="string">'john'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> list <span class="comment"># 输出完整列表</span></span><br><span class="line"><span class="keyword">print</span> list[<span class="number">0</span>] <span class="comment"># 输出列表的第一个元素</span></span><br><span class="line"><span class="keyword">print</span> list[<span class="number">1</span>:<span class="number">3</span>] <span class="comment"># 输出第二个至第三个的元素 </span></span><br><span class="line"><span class="keyword">print</span> list[<span class="number">2</span>:] <span class="comment"># 输出从第三个开始至列表末尾的所有元素</span></span><br><span class="line"><span class="keyword">print</span> tinylist * <span class="number">2</span> <span class="comment"># 输出列表两次</span></span><br><span class="line"><span class="keyword">print</span> list + tinylist <span class="comment"># 打印组合的列表</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'abcd'</span>, <span class="number">786</span>, <span class="number">2.23</span>, <span class="string">'john'</span>, <span class="number">70.2</span>]</span><br><span class="line">abcd</span><br><span class="line">[<span class="number">786</span>, <span class="number">2.23</span>]</span><br><span class="line">[<span class="number">2.23</span>, <span class="string">'john'</span>, <span class="number">70.2</span>]</span><br><span class="line">[<span class="number">123</span>, <span class="string">'john'</span>, <span class="number">123</span>, <span class="string">'john'</span>]</span><br><span class="line">[<span class="string">'abcd'</span>, <span class="number">786</span>, <span class="number">2.23</span>, <span class="string">'john'</span>, <span class="number">70.2</span>, <span class="number">123</span>, <span class="string">'john'</span>]</span><br></pre></td></tr></table></figure>
<h2 id="Python元组">Python元组</h2><p>元组用”()”标识。内部元素用逗号隔开。但是元素<strong>不能二次赋值，相当于只读列表</strong>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">tuple = ( <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'john'</span>, <span class="number">70.2</span> )</span><br><span class="line">tinytuple = (<span class="number">123</span>, <span class="string">'john'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> tuple <span class="comment"># 输出完整元组</span></span><br><span class="line"><span class="keyword">print</span> tuple[<span class="number">0</span>] <span class="comment"># 输出元组的第一个元素</span></span><br><span class="line"><span class="keyword">print</span> tuple[<span class="number">1</span>:<span class="number">3</span>] <span class="comment"># 输出第二个至第三个的元素 </span></span><br><span class="line"><span class="keyword">print</span> tuple[<span class="number">2</span>:] <span class="comment"># 输出从第三个开始至列表末尾的所有元素</span></span><br><span class="line"><span class="keyword">print</span> tinytuple * <span class="number">2</span> <span class="comment"># 输出元组两次</span></span><br><span class="line"><span class="keyword">print</span> tuple + tinytuple <span class="comment"># 打印组合的元组</span></span><br></pre></td></tr></table></figure>
<h2 id="Python元字典">Python元字典</h2><p>字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象结合，字典是无序的对象集合。</p>
<p>两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p>
<p>字典用”{ }”标识。字典由索引(key)和它对应的值value组成。和Java中的<strong>Map</strong>是不是很类似。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">dict = &#123;&#125;</span><br><span class="line">dict[<span class="string">'one'</span>] = <span class="string">"This is one"</span></span><br><span class="line">dict[<span class="number">2</span>] = <span class="string">"This is two"</span></span><br><span class="line"></span><br><span class="line">tinydict = &#123;<span class="string">'name'</span>: <span class="string">'john'</span>,<span class="string">'code'</span>:<span class="number">6734</span>, <span class="string">'dept'</span>: <span class="string">'sales'</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> dict[<span class="string">'one'</span>] <span class="comment"># 输出键为'one' 的值</span></span><br><span class="line"><span class="keyword">print</span> dict[<span class="number">2</span>] <span class="comment"># 输出键为 2 的值</span></span><br><span class="line"><span class="keyword">print</span> tinydict <span class="comment"># 输出完整的字典</span></span><br><span class="line"><span class="keyword">print</span> tinydict.keys() <span class="comment"># 输出所有键</span></span><br><span class="line"><span class="keyword">print</span> tinydict.values() <span class="comment"># 输出所有值</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This <span class="keyword">is</span> one</span><br><span class="line">This <span class="keyword">is</span> two</span><br><span class="line">&#123;<span class="string">'dept'</span>: <span class="string">'sales'</span>, <span class="string">'code'</span>: <span class="number">6734</span>, <span class="string">'name'</span>: <span class="string">'john'</span>&#125;</span><br><span class="line">[<span class="string">'dept'</span>, <span class="string">'code'</span>, <span class="string">'name'</span>]</span><br><span class="line">[<span class="string">'sales'</span>, <span class="number">6734</span>, <span class="string">'john'</span>]</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>python是一门很方便的脚本程序，在开发过程中，可以编写一些python脚本来作为工具使用。我也很感兴趣，想通过它来实现自己的爬虫。</p>
<p>教程参考：</p>
<ol>
<li><a href="http://www.liaoxuefeng.com/wiki/00]]>
    </summary>
    
      <category term="Python" scheme="http://ownwell.github.io/tags/Python/"/>
    
      <category term="编程" scheme="http://ownwell.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Python" scheme="http://ownwell.github.io/categories/%E7%BC%96%E7%A8%8B/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SublimeText的小技巧]]></title>
    <link href="http://ownwell.github.io/2015/06/17/sublimeText/"/>
    <id>http://ownwell.github.io/2015/06/17/sublimeText/</id>
    <published>2015-06-17T15:37:01.000Z</published>
    <updated>2015-06-23T15:29:30.000Z</updated>
    <content type="html"><![CDATA[<h1 id="简介">简介</h1><p>Sublime Text是一个跨平台的文本工具，对于大多数的开发者，大家并不陌生，我只是将我自己长常用的记录下来，好记性不如懒笔头。</p>
<p>SublimeText分为 Sublime Text2和Sublime Text3，其中3是收费版，会定时弹广告，不过我更喜欢3。其官网：<a href="http://www.sublimetext.com/" target="_blank" rel="external">http://www.sublimetext.com/</a></p>
<h1 id="安装Package_Control">安装Package Control</h1><p><a href="https://packagecontrol.io/" target="_blank" rel="external">Package Control</a>是一个subltext的Package管理工具，通过它可以安装很多的插件。</p>
<p>可以通过其<a href="https://packagecontrol.io/" target="_blank" rel="external">官网</a>来搜索，相关插件。</p>
<p>安装步骤</p>
<p>打开控制台页面(windows是 ctrl +` mac是command+`)</p>
<p>在控制太输入安装Package Control的命令：</p>
<p><strong>Sublime Text 3</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,os,hashlib; h = <span class="string">'eb2297e1a458f27d836c04bb0cbaf282'</span> + <span class="string">'d0e7a3098092775ccb37ca9d6b2e4b7d'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.replace(<span class="string">' '</span>, <span class="string">'%20'</span>)).read(); dh = hashlib.sha256(by).hexdigest(); print(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class="keyword">if</span> dh != h <span class="keyword">else</span> open(os.path.join( ipp, pf), <span class="string">'wb'</span> ).write(by)</span><br></pre></td></tr></table></figure>
<p><strong>Sublime Text 2</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib2,os,hashlib; h = <span class="string">'eb2297e1a458f27d836c04bb0cbaf282'</span> + <span class="string">'d0e7a3098092775ccb37ca9d6b2e4b7d'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(ipp) <span class="keyword">else</span> <span class="keyword">None</span>; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.replace(<span class="string">' '</span>, <span class="string">'%20'</span>)).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), <span class="string">'wb'</span> ).write(by) <span class="keyword">if</span> dh == h <span class="keyword">else</span> <span class="keyword">None</span>; print(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h) <span class="keyword">if</span> dh != h <span class="keyword">else</span> <span class="string">'Please restart Sublime Text to finish installation'</span>)</span><br></pre></td></tr></table></figure>
<p>安装完，restart。</p>
<h1 id="插件">插件</h1><p>通过弹出package control（command + shift+ P）—&gt;输入install,选择Package Control 输入你要安装的插件。</p>
<p>插件很多，我就把别人总结好的汇总如下：</p>
<p><a href="http://lucifr.com/2011/08/31/sublime-text-2-tricks-and-tips/#package_control" target="_blank" rel="external">Sublime Text 2 入门及技巧</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="简介">简介</h1><p>Sublime Text是一个跨平台的文本工具，对于大多数的开发者，大家并不陌生，我只是将我自己长常用的记录下来，好记性不如懒笔头。</p>
<p>SublimeText分为 Sublime Text2和Sublime Text3，其中]]>
    </summary>
    
      <category term="Sublime Text" scheme="http://ownwell.github.io/tags/Sublime-Text/"/>
    
      <category term="Tools" scheme="http://ownwell.github.io/tags/Tools/"/>
    
      <category term="Tools" scheme="http://ownwell.github.io/categories/Tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一个犀利的抓包工具---Charles]]></title>
    <link href="http://ownwell.github.io/2015/06/15/A-sharp-tool-Charles/"/>
    <id>http://ownwell.github.io/2015/06/15/A-sharp-tool-Charles/</id>
    <published>2015-06-15T12:36:57.000Z</published>
    <updated>2015-09-18T12:04:51.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20150918-1@2x.png" alt="charles"></p>
<p>NBA总决赛，如火如荼进行，是不是觉得很过瘾啊，看库里的三分，手起刀落，打得骑士丢盔卸甲，一个字—爽！库里有三分利器，我们也来一个在开发中常用的利器—-抓包工具Charles。</p>
<h1 id="介绍：">介绍：</h1><p>在移动开发中，我们可能需要监听我们手持设备怎么请求网络请求，如我们检测请求网易新闻、网易财经或者其他APP的数据，这就需要我们在网络请求时，有一个中间类似拦截、监听的代理工具，这就是charles。</p>
<p>先来打开Charles的<a href="http://www.charlesproxy.com/" target="_blank" rel="external">官网</a></p>
<blockquote>
<p>Charles is an HTTP proxy / HTTP monitor / Reverse Proxy that enables a developer to view all of the HTTP and SSL / HTTPS traffic between their machine and the Internet. This includes requests, responses and the HTTP headers (which contain the cookies and caching information).</p>
</blockquote>
<p>Charles是一个代理工具，它可以时刻记录着我们通过它的网络请求request、响应respone以及他们的http header（像cookie、cache 信息等）。</p>
<h1 id="监听网络请求和响应">监听网络请求和响应</h1><p>它是一个收费软件，很值得拥有，默认你下载安装完毕。</p>
<h2 id="Charles代理设置">Charles代理设置</h2><p>设置Charles的设置</p>
<p><img src="http://ownwell.github.io/image/charles_setting.png" alt="image"></p>
<p><img src="http://ownwell.github.io/image/charles_setting_port.png" alt="image"></p>
<p>确保你的手机和电脑连接的是同一个AP热点。</p>
<p>看先你电脑的ip吧。</p>
<p><img src="http://ownwell.github.io/image/charles_ip.png" alt="image"></p>
<p>摁住你的option键，点击你的wifi小图标，或者直接ifconfig或者ipconfig查看ip。</p>
<p>为了不必要的网络数据，将你的proxy—&gt; Mac OS X proxy 和FIrfox代理给取消。</p>
<h2 id="手机端设置">手机端设置</h2><p>点击你的Setting—&gt; WLan 长按你连接的WIfi热点—&gt;修改网络(你连接的热点一定要和Pc一致)</p>
<p><img src="http://ownwell.github.io/image/charles_phone-setting1.png" alt="image"></p>
<p>确保你输入的代理服务器的主机名为你的Pc 的ip地址，端口为刚才charles设置的端口（就是图片中一个8888端口，你要根据自己的设置修改）。</p>
<p>确认点击保存。</p>
<h3 id="连接代理服务器">连接代理服务器</h3><p>手机现在的网络请求就开始走Charles，但是有一个提示：</p>
<p><img src="http://ownwell.github.io/image/charles_network.png" alt="image"></p>
<p>Allow就可以看到请求的网易新闻客户端的一个接口：</p>
<p><img src="http://ownwell.github.io/image/charles_resquet_respone.png" alt="image"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xj9f0.com1.z0.glb.clouddn.com/QQ20150918-1@2x.png" alt="charles"></p>
<p>NBA总决赛，如火如荼进行，是不是觉得很过瘾啊，看库里的三分，手起刀落，打得骑士丢盔卸甲，一]]>
    </summary>
    
      <category term="Tools" scheme="http://ownwell.github.io/tags/Tools/"/>
    
      <category term="抓包" scheme="http://ownwell.github.io/tags/%E6%8A%93%E5%8C%85/"/>
    
      <category term="Tools" scheme="http://ownwell.github.io/categories/Tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git学习笔记]]></title>
    <link href="http://ownwell.github.io/2015/06/08/git-learning/"/>
    <id>http://ownwell.github.io/2015/06/08/git-learning/</id>
    <published>2015-06-08T13:04:47.000Z</published>
    <updated>2015-09-18T11:40:03.000Z</updated>
    <content type="html"><![CDATA[<p>Git的常用命令</p>
<h2 id="准备工作">准备工作</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Git 提供了一个叫做 git config 的工具（注：实际是 <code>git-config</code> 命令，只不过可以通过 git 加一个名字来呼叫此命令。），专门用来配置或读取相应的工作环境变量。而正是由这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：</p>
<ul>
<li>/etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 —system 选项，读写的就是这个文件。</li>
<li>~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 —global 选项，读写的就是这个文件。</li>
<li>当前项目的 Git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。<br>在 </li>
</ul>
<h3 id="用户信息">用户信息</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般在新的系统上，我们都需要先配置下自己的 Git 工作环境。配置工作只需一次，以后升级时还会沿用现在的配置。当然，如果需要，你随时可以用相同的命令修改已有的配置。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &#34;John Doe&#34;&#10;$ git config --global user.email johndoe@example.com</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果用了 —global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 —global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。</p>
</blockquote>
<h3 id="文本编辑器">文本编辑器</h3><p>默认的是vi或者vim</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global core.editor emacs</span><br></pre></td></tr></table></figure>
<h3 id="差异分析工具">差异分析工具</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global merge.tool vimdiff</span><br></pre></td></tr></table></figure>
<h3 id="查看配置信息">查看配置信息</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;$ git config --list&#10;&#62;user.name=Scott Chacon&#10;&#62;user.email=schacon@gmail.com&#10;&#62;color.status=auto&#10;&#62;color.branch=auto&#10;&#62;color.interactive=auto&#10;&#62;color.diff=auto&#10;...</span><br></pre></td></tr></table></figure>
<p>查看用户名：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config user.name&#10;&#62;Scott Chacon</span><br></pre></td></tr></table></figure>
<p>帮助文档</p>
<p>想查看帮助，可以通过一下三种方法：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git help &#60;verb&#62;&#10;$ git &#60;verb&#62; --help&#10;$ man git-&#60;verb&#62;&#10;`</span><br></pre></td></tr></table></figure>
<p>如 你想查看Git config<br>只需要如下命令：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;$ git config --help</span><br></pre></td></tr></table></figure>
<h1 id="取得项目的_Git_仓库">取得项目的 Git 仓库</h1><p>有两种取得 Git 项目仓库的方法。第一种是在现存的目录下，通过导入所有文件来创建新的 Git 仓库(本地仓库)。第二种是从已有的 Git 仓库克隆出一个新的镜像仓库来（远程仓库）。</p>
<p>参考文章</p>
<p><a href="http://ixirong.com/2014/11/19/the-way-to-learn-git/" target="_blank" rel="external">git入门指南使用资料汇总及文章推荐
</a></p>
<p><a href="http://blog.jobbole.com/78960/" target="_blank" rel="external">手把手教你使用Git</a></p>
<p><a href="http://git-scm.com/book/zh/v1" target="_blank" rel="external">pro git</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Git的常用命令</p>
<h2 id="准备工作">准备工作</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Git 提供了一个叫做 git config 的工具（注：实际是 <code>git-config<]]>
    </summary>
    
      <category term="Git" scheme="http://ownwell.github.io/tags/Git/"/>
    
      <category term="Tools" scheme="http://ownwell.github.io/categories/Tools/"/>
    
  </entry>
  
</feed>